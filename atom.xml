<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aegis</title>
  
  <subtitle>Aegis Curiser</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-06T14:39:02.783Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Deng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《蝙蝠侠: 黑暗骑士》影评</title>
    <link href="http://example.com/2022/04/06/ying-ping/bian-fu-xia-hei-an-qi-shi-ying-ping/"/>
    <id>http://example.com/2022/04/06/ying-ping/bian-fu-xia-hei-an-qi-shi-ying-ping/</id>
    <published>2022-04-06T06:48:44.000Z</published>
    <updated>2022-04-06T14:39:02.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《蝙蝠侠-黑暗骑士》影评"><a href="#《蝙蝠侠-黑暗骑士》影评" class="headerlink" title="《蝙蝠侠: 黑暗骑士》影评"></a>《蝙蝠侠: 黑暗骑士》影评</h1><p>这部电影我看了很多遍了,   斗胆来写写影评;   </p><h2 id="1-人物"><a href="#1-人物" class="headerlink" title="1. 人物"></a>1. 人物</h2><h3 id="詹姆斯·戈登"><a href="#詹姆斯·戈登" class="headerlink" title="詹姆斯·戈登"></a>詹姆斯·戈登</h3><p>戈登,   在上一部蝙蝠侠中还是一个小警员,   在这一部中已经变成了重案局头子,   相比于上一部,   戈登的谈吐之中多出了一份严谨和幽默,   即便是对于哥谭市法律中的第一道光,   光明骑士丹特,   也保持了一份距离,   犹见开篇戈登和丹特在丹特办公室交谈的那一段,   以及哥谭法治三铁腕在重案局楼顶的谈话,   都可以看出戈登虽然信任丹特,   但他们之间的隔阂也很大;   幽默体现在戈登在抓法科内黑帮头子马罗尼时与他的对话,   这里顺便说一句,   戈登就算和马罗尼一起吃饭都不奇怪,   我是这么理解的,   因为戈登和马罗尼把抓和被抓的规则玩的很透,   他俩的段位都很高,   在没有突破性的证据落到戈登手里之前,   马罗尼都不怕自己会被戈登抓,   就好像两个王者中单,   前期如果在河道碰上了,   也有可能不会对对方开火,   因为他们急着回到兵线上,   都生怕自己漏兵,   因为他们都知道,   他们之间的博弈并不在此刻的操作上,   而在于谁对于这场游戏的走向起到了更大的推进作用,   进而导致游戏的输赢;   </p><p>戈登晋升为了重案局头子,   但他的工作态度并没有丝毫的改变,   他还是一样的身先士卒,   一样的勇敢,   一样的拼命,   犹见戈登查”哈维”和”丹特”那一段的破门而入,   以及掩盖自己的死亡,   装成小兵去驾驶押送丹特的车,   只身抓捕小丑的那一段;   他很默默无闻,   不像丹特那样到处进行演讲,   提高自己的知名度(虽然这样做没错),   他一直在做自己应该做的事;   在竞升为警察局局长后依然如此,   相比于上一任局长真是…</p><p>在结尾,   戈登称赞蝙蝠侠是一位时刻警惕的保卫者(a watchful protector),   的确,   蝙蝠侠完全配得上这个称号,   他一直小心翼翼地保护着整个哥谭,   但戈登同样也配得上这个称号,   比如预料上一任警察局局长的酒有问题(嗷虽然最后没救回来),   以及飞身为市长挡下子弹,   甚至故意掩盖自己的死亡,   以免自己的家人受到伤害,   他一直小心翼翼地保护着他应该保护的人,   他真的配的上这个称号;   </p><p>另外再称赞一下戈登的扮演者加里·奥德曼,   同时也是小天狼星的扮演者,   四个字—演啥像啥;   </p><h3 id="布鲁斯·韦恩"><a href="#布鲁斯·韦恩" class="headerlink" title="布鲁斯·韦恩"></a>布鲁斯·韦恩</h3><p>一位赋有悲壮而浪漫骑士精神的超级英雄,   影片的最后他毅然顶下丹特的所有罪行,   背负着杀人犯的罪名成为了万人唾骂的对象,   这样的神来之笔立刻拔高了蝙蝠侠的高度;   要知道一个付出了很多努力的人是多么希望他的家人,   他奋斗的对象承认和记住他,   而蝙蝠侠却是横眉冷被千夫指,   俯首亦为孺子牛;   如果一个生在哥谭的人,   一朝笑哥谭苍生,   一夕夜里挑明灯,   那他也完全值得被称赞了;   但是韦恩没有对哥谭进行任何形式的嘲讽,   他坚信哥谭充满着善良的人,   而他也在让哥谭变好的路上努力着,   隐忍着;   </p><p>本片深挖了蝙蝠侠的主题,   最终给出的答案是—黑暗骑士;   一是字面意思,   蝙蝠身黑,   在夜间行动;   二是与光明骑士形成对比,   光明骑士丹特站在明处,   承受压力的同时受到万人敬仰,   是哥谭人民的希望之光,   而黑暗骑士站在暗处,   是一个逃犯,   在愈演愈烈的哥谭局势中被人们逼迫着展示自己的真实身份;   毫无疑问,   不论黑暗骑士怎样神通广大,   靠他一人是救不了哥谭的,   因为黑暗骑士不能站在明处使用体制内的法律武器打击黑帮,   无法根治哥谭问题,   这也就是在影片末尾,   黑暗骑士和戈登拼命维护丹特形象的原因;   很多时候,   真相并不美好,   但有时,   人们值得更多,   有时,   人们的信念必须得到回报,   而值得守卫的,   也正是那些”不过于聪明,   也不怎么坚强的人们”(语出迪迦,   蜃楼的怪兽);   </p><h3 id="小丑"><a href="#小丑" class="headerlink" title="小丑"></a>小丑</h3><p>不同于19年的《小丑》电影里的小丑,   本片里的小丑代表了一种纯粹的恶,   就好像管家阿福说的那样,   “他只想看着这个世界沦陷在犯罪的火焰中”;   但是影片并不是着重想要描述小丑的这种纯粹的恶,   小丑想要传达出一种思想,   即,   有一些人想要通过自己的努力在这个世界里建立一种秩序,   但是这个世界本就应该是混乱无序的,   这和上述阿福说的话不谋而合,   而且似乎解释了小丑为什么会”只想看着这个世界沦陷在犯罪的火焰中”,   因为他觉得这个世界本来就应该是这样的,   再想想在审讯室里小丑对蝙蝠侠说的那些话,   “当,   这些文明人会人吃人”,   因为他觉得这个世界本来就应该是混乱的;   当然,   小丑对丹特说他自己没有计划,   那肯定是假的,   他正是通过一系列的计划去传达这个思想,   但他的计划却和他所说的那些阴谋家的计划目的不同,   前者是为了传达思想,   后者是为了掌控局势;   </p><p>另外,   本人不得不阐述一些私货,   在B站上本人看到了太多太多喜欢小丑的弹幕,   B站的up主努力的lorre曾经说,   如果这些人赞扬的是小丑的潇洒的个性,   决胜千里的谋略而不是杀人如麻的行事风格的话,  这是可以接受的;   但是我想说,    不管如何,   小丑都是不可以成为喜欢的对象的,   因为他的所有行为和计划都是建立在毫无底线的杀戮之上的,   看看整片他杀了多少人,   为了传达”下一个目标是市长”的信息,   就杀害了两个无辜的人;   赞扬小丑的决胜千里还不如去赞扬诺兰导演的脑洞,   说真的;   </p><p>只有像韦恩那样,   明知世界如此,   却义无反顾地决心去改变它的人,   才值得真正地被赞扬,   说实话,   明哲保身的人太多了,   就像这个社会之中,   很多人知道这个社会内卷严重,   他们就有了这样的目标:   我要通过我自己的努力,   去尽可能地摆脱资本的控制,   美其名曰,   不让资本肮脏的血液流进我的身体里,   然后去做一些不内卷的工作,   比如去当培训班的老师,   或是自起炉灶;   然后呢?让自己教出来的学生学到知识之后再去内卷?   真正的社会主义战士会义无反顾地站出来,   去同资本斗争,   去从根本解决内卷,   而不是明哲保身 !</p><p>当然,   小丑的扮演者希斯莱杰毫无疑问是值得赞扬的,   他的演技让这部影片变得更加精彩;   </p><h2 id="2-情节"><a href="#2-情节" class="headerlink" title="2. 情节"></a>2. 情节</h2><h3 id="拥有对方引爆器的两艘船"><a href="#拥有对方引爆器的两艘船" class="headerlink" title="拥有对方引爆器的两艘船"></a>拥有对方引爆器的两艘船</h3><p>看过三体的人一定会联想到这两艘船处于黑暗森林状态,   首先双方互相不能沟通,   其次只能有一部分人活下来,   唯一的不同在于,   他们还在地球上;   而这两艘船的人没有互相引爆,   说明导演想要通过这个情节去体现人性的光辉,   说实话,   如果在现实当中,   两艘船很有可能都会被引爆,   而在民主投票过后,   按下引爆器不会是什么难事,   尤其是对于一些精致的利己主义者,   一些所谓的,   社会精英,   只不过是眼睛一闭一睁的事;   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《蝙蝠侠-黑暗骑士》影评&quot;&gt;&lt;a href=&quot;#《蝙蝠侠-黑暗骑士》影评&quot; class=&quot;headerlink&quot; title=&quot;《蝙蝠侠: 黑暗骑士》影评&quot;&gt;&lt;/a&gt;《蝙蝠侠: 黑暗骑士》影评&lt;/h1&gt;&lt;p&gt;这部电影我看了很多遍了,   斗胆来写写影评;   &lt;/</summary>
      
    
    
    
    <category term="影评" scheme="http://example.com/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>通信网第3章</title>
    <link href="http://example.com/2022/04/04/tong-xin-wang-di-3-zhang/"/>
    <id>http://example.com/2022/04/04/tong-xin-wang-di-3-zhang/</id>
    <published>2022-04-04T12:33:33.000Z</published>
    <updated>2022-04-04T14:47:38.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-分槽阿罗华系统"><a href="#2-分槽阿罗华系统" class="headerlink" title="2. 分槽阿罗华系统"></a>2. 分槽阿罗华系统</h1><h2 id="2-1-基本分析"><a href="#2-1-基本分析" class="headerlink" title="2.1 基本分析"></a>2.1 基本分析</h2><p>该系统与纯阿罗华系统的不同点是:   </p><p>(1) 信息包必须在一个每一个时隙开始的时候才可以发送,   一个时隙就是一个信息包长度时间;   </p><p>(2) 一个信息包能够成功发送的条件是在一个信息包长度时间内没有其他的帧发送,    或者说,   在一个时隙的开始时刻只有一个信息包发送,   再换句话说,   信息包发出的时间间隔必须是信息包时间长度P;   因为在发送一个信息包期间,   如果有新包到达,   该新包必须等待到下个时隙开始时才可以发送;   </p><p>详细分析:   </p><p>一个信息包时间长度为P(也就是发送这个包所需要的时间为P),   该信息包从t时刻开始发送,   到t+P时刻完成发送,   而另外一个新的信息包在t + Q时刻到达,   如果是纯阿罗华系统的话就直接发了就会碰撞,   而分槽阿罗华系统则会让这个新的信息包等待,   直到下一个时隙时才会发送,   如下图;   </p><p><img src="https://s2.loli.net/2022/04/04/s2QvpqtTSC4AOKy.png" width="800"></img></p><p>由little公式可得系统的平均呼叫量为<br>$$<br>a = \lambda\tau = \lambda P<br>$$<br>联合泊松公式可得一个信息包发送成功的概率为<br>$$<br>P_0 = e^{-\lambda t} = e^{-\frac{a}{p}p} = e^{-a}<br>$$<br>而失败的概率自然是<br>$$<br>1 - P_0 = 1 - e^{-a}<br>$$<br>所以一个系统的话务通过量自然是<br>$$<br>\gamma = ae^{-a}<br>$$<br>对其求导可得该函数是一个先增后减的函数,   当a = 1时有一个最大值 γ = 0.368;   所以分槽阿罗华系统的效率要比纯阿罗华系统的要高出一倍,   但是分槽强行使得系统处于一个同步的状态,   这需要消耗额外的资源,   同时也舍去了异步带来的好处;   </p><h2 id="2-2-碰撞重发的稳定性"><a href="#2-2-碰撞重发的稳定性" class="headerlink" title="2.2 碰撞重发的稳定性"></a>2.2 碰撞重发的稳定性</h2><p>条件概率P(i | k)的含义为在待重发的包数为k时,   系统增加i个包的概率,   该概率可以较清晰的描述碰撞重发的稳定性;   设下一个时隙中待重发的包数为k,   重发的概率为p,   新包到达率为b;   i的取值可分为4类:   </p><p>(1) i = -1;   在上述时隙中无新包到达,   且一个旧包发送成功(所有旧包都不发);   </p><p>(2) i = 0;   在上述时隙中,   第一种情况是无新包到达,   且有两个或两个以上的旧包发送,   产生冲突;   第二种情况是一个新包到达,   新包发送成功;   </p><p>(3) i = 1;   在上述时隙中,   到达一个新包,   有一个或一个以上的新包发送;   </p><table><thead><tr><th>解释:   新包有优待政策,   即,   到达就发送;   在分槽阿罗华系统系统中,   假设新包这个时隙到达,   那么会在下一个时隙优先发送;   所以对于上述过程,   这个时隙到达一个新包,   那么”下一个时隙”必然会发送,   而”下一个时隙”如果有任意一个旧包斗胆发送,   则”下一个时隙”发送不成功,   系统中的包数加1;</th></tr></thead></table><p>(4) i &gt;= 2;   有两个或两个以上的新包到达;   </p><ol><li><p>对于(1),   无新包到达,   表示为e<sup>-b</sup>,   且一个旧包发送成功,   也就是在k个旧包中选1个发送,   所以总共的概率为<br>$$<br>P(i/k) = e^{-b}C_k^1p(1 - p)^{k - 1},\space \space \space i = -1<br>$$<br>对于e<sup>-b</sup>的解释:   信息包到达率为λ,   t时间内有r个信息包到达的概率根据泊松公式,<br>$$<br>p_r = \frac{(λt)^r}{r!}e^{-λt}<br>$$<br>而这里到达率为b,   t = 1,   r = 0,   所以到达0个包的概率为e<sup>-b</sup>;   </p></li><li><p>对于(2),   两个或两个以上的包到达的概率为1 - P<sub>只有一个包发送</sub>,   所以总共的概率为<br>$$<br>P(i/k) =  e^{-b}C_k^1(1 - p)^{k - 1}p + be^{-b}(1 - p)^k,\space \space \space i = 0<br>$$</p></li><li><p>对于(3),   有一个或一个以上的新包发送即,   1 - P<sub>全部不发送</sub><br>$$<br>P(i/k) = be^{-b}[1 - (1-P)^k],\space \space \space i = 1<br>$$</p></li><li><p>对于(4),   有两个或两个以上的新包到达必发生碰撞,   所以一定会留在系统内,   且无关旧包发不发送;<br>$$<br>P(i/k) = \frac{b^i}{i!}e^{-b}<br>$$<br>对于分槽阿罗华系统,   当系统内的信息包过多时,   可阻碍新的信息包进入系统,   也就是令b = 0,   直到k降至某一界限值以下，才恢复接受新包;   </p></li></ol><h1 id="3-载波监听多址接入系统"><a href="#3-载波监听多址接入系统" class="headerlink" title="3. 载波监听多址接入系统"></a>3. 载波监听多址接入系统</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-分槽阿罗华系统&quot;&gt;&lt;a href=&quot;#2-分槽阿罗华系统&quot; class=&quot;headerlink&quot; title=&quot;2. 分槽阿罗华系统&quot;&gt;&lt;/a&gt;2. 分槽阿罗华系统&lt;/h1&gt;&lt;h2 id=&quot;2-1-基本分析&quot;&gt;&lt;a href=&quot;#2-1-基本分析&quot; class</summary>
      
    
    
    
    <category term="排队论" scheme="http://example.com/categories/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构019-动态规划3</title>
    <link href="http://example.com/2022/03/27/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-019-dong-tai-gui-hua-3/"/>
    <id>http://example.com/2022/03/27/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-019-dong-tai-gui-hua-3/</id>
    <published>2022-03-27T08:22:36.000Z</published>
    <updated>2022-04-05T07:55:35.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-最长回文子序列"><a href="#1-最长回文子序列" class="headerlink" title="1. 最长回文子序列"></a>1. 最长回文子序列</h1><ol><li><p>题目</p><p>给定一个字符串,   返回这个字符串的最长回文子序列长度;   举例,   “123bfg3er2un1”的最长回文子序列为”123321”,   所以返回6;   </p></li><li><p>解法1:   使用最长子序列来解决</p><p>将给定的字符串进行反转,   正常字符串和反转字符串的最长公共子序列就是最长回文字符串,   所以可以将正常字符串和反转字符串放入最长子序列函数,   直接返回即可;   </p></li><li><p>解法2:   递归</p><p>递归函数定义:   传入一个字符数组,   左边界L和右边界R,   返回这个字符数组在[L,   R]上的最长回文子序列的长度;   </p><p>如果L==R,   表示只有一个字符,   所以如果相等的话就返回1,   也就是说回文包括了str[L];   如果L == R - 1,   表示只有两个字符,   所以如果相等的话就返回2,   表示回文包括了str[L]和str[R - 1];   最后当字符数组的长度大于2时,   有四种可能,   1是str[L]不被回文所包括,   所以这种可能需要知道str[L + 1,   R]上的最长回文子序列的长度,   剩下的情况是一个包括一个不包括,   都不包括和都包括,   要注意都包括时,   需要判断str[L]和str[R]是否相等,   如果相等则该情况的结果为2 + process(L + 1,   R - 1),   不相等则结果为0;   </p></li><li><p>解法3:   动态规划</p><p>直接抄就行了,   但是需要注意的是,   进行动态规划数组填写时,   可以以列为主体,   斜着填,   也可以从右下开始往上填,   而后者似乎要快一点,   写法也更简洁;   </p><p><img src="https://s2.loli.net/2022/03/27/cDWIKpNJEfz35eG.png" width="500"></img></p><p>而进一步优化,   因为(L,   R)这个位置依赖于(L + 1,   R),   (L,   R - 1)和(L + 1,   R - 1)而(L,   R - 1)也需要依赖(L + 1,   R - 1),   并且(L,   R - 1)的值一定不小于(L + 1,   R - 1)的值,   所以对于(L,   R)位置而言,   可以直接舍去(L + 1,   R - 1)的依赖,   也就是关键步骤从</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p3;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; N; j++) &#123;</span><br><span class="line">      p3 = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">      dp[i][j] = Math.max(Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]),</span><br><span class="line">            Math.max(p3, sArr[i] == sArr[j] ? (<span class="number">2</span> + p3) : <span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p3;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; N; j++) &#123;</span><br><span class="line">      p3 = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">      dp[i][j] = Math.max(Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]),</span><br><span class="line">            sArr[i] == sArr[j] ? (<span class="number">2</span> + p3) : <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-马走日"><a href="#2-马走日" class="headerlink" title="2. 马走日"></a>2. 马走日</h1><ol><li><p>题目</p><p>在一个棋盘上,   一个马需要从某一个格子(x,   y)通过rest步跳到另外一个格子(a,   b),   问有多少种跳法;   </p></li><li><p>解法1:   递归</p><p>递归函数定义:   现在跳到(x,   y)格,   要跳到(a,   b)格,   还剩rest步,   返回总方法数;   如果越界了,   直接返回0,   如果当步数走完时,   刚好走到(a,   b)格,   则返回1,   代表找到了一种方法,   如果步数不为0,   则有8种跳法,   算好各自的格子,   进各自的递归即可;   </p></li><li><p>解法2:   动态规划</p><p>变量是x,   y和rest,   所以应该建立一个三维坐标系,   又根据观察发现每一层依赖的都是下一层的八个位置,   所以位置依赖就非常容易了;   需要注意的是,   在递归里可以进行越界判断,   而动态规划里需要写一个函数来进行越界判断;   </p></li></ol><h1 id="3-喝咖啡和洗咖啡"><a href="#3-喝咖啡和洗咖啡" class="headerlink" title="3. 喝咖啡和洗咖啡"></a>3. 喝咖啡和洗咖啡</h1><ol><li><p>题目</p><p>有一堆人在排队等几台泡咖啡的机器泡咖啡,   每台机器泡咖啡所需的时间不同,   且一次只能泡一杯,   也就是说一台机器面前只能有一个人在等待,   其他人只能排队;   每个人拿到咖啡后在无限小的时间内立刻喝完,   然后立刻进行杯子的清洗,   有两种清洗的方式,   第一种方式是等待杯子自动挥发干净,   因为是杯子自己在挥发,   所以可以有很多的杯子一起挥发,   第二种方式是把杯子放入洗杯机里清洗,   洗杯机只有一台,   且每次只能够洗一个杯子,   求从等咖啡的人开始排队到所有杯子清洗完毕的最短时间;   </p></li><li><p>解题思路</p><p>可以把本题分为两个部分,   一是最短的喝咖啡时间,   二是最短的洗咖啡杯时间;   贯穿本题解题思路的一个思想是,   本题一直是在模拟,   看似是顺序执行的流程其实是在模拟并行执行;   </p><p>最短的喝咖啡时间返回的是一个整型数组,   代表每个人喝完咖啡的时间,   模拟的过程采用小根堆;   </p></li><li><p>解法1:   递归</p><p>(1)最短喝咖啡时间:   定义泡咖啡的机器的类的两个参数,   一个是泡一杯咖啡的时间need,   一个是泡某杯咖啡的开始时间start,   使用小根堆来存储该机器类,   排序策略利用的是这两个参数加起来的和,   哪个机器当前的和比较小,   哪个机器就排前面,   一开始的开始时间肯定都是0;   从堆中弹出堆顶元素,   作为当前等咖啡的那个人的要去的咖啡机;   </p><p>(2)最短洗杯时间:   一个杯子有两种变干净的方法,   一种是自然挥发,   一种是通过洗杯机;   如果这个杯子采用洗杯机进行洗杯,   而这杯咖啡喝完的时间点比洗杯机空闲的时间点要大,   则该咖啡杯需要等到这杯咖啡喝完之后才能洗;   如果这杯咖啡喝完的时间点比洗杯机空闲的时间点要小,   则这个杯子在他里面的咖啡被喝完之后,   需要等到洗杯机空闲了才可以洗杯,   而这是开始的时间点,    还需要加上洗杯机洗杯的时间点,   才能得到洗杯机在洗完这杯后的空闲时间点,   所以洗杯机的空闲时间点selfClean为</p><p>Math.max(这杯咖啡喝完后的时间点,   洗杯机空闲的时间点) + 洗杯所需要的时间;   </p><p>而上述的是这个杯子变干净的时间点,   我还需要拿到剩余杯子也变干净所需要的最短时间点restClean,   两者取最大,   得到决策为”把这个杯子放入洗杯机使其变干净,   序号比他的大的杯子也变干净”所需要的最小时间点;   </p><table><thead><tr><th>因为如果剩余杯子洗完了,   我这个杯子还没有洗完,   那么把全部杯子变干净的时间点就是我这个杯子被洗杯机洗干净的时间点;   但是应该大多数情况都是我这个杯子洗完了而其他的杯子都没有洗完,   因为只要有一个杯子在我这个杯子之后使用洗杯机,   那我这个杯子必不可能是最后洗完的;   所以这种情况应该只是针对于剩下的杯子全用于挥发的情况;</th></tr></thead></table><p>而如果决策是让这个杯子自己挥发干净,   则不占用洗杯机,   所以喝完了就可以开始挥发,   而洗碗机空闲的时间点也没有改变,   也就是说下一个杯子可以在相同的时间点进行;   同样的拿到了在这个决策下的剩余杯子的最短时间后,   取这两者的最大值;   在最后,   选取这两者的最小值;   </p></li><li><p>解法2:   动态规划</p><p>该解法的两个变量是下标index和空闲时间free,   而最大空闲时间为所有杯子全部用来洗的时间,   但也有可能全部用来洗的时间 少于 最晚喝完的时间加上挥发时间,   但是最大空闲时间和最晚挥发时间,   所以不需要进行上述判断;   而需要注意的另外一点是,   当free逼近maxFree时,   selfClean很可能会越界,   所以需要加上下面这条判断;    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selfClean = Math.max(drink[i], j) + wash;</span><br><span class="line"><span class="keyword">if</span> (selfClean &gt; maxFree) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这条代码的意义为,   当i过于小,   而j过于大时,   也就是杯子的序号小,   但是硬要找到当这个杯子面对洗杯机空闲时间点过大时的情况,   因为这种情况不可能发生,   所以这个位置可以不填;   </p><table><thead><tr><th>其实这里有点没有想明白…</th></tr></thead></table></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-最长回文子序列&quot;&gt;&lt;a href=&quot;#1-最长回文子序列&quot; class=&quot;headerlink&quot; title=&quot;1. 最长回文子序列&quot;&gt;&lt;/a&gt;1. 最长回文子序列&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;给定一个字符串,   返回这个字符串的最长</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>任务</title>
    <link href="http://example.com/2022/03/22/ren-wu/"/>
    <id>http://example.com/2022/03/22/ren-wu/</id>
    <published>2022-03-22T06:33:06.000Z</published>
    <updated>2022-03-30T08:57:55.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><ol><li><p>通信前沿技术</p><p>一个3000字的论文,   从3月21号往后一个月,   具体要求见录音;   </p></li><li><p>科技英语</p><p>一个英文论文,   三个英文演讲;   </p></li><li><p>项目管理</p><p>对分易上的作业,   周3提交;   </p></li><li><p>通信网基础</p><p>四个大作业,   个人第五章作业,   学习通上的作业(3月30号提交)</p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通信前沿技术&lt;/p&gt;
&lt;p&gt;一个3000字的论文,   从3月21号往后一个月,   具体要求见录音;   &lt;/p&gt;
&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排队论实战第3章</title>
    <link href="http://example.com/2022/03/20/pai-dui-lun/pai-dui-lun-shi-zhan-di-3-zhang/"/>
    <id>http://example.com/2022/03/20/pai-dui-lun/pai-dui-lun-shi-zhan-di-3-zhang/</id>
    <published>2022-03-20T12:16:25.000Z</published>
    <updated>2022-03-20T13:32:01.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="排队论" scheme="http://example.com/categories/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring注解的使用</title>
    <link href="http://example.com/2022/03/19/spring/spring-zhu-jie-de-shi-yong/"/>
    <id>http://example.com/2022/03/19/spring/spring-zhu-jie-de-shi-yong/</id>
    <published>2022-03-19T01:46:07.000Z</published>
    <updated>2022-03-19T01:46:07.905Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>排队论实战第2章</title>
    <link href="http://example.com/2022/03/16/pai-dui-lun/pai-dui-lun-shi-zhan-di-2-zhang/"/>
    <id>http://example.com/2022/03/16/pai-dui-lun/pai-dui-lun-shi-zhan-di-2-zhang/</id>
    <published>2022-03-16T12:16:42.000Z</published>
    <updated>2022-03-20T12:15:09.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-排队论术语"><a href="#1-排队论术语" class="headerlink" title="1. 排队论术语"></a>1. 排队论术语</h1><p>因为排队论是一门依托于大量数学推导的学科,   所以基础的概念和术语是需要好好掌握的;   </p><p>下面的概念依托于下图</p><p><img src="https://s2.loli.net/2022/03/16/psBAjwZrMXgh3e2.png" width="400"></img></p><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><ol><li><p>平均到达速率(Average Arrival Rate)</p><p>每秒钟到达系统的请求数λ,   也就是到达速率,   比如上面这个系统的λ = 3;   </p></li><li><p>平均到达时间(Mean Interarrival Time)</p><p>每个请求到达系统的平均时间1/λ,   上面这个系统的1/λ = 1/3;   </p></li><li><p>请求的大小(Size)</p><p>一个请求被服务器处理所需的时间S,   比如某个请求需要服务器花费5秒来处理;   </p></li><li><p>平均处理时间(Mean Service Time)</p><p>服务器处理一个请求的平均时间E[S],   上面这个系统的E[S] = 1 / 4;   </p></li><li><p>平均处理速率(Average Service Rate)</p><p>服务器每秒可以处理的请求数μ,   也就是处理速率,   上面这个系统的μ = 1 / E[S] = 4;   </p></li></ol><p>然后本书还提到了一个观点,   即在本书当中,   不会提及CPU的绝对速度,   也就是CPU每秒钟转了多少转;   涉及到的CPU相关的速度都是CPU相对于解决请求的相对速度;   </p><h2 id="1-2-性能指标"><a href="#1-2-性能指标" class="headerlink" title="1.2 性能指标"></a>1.2 性能指标</h2><ol><li><p>逗留时间(Response time)</p><p>指一个请求在系统中逗留的总时间T;   </p></li><li><p>排队时间(Waiting Time or Delay)</p><p>指请求在等待队列中等待的时间T<sub>Q</sub>;   需要注意E[T] = E[T<sub>Q</sub>] + E[S];   </p></li><li><p>系统中的请求个数(Number of Jobs in the System)</p><p>包括等待着的请求和正在被服务着的请求N,   也就是在系统中的总请求数;   </p></li><li><p>队列中等待的请求</p><p>在等待队列中的请求N<sub>Q</sub>;   </p></li><li><p>设备利用率(Device Utilization)</p><p>我们对一个系统进行了长时间的观察,   设τ为总的观察时间,   设B为这段时间里系统忙时的时间,   那么设备利用率</p><center>ρ = B / τ</center></li><li><p>吞吐量(Throughput)</p><p>设C为在τ时间段内完成的工作总数,   第i个服务器的吞吐量X<sub>i</sub>为</p><center>X<sub>i</sub> = C / τ</center><p>而吞吐量和设备利用率的关系</p><p><img src="https://s2.loli.net/2022/03/17/G7UZk8JQjCsNgx3.png" width="200"></img></p><p>C为在τ时间段内完成的工作总数,   B为这段时间里系统忙时的时间,   所以C / B为在τ时间段内的完成工作的速率;   </p><p>所以吞吐量和设备利用率的关系为,   吞吐量 = 处理速率 * 设备利用率;   </p><p><img src="https://s2.loli.net/2022/03/17/OrmbXR7KZnc8ECW.png" alt="image-20220317221135126"></p><p>这里需要注意的是,   平均处理时间E[S]是指的B/C,   也就是在忙碌的时间里完成了C个请求,   那自然μ指的就是在忙时间段内的处理速率,   而吞吐量是指在总时间内完成了C个请求对应的处理速率;   </p><p>通常假设λ &lt;= μ,   而如果令ρ = λ / μ,   则需要保证ρ &lt;= 1;   这样做是为了使得系统保持稳定,   也就是避免等待队列无限长;   这里的ρ不是瞎定义的,   在第6章会对ρ = λ / μ进行证明;   此处直接使用这个结论,   可得</p><p><img src="https://s2.loli.net/2022/03/18/ocbxSFpj6TUCse9.png" width="300"></img></p><p>也就是说,   吞吐量只和顾客到达速率有关;   提高服务速率μ,   只会提高吞吐量的上限,   而不会提高实际的吞吐量,   因为对于一个稳定的系统,   输出的请求数是受到输入的请求数的限制的,   这导致经过一段很长的时间后,   输入的请求数和输出的请求数是相等的;   </p></li></ol><h2 id="1-3-开放网络"><a href="#1-3-开放网络" class="headerlink" title="1.3 开放网络"></a>1.3 开放网络</h2><p>本书提供了3种开放队列的模型;   </p><ol><li><p>概率路由模型</p><p>如下图,   这个系统里的服务器会接收到来自这个系统里的其他服务器的请求,   一个请求从服务器i出来,   再进入服务器j的可能性为p<sub>ij</sub>,   当然这个请求也可能是P<sub>i-out</sub>;   </p><p><img src="https://s2.loli.net/2022/03/17/pQ9rTPGcw8vCmDb.png" width="500"></img></p><p>也就是说,   这种模型里的请求从服务器里出来的下一步动作是概率性的,   换句话说,   请求的路由是概率性的;   </p><p>吞吐量分析:   设r<sub>i</sub>为从系统外部进入服务器i的请求的速率,   该系统的吞吐量为<br>$$<br>X = \sum_i^nr_i<br>$$<br>而服务器i的吞吐量为一个未化简的式子,   即<br>$$<br>λ_i = r_i + \sum_{j = 0}^n{λ_jP_{ji}}<br>$$<br>P<sub>ji</sub>为请求从服务器j出来再转入服务器i的概率;   </p></li><li><p>非概率路由模型</p><p>也就是所有的请求在这个系统里的路径是规划好的,   也是固定的,   就如同下面这个图;   </p><p><img src="https://s2.loli.net/2022/03/17/WBfpE4cIzx3tG5K.png" width="700"></img></p><p>请求到达CPU1,   然后在磁盘1和磁盘2的循环里转两圈再出去;   </p><p>吞吐量分析:   总吞吐量<br>$$<br>X = λ<br>$$<br>而磁盘1和磁盘2的吞吐量分别为3λ和2λ;   </p></li><li><p>有限缓存模型</p><p>队列大小是确定的,   当队列里等待的请求满了之后,   再来的请求就直接扔掉,   如下图;   </p><p><img src="https://s2.loli.net/2022/03/17/rXtsuLyfm2MCgza.png" width="400"></img></p><p>吞吐量分析:<br>$$<br>X = ρμ<br>$$<br>由于有丢包,   吞吐量X小于λ,   所以ρ不再是λ / μ;   </p></li></ol><h2 id="1-4-封闭网络"><a href="#1-4-封闭网络" class="headerlink" title="1.4 封闭网络"></a>1.4 封闭网络</h2><p>封闭网络有两种模型,   一种是交互式网络模型,   一种是批处理器模型;   </p><h3 id="1-4-1-交互式系统"><a href="#1-4-1-交互式系统" class="headerlink" title="1.4.1 交互式系统"></a>1.4.1 交互式系统</h3><p>也叫做终端驱动模型[Interactive (Terminal-Driven) Systems],   由两部分组成,   一部分是中心子网络,   一部分是用户终端,   如下图;   </p><p><img src="https://s2.loli.net/2022/03/18/W6aLz7DcAZpqnVo.png" width="400"></img></p><p>一个用户只能在他的上一个请求到达他之后,   再发送他的下一个请求;   这导致了两个结果,   一是整个系统中的请求数最多不超过用户终端数,   二是用户终端存在两个两种状态,   1种状态是等待接收中心网络发送的回复,   对应于冥想时间(think time)(中文名字又是我编的),   2是收到回复后,   做发送下一个请求的准备工作,   对应响应时间(Response time),   也就是下图中的提交状态(Submitted state);   </p><p><img src="https://s2.loli.net/2022/03/18/QEpz8V7URorkNmc.png" width="700"></img></p><p>在这种模型中,   设E[R]为平均响应时间,   E[Z]为平均冥想时间,   则请求在系统中的平均逗留时间为</p><center>E [T] = E [R] + E [Z]</center><p><strong>该系统的目的</strong>:   在响应时间尽可能低的情况下,   让尽可能多的用户同时被中心子网络服务;   </p><h3 id="1-4-1-批处理系统"><a href="#1-4-1-批处理系统" class="headerlink" title="1.4.1 批处理系统"></a>1.4.1 批处理系统</h3><p>批处理系统与交互式系统类似,   如下图,   不过他的冥想时间为0;   </p><p><img src="https://s2.loli.net/2022/03/18/3NM2TlpEAx9UqHa.png" width="400"></img></p><p>而该系统的目的为,   在运行尽可能多的请求的前提下,   寻找最大的吞吐量;   该系统的吞吐量为,   出中心网络的速率,   也就是μ:   </p><center>X = μ</center><p>这和开放网络的模型是不一样的;   </p><h1 id="N-不认识的单词"><a href="#N-不认识的单词" class="headerlink" title="N. 不认识的单词"></a>N. 不认识的单词</h1><p>completion    完成</p><p>be confused with    混淆</p><p>oscillate    [ˈɑːsɪleɪt]    使震荡,   使动摇(可接被动语态同between连用)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-排队论术语&quot;&gt;&lt;a href=&quot;#1-排队论术语&quot; class=&quot;headerlink&quot; title=&quot;1. 排队论术语&quot;&gt;&lt;/a&gt;1. 排队论术语&lt;/h1&gt;&lt;p&gt;因为排队论是一门依托于大量数学推导的学科,   所以基础的概念和术语是需要好好掌握的;   &lt;/</summary>
      
    
    
    
    <category term="排队论" scheme="http://example.com/categories/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构-动态规划2</title>
    <link href="http://example.com/2022/03/16/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-019-dong-tai-gui-hua-2/"/>
    <id>http://example.com/2022/03/16/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-019-dong-tai-gui-hua-2/</id>
    <published>2022-03-16T08:23:43.000Z</published>
    <updated>2022-03-27T14:55:15.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-背包问题"><a href="#1-背包问题" class="headerlink" title="1. 背包问题"></a>1. 背包问题</h1><ol><li><p>题目</p><p>提供两个数组weight[]和value[],   分别代表着重量和价值,   这两个数组的长度相同,   同时给定背包能装的重量bag,   要求在bag的范围内,   使得装的东西的价值最大;   </p></li><li><p>解法1—暴力递归</p><p>递归函数process1(int[] w, int[] v, int index, int bag)大致的意思是,   比较选取index位置的值和不选index位置的值,   看哪种情况的结果更大;   </p><p>终止条件是,   当index==w.length时,   代表超了下标,   这时候返回0即可;   </p><p>但是需要考虑一件事,   当即将选择要index位置的值时,   首先需要在”这层”的递归函数里判断bag - w[index]是否小于0,   如果没有判断,   那么bag - w[index]小于0了,   又被传入”下一层”的递归函数里了,   在”下一层”的递归函数里判断发现bag已经小于0了,   这时就返回0,   而在”这一层”的递归函数里,   p2就等于v[index] + 0了;   但实际当bag - w[index] &lt; 0时,   p2应该等于0,   因为bag已经装不下w[index]了;   所以要么在”下一层”递归函数里判断,   再将结果传入”这一层”,   在”这一层”进行处理,   要么在这一层进行判断和处理;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxValue</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> bag)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (w == <span class="keyword">null</span> || v == <span class="keyword">null</span> || w.length != v.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> process1(w, v, <span class="number">0</span>, bag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">process1</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> index, <span class="keyword">int</span> bag)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (bag &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (index == w.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 有货,有空间</span></span><br><span class="line">   <span class="comment">// 不要当前的货</span></span><br><span class="line">   <span class="keyword">int</span> p1 = process1(w, v, index + <span class="number">1</span>, bag);</span><br><span class="line">   <span class="comment">// 要当前的货</span></span><br><span class="line">   <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> next = process1(w, v, index + <span class="number">1</span>, bag - w[index]);</span><br><span class="line">   <span class="keyword">if</span> (next != -<span class="number">1</span>) &#123;</span><br><span class="line">      p2 = v[index] + next;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> Math.max(p1, p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2—高级动态规划</p><p>递归函数的形参列表只有两个变量,   index和剩余重量bag,   他们的取值范围分别为</p><p>[0,   w.length],   [0,   bag],   所以dp的规模为(w.length + 1) * (bag + 1),   根据终止条件,   当index = w.length时,   值为0,   而对于其他的位置的值,   都是依赖于他的下一行的两个元素的值,   所以需要从下往上一行一行地填写数组的值,   而非特殊位置(i,   j)依赖于(i + 1,   j)和(i + 1,   j - w[i])两个位置的值;   当然这里也需要判断,   当选择要这个值的时候,   剩余的bag会不会装不下w[i],   其实也就是判断j - w[i] ?&lt; 0,   如果小于0,   直接可以返回(i + 1,   j)的值, 如果不小于0,   才需要判断谁大;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//method 2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp1</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> bag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (w == <span class="keyword">null</span> || v == <span class="keyword">null</span> || w.length != v.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> N = w.length;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][bag + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = dp.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j - w[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>][bag];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-数字转字符的可能性统计"><a href="#2-数字转字符的可能性统计" class="headerlink" title="2. 数字转字符的可能性统计"></a>2. 数字转字符的可能性统计</h1><ol><li><p>题目描述</p><p>1~26分别对应A～Z,   给定一个数字字符串,   问组成多少种字符字符串;   举例: “111”可以组成”AAA”，”KA”和”AK”;</p></li><li><p>解法1:   暴力递归</p><p>递归函数:   递归函数的含义为，我只关心[i,   length - 1]这个区间上的可能性，也就是只返回这个区间上的可能的尝试数，其他的我可不管;   传入两个形参，char[] arr代表那个字符串，int i代表当前正在被操作的数;   终止条件为:   当i == arr.length时,   返回1,   因为这时已经走完一种可能了;   由于0没有对应的字符,   所以0不能单独作为某种尝试的开头数(这句话的意思是,   如果字符串为”1105”,   当遍历到i=2时,   不可以把它当作一个独立的字符,   所以之前的决策有问题,   如果碰上这种情况,   直接返回0;   如果不是0,   则有两种情况,   一是把i位置的数字单独进行转换,   二是在i+1没有越界,   并且i和i+1组成的数字没有超过26的情况下,   可以把i和i+1组成的二位数当作一个数字来转换;   最终的可能性是两种情况的可能性加起来的总和;   </p><p>这时有另外一个问题,怎样算出把i位置的数字单独进行转换的可能性呢?    由于递归函数的含义就是返回[i,   length - 1]这个区间上的可能性,   所以把i位置的数字单独进行转换的可能性就是[i+1,   length - 1]这个区间上的可能性;   这似乎是一个相互迁就的过程,   从逻辑上来说,   我们从左到右列出所有的可能性,   但是,   只有i到达了末尾时,   才可以统计出1次可行的可能性,   所以这种思路是从最右边开始往左推,   在最左边的到结果; </p><p>再换句话说，递归函数的含义是,   我拿到了两种情况的可能性,   然后我判断在我这个位置,   这种可能性是否可以往左传递，如下图;   </p><p><img src="https://s2.loli.net/2022/03/19/vBHjyWEaol7Dct2.png" width="70%"></img></p></li><li><p>解法2:   动态规划</p><p>因为这是一个一维数组,   所以动态规划的改写也十分容易,   只需要抄暴力递归的代码就可以了;   </p></li></ol><h1 id="3-贴纸拼词"><a href="#3-贴纸拼词" class="headerlink" title="3. 贴纸拼词"></a>3. 贴纸拼词</h1><ol><li><p>题目</p><p>给定一个目标字符串target,   再给定一些写着字母的卡片,   每种类型的卡片都用不完,   把这些卡片剪成包含一个或者几个字母的碎片,   拿着这些碎片尝试拼凑出目标字符串,   问最少的卡片数是多少,   如果任务不可能,   就返回-1;   举例,   目标字符串为”aabbcc”,   写着字母的卡片有”ab”,   “bbc”,   “ac”,   拼凑的方法有很多,   比如,   拿两张”ac”,   剪下其中的”a”作为目标字符串的”aa”,   拿两张”bbc”,   剪下其中的一个”bb”和两个”c”,   即可拼凑出”aabbcc”;   </p></li><li><p>解法1:   暴力递归</p><p>递归函数的含义:   对于给定的目标字符串,   我需要返回完成目标字符串(比如”aabbcc”)的拼写的最少卡片数,   但是,   在我这个递归函数中很有可能没有现成的卡片能够直接完成目标字符串的拼写,   所以,   我完成目标字符串的一部分的拼写,   再把剩余的,   我没有完成的子目标字符串(比如”bbcc”)交给下一个递归函数,   让他告诉我,   他完成那一部分字符串的拼写所需的最小卡片数,   然后我再比较,   看拿哪张卡片去完成目标字符串(“aabbcc”)所需要的卡片数最少,   将这个最少的卡片数加1并返回;   </p><p>这里需要注意两点:   第一,   有可能我手下的全部递归函数都告诉我,   老大,   您给的那个字符串,   小的们完不成啊;   如果是这样,   则我也会向上级汇报,   该任务完不成,   也就是这个分支得不出结果,   递归函数之间的通信靠的是返回值,   在该题里也就是最少卡片数,   所以如果出现这种情况,   只需要把最少卡片数定为整数最大值,   然后返回即可;   第二,   递归函数的终止条件为,   当传入的目标字符串的长度为空,   则返回0,   意思是完成这个字符串的拼写仅需0张卡片;   </p><p><img src="https://s2.loli.net/2022/03/20/9hSpsdDcrnGxt4V.png" width="70%"></img></p><p>递归函数实现:   首先,   终止条件为,   当传入的目标字符串为0时,   返回0;   设递归函数的初始最少卡片数为正无穷,   不断地拿手头的卡片做尝试,   也就是用一个for循环,   把目标字符串和正在尝试的字符不断地扔到一个函数minus( )里去,   看看能不能把目标字符串搞成一个更短的字符串,   如果可以,   则把那个更短的字符串再扔到”下一层递归函数”里,   让他去解决那个更短的字符串,   得到”下一层递归函数”解决更短字符串的最少卡片数,   循环比较,   得出所有”下一层递归函数”返回的最少卡片数的最小值;   最后将这个最小值加1,   也就是加这一层的那张卡片,   把最后的值返回;   如果出那个for循环时,   最小卡片数仍为正无穷,   则返回正无穷,   代表这一条路走不通;   </p><p>函数minus( )的实现:   传入两个字符串,   一个是目标字符串target,   一个是递归函数正在尝试的卡片sticker;   定义一个大小为26的整型数组,   用于存储每一个字母对应的个数,   首先遍历target,   让target里的字母对应的数字都加1,   然后遍历sticker,   让他里面有的字母对应的数字都减1;   最后通过这个数组创建一个新的字符串,   表示target里有,   而sticker里没有的字母,   最后返回即可;   因为最后的粘贴过程涉及到多次的字符串和字母的合并,   所以最好用StringBuilder的append方法,   最后的最后,   把那个StringBuilder用toString转为字符串,   返回即可;   </p><table><thead><tr><th>然而这种方法在leetcode上通不过~</th></tr></thead></table></li><li><p>解法2:   动态规划</p><p>第一个优化是把卡片用一个二维数组(int [] [26])代替,   直接传入每个递归函数,   在每个递归函数里对传入的目标字符串进行同样的操作,   在后面进行字符串比较时可以直接用整型数组来操作;   另外一个优化比较抽象,   采用的是贪心的剪枝:   某一层的递归函数对照着传给他的目标字符串选出的最短路径中,   肯定最少有一张卡片包含有目标字符串的第一个字母,   这张卡片可能在这条路径的第3位,   但是这和另外一条把这张卡片放在第1位的最短路径,   功效是一样的,   所以可以对其进行剪枝,   只选择<strong>把包含目标字符串第一个字母的卡片作为第一张卡片</strong>这样的枝;   最后一个优化是动态规划的基本优化,   也就是傻缓存,   由于字符串的特殊性,   没法明确字符串的具体范围,   所以没法对其进行位置依赖分析,   所以对该题的动态规划优化只停留在傻缓存这一步;   </p><table><thead><tr><th>这里不得不说一句,   虽然傻缓存听起来是个贬义词,   但起码比没有好;   从数据看来,   傻缓存在leetCode上运行大概花费350ms<del>430ms;   而缓存和字符表两个优化加起来可以达到250ms</del>300ms;   而剪枝+字符表居然不能通过;   剪枝+缓存大概也是350ms<del>430ms;   但是为啥 剪枝+字符表+缓存 就能达到14ms</del>20ms…很奇怪;</th></tr></thead></table></li></ol><h1 id="4-最长公共子序列"><a href="#4-最长公共子序列" class="headerlink" title="4. 最长公共子序列"></a>4. 最长公共子序列</h1><ol><li><p>题目</p><p>给定两个字符串,   返回这两个字符串的最长字符字串长度;   举例,   字符串为”ab45cg56”和”412tx5z5m6”,   最长字符字串为4556,   则返回4;   (子序列是可以不连续的,   而字串是一定要连续的!)</p></li><li><p>解法1:   递归</p><p>递归函数process(char[] text1, char[] text2, int i, int j)定义:   返回text1[0,   i]和text2[0,   j]上的最长公共子序列的长度;   如果i == 0并且j == 0,   表示两个字符串都只有一个元素,   这时如果他们相等就返回1,   否则返回0;   如果i == 0并且j != 0,   则我这个递归函数最多返回1,   所以我的工作很简单,   如果text1[i] 和text2[j]不相等,   则我需要拿着text1[i]这个元素去寻找text2的下一个元素,   也就是text2[j - 1],   其实也就是让下一层的递归函数去找,   找到的话我就返回1,   没找到就返回0;   如果i != 0并且j == 0,   处理方式类似于上述操作;   如果i != 0并且 j != 0,   则有三种情况:   第一种,   不考虑元素text1[i],   也就是认为text1[0, i - 1]和text2[0, j]上的最大公共子序列就是text1[0, i]和text2[0, j]上的最大公共子序列,   这种情况需要调用p(i - 1,   j);   第二种是不考虑位置text2[j],   操作同上;   第三种是既考虑text1[i]又考虑text2[j],   这种情况,   如果text1[i]和text2[j]相等,   则返回1 + p(i - 1,   j - 1),   不相等就返回0;   </p><table><thead><tr><th>本题为样本对应模型,   也就是给两个字符串或者是数组,   叫干啥啥啥事;   左程云建议样本对应模型以结尾的元素作为处理对象来考虑;   也就是上述的那几种情况;   当i != 0并且j != 0时,   产生的三种情况的依据是,   text1[0,   i]和text2[0,   j]的最长公共子序列是否以i结尾,   或者是否以j结尾,   或者是否以i和j结尾;</th></tr></thead></table></li></ol><p>再分析一波,   text1[0…i]和text2[0…j]上的最长公共子序列相对于两个结尾字符来说,   有四种情况:   </p><p>1)最长公共子序列一定以text1[i]和text2[j]结尾;   </p><p>2)最长公共子序列可能以text1[i]结尾,   一定不以text2[j]结尾;   </p><p>3)最长公共子序列一定不以text1[i]结尾,   可能以text2[j]结尾;   </p><p>4)最长公共子序列一定不以text1[i]和text2[j]结尾;   </p><p>除此之外,   别无其他的可能性,   所以就可以用这样的分类去建立递归函数;   那首先肯定得考虑各种特殊条件,   比如当i或者j为0时,   我这个递归函数最多最多返回1;   而当i和j都不为零时,   就需要考虑上述的4种情况了,   如果最长公共子序列一定以text1[i]和text2[j]结尾,   则他俩必须相等,   如果相等,   则我这个递归函数就知道,   最长公共子序列必有text1[i]和text2[j],   并且必以他们俩结尾,   如果不等,   则结果为零;   第2种情况是,   如果最长公共子序列一定不以text2[j]结尾,   则我这个递归函数只需要考虑text1[0…i]和text2[0…j - 1]上的最长公共子序列,   第3种情况也是一样的;   而第4种情况,   一定不以他俩结尾,   则最长公共子序列考虑text1[0…i - 1]和text2[0…j - 1],   实际上第4种情况的返回值一定小于上面两种,   所以可以忽略;   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-背包问题&quot;&gt;&lt;a href=&quot;#1-背包问题&quot; class=&quot;headerlink&quot; title=&quot;1. 背包问题&quot;&gt;&lt;/a&gt;1. 背包问题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;提供两个数组weight[]和value[],   分别代表着重量</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringIoC容器的xml配置使用</title>
    <link href="http://example.com/2022/03/12/spring/springioc-rong-qi-de-xml-pei-zhi-shi-yong/"/>
    <id>http://example.com/2022/03/12/spring/springioc-rong-qi-de-xml-pei-zhi-shi-yong/</id>
    <published>2022-03-12T11:30:50.000Z</published>
    <updated>2022-03-19T11:39:31.875Z</updated>
    
    <content type="html"><![CDATA[<p>@org.Aegis</p><h1 id="1-工厂方法的使用"><a href="#1-工厂方法的使用" class="headerlink" title="1. 工厂方法的使用"></a>1. 工厂方法的使用</h1><p>创建一个类PersonFactory,   在这个类里写一个方法,   该方法创建一个Person的子类Son并返回;   在配置文件里将PersonFactory注入,   然后创建person的Bean,   在Bean里需要指定额外的两个参数,   factory-bean指的是工厂方法的Bean,   factory-method指的是工厂方法Bean对应的创建对象的那个方法;   </p><p>要注意的是,   由于创建的是Person的Bean,   所以createPersonMethod的返回值只能是Person;   </p><h1 id="2-自动注入"><a href="#2-自动注入" class="headerlink" title="2. 自动注入"></a>2. 自动注入</h1><ol><li><p>byType</p><p>根据类型去自动匹配,   有多个相同的类型就会报错;   </p></li><li><p>byName          @test07</p><p>根据类的名称去匹配,   这里的名称是类中的setter方法的成员变量名;   </p></li><li><p>constructor    @test08</p><p>根据构造器去匹配,   首先会根据构造函数的形参名称去匹配,   如果匹配不上,   则会根据类型去匹配,   如果存在多个相同类型,   不会像byType那样报错,   而是不会注入成功;   需要注意,   形参列表中的参数在配置文件中必须都有对应的Bean,   才可以完成注入;   </p></li><li><p>当存在多个相同类型的Bean,   可以通过设置主要的Bean的primary为true的方式,   或者其他次要的Bean的autowire-candidate为false的放弃自动注入的权限,   来配置主要的那个Bean; </p></li></ol><h1 id="3-Bean生命周期回调"><a href="#3-Bean生命周期回调" class="headerlink" title="3. Bean生命周期回调"></a>3. Bean生命周期回调</h1><p>@test09</p><ol><li><p>通过实现接口的方式进行回调</p><p>实现InitializingBean和DisposableBean两个接口,   重写他们的方法即可;   需要注意的是,   要将ioc关闭之后才可以看见afterPropertiesSet()的调用;   </p></li><li><p>通过Bean标签中的关键字来回调</p><p>在配置文件中的Bean里面通过init-method和destory-method来指定类里的两个方法,   实现回调;   </p></li></ol><h1 id="4-配置第三方Bean"><a href="#4-配置第三方Bean" class="headerlink" title="4. 配置第三方Bean"></a>4. 配置第三方Bean</h1><p>@test10</p><p>导入阿里的德鲁伊包,   在Bean里配置他的四个属性,   属性的值可以通过.properties文件来设置,   而该文件需要使用placeholder引用进配置文件;   这里的.properties是db.properties;   </p><h1 id="5-spEL表达式"><a href="#5-spEL表达式" class="headerlink" title="5. spEL表达式"></a>5. spEL表达式</h1><p>@test11</p><p>(Spring Expression Language)</p><p>有几种基本的使用:   运算表达式,   引用外部Bean,   引用外部Bean的方法,   引用静态方法;   具体做法是在value的引号中填写#{引用的内容},   其中需要注意的是静态方法花括号里应该填写</p><center>T(路径名.类名).静态方法名称</center><p>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@org.Aegis&lt;/p&gt;
&lt;h1 id=&quot;1-工厂方法的使用&quot;&gt;&lt;a href=&quot;#1-工厂方法的使用&quot; class=&quot;headerlink&quot; title=&quot;1. 工厂方法的使用&quot;&gt;&lt;/a&gt;1. 工厂方法的使用&lt;/h1&gt;&lt;p&gt;创建一个类PersonFactory,   </summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Chapter1</title>
    <link href="http://example.com/2022/03/12/pai-dui-lun/qian-yan/"/>
    <id>http://example.com/2022/03/12/pai-dui-lun/qian-yan/</id>
    <published>2022-03-12T06:58:33.000Z</published>
    <updated>2022-03-18T13:00:46.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h1><p>第一部分介绍排队论的基本术语,   模型和性能指标;   第二部分为概率复习,   包括…很多东西;   第三部分介绍一些适用于优秀排队系统的简单法则;   第四部分介绍马尔科夫链在计算机系统分析中的应用;   第五部分扩展了马尔可夫理论,   允许分析更复杂的网络;   第六部分介绍了使用高变异性分布取代指数分布的技术;   第七部分介绍调度;   </p><h1 id="鄙人之盛赞"><a href="#鄙人之盛赞" class="headerlink" title="鄙人之盛赞"></a>鄙人之盛赞</h1><p>本书采用了一问一答式的教学风格,   本人觉得这种风格应用在课堂上时,   提问的难度需要把握好,   而在写书时,   则不需要太过于拘泥于此,   因为在书中这种方式被用来作为一种基础知识的传递,   而其他的目的次之;   </p><h1 id="不认识的单词"><a href="#不认识的单词" class="headerlink" title="不认识的单词"></a>不认识的单词</h1><p>computer- ‘oriented    面向计算机的</p><p>还有很多…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本书结构&quot;&gt;&lt;a href=&quot;#本书结构&quot; class=&quot;headerlink&quot; title=&quot;本书结构&quot;&gt;&lt;/a&gt;本书结构&lt;/h1&gt;&lt;p&gt;第一部分介绍排队论的基本术语,   模型和性能指标;   第二部分为概率复习,   包括…很多东西;   第三部分介绍一些适</summary>
      
    
    
    
    <category term="排队论" scheme="http://example.com/categories/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>排队论实战第1章</title>
    <link href="http://example.com/2022/03/12/pai-dui-lun/pai-dui-lun-shi-zhan-di-1-zhang/"/>
    <id>http://example.com/2022/03/12/pai-dui-lun/pai-dui-lun-shi-zhan-di-1-zhang/</id>
    <published>2022-03-12T06:58:33.000Z</published>
    <updated>2022-03-16T14:12:24.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-排队论示例"><a href="#1-排队论示例" class="headerlink" title="1. 排队论示例"></a>1. 排队论示例</h1><ol><li><p>基本模型</p><p>有一个系统,   该系统由一个接收请求的队列和一个处理请求的服务器组成,   而请求们每秒钟到达λ个,   服务器每秒处理µ个请求,   平均响应时间为</p><center>E[T] = 1 / µ</center><p><img src="https://s2.loli.net/2022/03/13/W9rLScF5l3kINvO.png" width="600"></img></p></li><li><p>例子1</p><p>一个封闭的模型,   系统内部总是有N个请求,   每个请求必须通过服务模块,   并且在队列前面的分叉处会有一种负载均衡的机制,   负责将请求对半地分配到两个服务器的队列中,   如下图;   </p><p><img src="https://s2.loli.net/2022/03/13/hKneRaL6fFopjq9.png" width="400"></img></p><p>对于这个系统,   有几个基本的观点:   </p><p>(1)如果把服务器1的服务速率升一倍,   即µ = 2 / 3,   整个系统的平均响应时间不会改变;   </p><p>(2)在(1)的基础上,   提高N,   也不会有太大变化;   </p><p>(3)在(1)的基础上,   如果N = 1,   则平均响应时间的确会降低;   </p><p>(4)如果系统变为开放的,   即不再秉持着N个请求,   如下图,   此时再加入(1)的条件,   则平均响应时间会降低;   </p><p><img src="https://s2.loli.net/2022/03/13/SoHVk2L9IFxt8Qw.png" width="400"></img></p><p>可抢占式(preemptible):   不可抢占式为一个请求必须在一台服务器中完成,   而可抢占式为一个请求可以被中止,   并在其他服务器上继续进行;   </p></li><li><p>例子2</p><p>一个拥有高速CPU的服务器和一群拥有低速CPU的服务器之间选谁比较好:   如果工作负载的可变化性很大,   则可以选择低速群服务器,   因为不希望一个小请求排在一个大请求后面,   这样小请求就会被卡住;   </p><p>而如果请求是可抢占式的,   则最好采用单一高速服务器;   这很好理解,   因为大请求中断时就可以去处理小请求;   </p></li><li><p>例子3</p><p>所有的主机与一个负载均衡的机器相连,   如下图</p><p><img src="https://s2.loli.net/2022/03/14/mSoq9rFJItdhaUy.png" width="600"></img></p><p>这种负载均衡器通常被放置在一个系统的前端;   现在提供一些条件:   主机和请求的特异性,   同时,   主机遵循先到达先服务策略(FCFS),   并且请求是不可抢占式的;   有很多的负载均衡策略可以工作在这样的条件之上:   </p><p>(1)随机策略</p><p>像抛硬币那样完全平等;   </p><p>(2)除法散列策略</p><p>这名字我编的,   从算法导论里面偷来的,   也就是给请求和主机编号,   拿请求们的编号对主机数量进行取模,   得到一个在[0,   主机数 - 1]上的索引值,   然后就把这个请求扔给索引值对应的那个主机处理;   其实就是Nginx里面最简单的ip_hash策略;   </p><p>(3)SITA策略</p><p>小请求到第一台主机,   中请求到第二台,   大请求到第三台,   循环往复;   </p><p>(4)LWL策略</p><p>把请求扔给此时剩余工作数最少的主机;   剩余工作数是通过一系列杂七杂八的指标算出来的;   </p><p>(5)Shortest-Queue策略</p><p>把请求扔给含有最少请求数的主机;   </p><p>在前面提到的那个条件的基础之上,   LWL是最好的策略;   而如果服务器是进程共享的(或者说是异步的),   同时请求也可抢占的话,   Shortest-Queue策略可能是最好的;   </p></li><li><p>然后介绍了几种调度策略,   然后介绍了一下哪个是最好哒哪个是最坏哒,   懒得管了;   </p></li><li><p>最后提了一些开放性的问题;   </p></li></ol><h1 id="N-不认识的单词"><a href="#N-不认识的单词" class="headerlink" title="N. 不认识的单词"></a>N. 不认识的单词</h1><p>mean delay    平均延迟</p><p>agreement    协议</p><p>be utilized    被使用</p><p>stochastic    [stə’kæstɪk]  随机的</p><p>Exponentially distribution    指数分布</p><p>dependency    依赖</p><p> emphasis    重点,   强调</p><p>integrate    整合</p><p>i.e.    换句话说</p><p>a.k.a    也被称为</p><p>preemptible    可抢占的</p><p>Given …(that)    考虑到,   鉴于</p><p>metric    指标</p><p>variance    方差</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-排队论示例&quot;&gt;&lt;a href=&quot;#1-排队论示例&quot; class=&quot;headerlink&quot; title=&quot;1. 排队论示例&quot;&gt;&lt;/a&gt;1. 排队论示例&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基本模型&lt;/p&gt;
&lt;p&gt;有一个系统,   该系统由一个接收请求的队列和一个处理</summary>
      
    
    
    
    <category term="排队论" scheme="http://example.com/categories/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/12/readyou/"/>
    <id>http://example.com/2022/03/12/readyou/</id>
    <published>2022-03-12T06:55:52.493Z</published>
    <updated>2022-03-12T06:55:52.493Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter3</title>
    <link href="http://example.com/2022/03/08/csapp/csapp-chapter3/"/>
    <id>http://example.com/2022/03/08/csapp/csapp-chapter3/</id>
    <published>2022-03-08T12:09:50.000Z</published>
    <updated>2022-03-19T01:12:22.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-程序编码"><a href="#1-程序编码" class="headerlink" title="1. 程序编码"></a>1. 程序编码</h1><p>本小结基于C语言到可执行文件的变化过程,   稍微深入地讲解了各个过程;   </p><ol><li><p>首先涉及Linux的一个指令</p><center>linux> gcc -Og -o p p1.c p2.c</center><p>p1.c和p2.c是要编译的文件,   -Og是一种优化策略,   .i文件被编译器编译为汇编代码时,   可以选择不同的汇编代码实现,   -O1和-O2这两种优化策略的目的是为了提高汇编代码的效率,   但这降低了汇编代码的可读性,   而-Og遵循了C源程序的整体结构,   易于阅读;   -O p是指生成的可执行文件的名字为p;   然后讲了一些基本的汇编知识,   或者说是基本常识;   </p></li><li><p>再涉及另外一个命令</p><center>linux> gcc -Og -S mstore.c</center><p>意思是在把mstore.c编译并生成mstore.s后就停下;   </p></li><li><p>最后反编译了一个C源文件和一个可执行二进制文件,   分析了一下他们有什么不同;   第一个不同在第四行,   源反汇编结果显示的是还运行到这一行代码,   所以显示的是函数名multstore加上一个偏移量,   而二反汇编的第四行是直接显示mult2的地址,   意思就是该地址已经被计算出来了;   第二个不同就是地址的不同,   二反汇编的代码表示链接器将这个程序加载到了内存里;   第三个不同在二反汇编的第8~9行,   比源反汇编多出了两个nop,   起主要作用是进行内存填充,   可能和缓存行有关,   因为CPU读取主存中的数据时的单位是缓存行,   进行16字节对齐,   可以避免CPU在读取下一个缓存行,   也就是另外的程序时,   不需要再次读取本缓存行;   </p><p><img src="https://s2.loli.net/2022/03/10/tmAaRYZjld7qFhr.png" width="800"></img></p><p><img src="https://s2.loli.net/2022/03/10/xJAonHZ9PEuSKTW.png" width="800"></img></p></li></ol><h1 id="2-数据格式"><a href="#2-数据格式" class="headerlink" title="2. 数据格式"></a>2. 数据格式</h1><p>Intel使用1”字”表示16比特,   汇编的操作符后面会有一个表示操作数大小的符号后缀,   注意整型和双精度使用的是同一个字母—L,   不会产生歧义的原因是,   浮点数拥有一套不同的指令,   使用的寄存器也和整型不同;   </p><h1 id="3-访问数据"><a href="#3-访问数据" class="headerlink" title="3. 访问数据"></a>3. 访问数据</h1><p>本小节介绍了寄存器的简单使用,   其中%rsp用于指定运行时栈的结束位置;   而其他的寄存器的使用规则则相对比较灵活;   </p><p>操作数,   也就是操作提示符后面的那个东西,   他有3种格式,   分别是立即数,   寄存器和内存;   立即数用$x的形式来表示,   他的值是x;   寄存器用r<sub>a</sub>来表示,   他的值是r<sub>a</sub>里面存储的值,   内存的表示方式有很多种,   其中最复杂的由4个部分组成—Imm(r<sub>b </sub> ,  r<sub>i</sub> ,  s),   分别是立即偏移量,   基址寄存器,   索引寄存器和比例因子,   计算出的地址为</p><center>Imm + R[r<sub>b </sub>] + R[r<sub>i</sub>] * s</center><p>而其他的内存表示方式只是这种表示方式的变种;   M{ Imm + R[r<sub>b </sub>] + R[r<sub>i</sub>] * s }表示取得那个地址的值;   </p><h2 id="3-2数据移动指令mov"><a href="#3-2数据移动指令mov" class="headerlink" title="3.2数据移动指令mov"></a>3.2数据移动指令mov</h2><p>移动指令的最常见的写法就是在mov后面添加操作数的大小,   这需要和寄存器的大小对应起来;   具体而言,   虽然x86的寄存器是64位的,   但可以用位数较低的寄存器名称去表示这些寄存器的低位部分,   比如如下代码;   另外需要注意一点,   把立即数放入寄存器中的时候,   b,   w和q都是直接赋值,   而L不一样,   因为x86规定,   往寄存器中传入32bit数据时,   需要将该寄存器的高32bit设置为0,   比如如下代码的第4行;   而L代表long = 2word = 32bit;   </p><p>mov操作的源操作数和目的操作数都可以是寄存器或者内存,   但是不允许同时为内存,   如果硬要把数据从一块内存复制到另一块内存,   需要先复制到寄存器,   再复制到另一块内存;   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movabsq $0x0011223344556677, %rax ;%rax = 0011223344556677 </span><br><span class="line">movb $-1, %al ;%rax = 00112233445566FF </span><br><span class="line">movw $-1, %ax ;%rax = 001122334455FFFF </span><br><span class="line">movl $-1, %eax ;%rax = 00000000FFFFFFFF </span><br><span class="line">movq $-1, %rax ;%rax = FFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure><p>而mov有两种变种,   分别是movz和movs,   用于零扩展和符号位扩展,   与mov不同的是,   这两个指令需要指明源操作数和和目标操作数的大小,   而movz操作并没有提供32位扩展为64位的指令,   也就是movzlq,   因为他可以被movl加上上面所说的movl的性质代替;   相应地,   movs也为32位扩展为64位提供了特殊的指令,   cltq,   该指令没有操作数,   他总是以eax为源操作数,   rax为目的操作数进行符号位扩展;   </p><h2 id="3-3-压栈和弹栈"><a href="#3-3-压栈和弹栈" class="headerlink" title="3.3 压栈和弹栈"></a>3.3 压栈和弹栈</h2><p>压栈和弹栈属于数据移动指令;   压栈和弹栈都是针对于%rsp这个寄存器而言的,   %rsp为栈顶指针,   压栈操作</p><center>pushq %rax</center><p>的意思是</p><center>sub $8,  %rsp<br>movq %rax,  (%rsp)</br></center><p>也就是将栈顶指针往上移动让其指向的地址值变小,   空出8个字节出来,   将%rax的值放入空出来的空间里,   就完成了压栈操作;   而弹栈就是将栈顶元素弹出后,   用指令pop后面的寄存器接收一下,   然后把%rsp的地址值增大8字节,   也就是向下移动8个单位,   留在内存里的%rax的值只需要等待被下一个pushq覆盖即可;   </p><h2 id="3-4-算术和逻辑运算"><a href="#3-4-算术和逻辑运算" class="headerlink" title="3.4 算术和逻辑运算"></a>3.4 算术和逻辑运算</h2><p><img src="https://s2.loli.net/2022/03/14/4n1xGE8ItVszvjg.png" width="600"></img></p><ol><li><p>lea(load effective address)</p><p>leaq其实是movq的一个变种,   他的格式如下,   </p><center>leaq (%rdx) %rax</center><p>意思是将%rdx的值扔到%rax里,   源操作数看上去是地址解引用,   但其实并没有,   他只是一个取地址的操作;   正因如此,   leaq可以进行简单的运算,   比如,   </p><center>leaq 6(%rax),   %rdx  等于  movq 6 + %rax,   %rdx</center></li><li><p>一元运算</p><p>只有一个操作数的运算,   也就是说他的源操作数和目的操作数都是运算符后面的那个东西,   要么是寄存器,   要么是内存地址;   而最后的结果也存于那个东西里;   </p><p>而这里又有取反和取补,   复习一下他们俩,   取补的意思是啥也不管直接全部位反转,   取反的意思是拿到一个有符号数字对应的负数,   他们的关系是</p><center>-x = ~x + 1</center></li><li><p>二元运算之加减乘除</p><p>有两个操作数的运算,   运算结果被放在目的操作数里;   注意两个操作数不能同时为内存地址,   这和mov是一样的;   </p></li><li><p>二元运算之移位</p><p>两个左移符号的功能是一样的;   而右移的两个符号一个是算术右移,   一个是逻辑右移;   移动的位数取决于一个特定的寄存器%cl,   由于他是8位的寄存器,   所以可以表示的移动位数为255;   </p></li></ol><p>之后介绍了一些特殊的运算符,   这里不做过多解释了;   </p><p>以上分析的都是线性代码,   C语言中还存在一些循环和选择分支,   他们并不是按照线性执行的;   </p><h1 id="4-控制"><a href="#4-控制" class="headerlink" title="4. 控制"></a>4. 控制</h1><h2 id="4-1-条件代码"><a href="#4-1-条件代码" class="headerlink" title="4.1 条件代码"></a>4.1 条件代码</h2><p>除了上述的整型寄存器,   CPU还维系着一些状态码寄存器,   用于存储运算过程中的进位和溢出等操作;   </p><p>(1)CF(Carry Flag):   判断最近一次无符号数操作是否溢出;   </p><p>(2)ZF(Zero Flag):     判断最近一次操作是否产生0;   </p><p>(3)SF(Sign Flag):     判断最近一次操作是否产生负数;   </p><p>(4)OF(OverFlow Flag):   判断最近一次有符号数是否产生溢出,   包括向上溢出和向下溢出;   </p><p>3.4所示的图中,   leap不会对状态寄存器进行操作,   而剩下所有的操作都会改变状态寄存器,   自加和自减不会改变CF…</p><p>另外,   还有两类只会改变状态寄存器,   而<strong>不会更新目的寄存器</strong>:   cmp和test;   他们都有1,   2,   4,   8字节的模式,   这和前面的寄存器是一样的,   cmp和sub操作是一样的,   test和and操作是一样的;  </p><table><thead><tr><th>执行顺序取决于测试的结果,   这其实说的是后面关于循环的内容,   一个while循环,   可以用类似于C语言中的goto的汇编的方式实现,   也就是先判断,   依据判断的结果来选择需要跳到哪句代码;   而测试来自于if()括号中的元素,   他被命名为test;</th></tr></thead></table><h2 id="4-2-使用条件代码"><a href="#4-2-使用条件代码" class="headerlink" title="4.2 使用条件代码"></a>4.2 使用条件代码</h2><p>条件代码可以实现数据的比较,   具体做法是,   先通过cmp对两个数进行比较,   cmp会对状态码寄存器进行更新,   通过这些寄存器的简单组合和运算后,   就可以表示出两个数的大小;   x86提供了set指令,   用于对他的操作数进行更新,   </p><p><img src="https://s2.loli.net/2022/03/16/4RayN8sEXzkbVYK.png" width="600"></img></p><p>也就是说,   先比较(cmp),   再计算(set),   再存储(set %al),   再返回(ret);   这样就可以完成判断;   </p><p>比如说判断a&lt;b,   通过如下的推导,   可以得出这个表达式的状态寄存器的表示方式,   推导过程如下图;   </p><p><img src="https://s2.loli.net/2022/03/16/aLziPgW1rEAtjIX.png" width="800"></img></p><h2 id="4-3-跳跃指令"><a href="#4-3-跳跃指令" class="headerlink" title="4.3 跳跃指令"></a>4.3 跳跃指令</h2><p>跳跃指令分为条件跳跃和非条件跳跃,   非条件跳跃有两种,   直接跳跃和间接跳跃;   </p><p>直接跳跃    jmp  *%rax    直接把%rax的值作为目标指令的地址;   </p><p>间接跳跃    jmp *(%rax)  把%rax的值作为地址,   去读取这个地址对应的值,   把那个值作为目标指令的地址;   </p><p>而条件跳跃只能是直接的;   </p><h2 id="4-4-跳跃指令编码"><a href="#4-4-跳跃指令编码" class="headerlink" title="4.4 跳跃指令编码"></a>4.4 跳跃指令编码</h2><p>采用最多的跳跃指令编码的方式是”rip相关法”(PC-relative),   中文名字我乱编的;   </p><p>对下面的程序进行分析,   其中第二行和第五行为跳跃指令;   </p><p><img src="https://s2.loli.net/2022/03/17/BZb7tsVTKNjrzel.png" width="600"></img></p><p>发现第二行的偏移量为0x8 = 0x03 + 0x5,   0x03为第二行的指令的二进制编码的第二个十六进制数,   0x5为下一条指令的地址;   要注意的是,   0x03应该是一个八位补码,   比如第五行的</p><center>0x5 = 0xf8 + 0xd</center><p>其中0xf8为-8<sub>(10)</sub>;   </p><p>当程序运行到第二行时,   %rip指向下一条代码,   也就是%rsp = 0x5,   这样就可以直接使用%rip算出该行跳跃指令的偏移量;   这样做的目的是让跳跃指令可以编码为两个十六进制数,   使得编码更加紧凑;   </p><p>总结下来,   跳跃指令的目的地址的计算方法为,   </p><center>目的地址 = 下一条指令的地址 + 跳跃指令语句的第二个十六进制数</center><p>另外还需要注意两点,   一是如果编码后的跳跃指令的操作符后面的数字,   也就是偏移量,   有好几个十六进制数的话,   首先需要考虑该机器使用的是大端法还是小端法,   然后再进行计算;   另外一点就是,   如果偏移量的高位全是fff,   计算其补码的快捷方法为:   找到全f的最后一个位,   取其权重,   然后减去这个位后面的那个几个位形成的无符号数;   </p><h1 id="N-不认识的单词"><a href="#N-不认识的单词" class="headerlink" title="N. 不认识的单词"></a>N. 不认识的单词</h1><p>convention    [kənˈvenʃn]    <strong>规则</strong></p><p>annotation     [ænəˈteɪʃ(ə)n]    注释</p><p>denote 表示</p><p>ambiguity    歧义</p><p>scale    [skeɪl] 比例</p><p>notation    标记法,   表示法</p><p>arbitrary 任意的</p><p>reference    引用</p><p>syntax    [ˈsɪntæks]    语法</p><p>‘ indicated 指定的</p><p>perform    执行</p><p>respectively    分别地</p><p>illustrate    [ˈɪləstreɪt]    说明,   阐释</p><p>sign-extending    位扩展</p><p>specific    专门</p><p>property    特性</p><p>designate    [ˈdezɪɡneɪt]    指定</p><p>syntax    语法</p><p>con’tingent on    [kənˈtɪndʒənt]    取决于</p><p>attribute    属性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-程序编码&quot;&gt;&lt;a href=&quot;#1-程序编码&quot; class=&quot;headerlink&quot; title=&quot;1. 程序编码&quot;&gt;&lt;/a&gt;1. 程序编码&lt;/h1&gt;&lt;p&gt;本小结基于C语言到可执行文件的变化过程,   稍微深入地讲解了各个过程;   &lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
  <entry>
    <title>通信原理复习</title>
    <link href="http://example.com/2022/03/01/tong-xin-yuan-li/tong-xin-yuan-li-fu-xi/"/>
    <id>http://example.com/2022/03/01/tong-xin-yuan-li/tong-xin-yuan-li-fu-xi/</id>
    <published>2022-03-01T06:10:41.000Z</published>
    <updated>2022-03-02T06:52:22.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字基带"><a href="#数字基带" class="headerlink" title="数字基带"></a>数字基带</h2><ol><li>遵循一个公式</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数字基带&quot;&gt;&lt;a href=&quot;#数字基带&quot; class=&quot;headerlink&quot; title=&quot;数字基带&quot;&gt;&lt;/a&gt;数字基带&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;遵循一个公式&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="通信原理" scheme="http://example.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构018_动态规划1</title>
    <link href="http://example.com/2022/02/19/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-018-dong-tai-gui-hua-1/"/>
    <id>http://example.com/2022/02/19/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-018-dong-tai-gui-hua-1/</id>
    <published>2022-02-19T08:56:10.000Z</published>
    <updated>2022-03-15T14:46:28.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-RobotWalk"><a href="#1-RobotWalk" class="headerlink" title="1. RobotWalk"></a>1. RobotWalk</h1><ol><li><p>题目</p><p>一个机器人在一个一维数组上走,   他从某个点出发,   想要去到某个点上,   给定他的初始位置,   要走的步数,   目标位置,   还有能走的总范围(1 ~ n);   </p></li><li><p>解法1:   暴力解</p><p>(1)分析</p><p>该解的整体思路为,   不断地去做尝试,   当走完最后一步时,   判断cur是否等于目标aim,   当等于时,   返回1,   不等时,   返回0;   当没有到达最后一步时,   有三种情况,   一种情况是到达位置1时,   只能走到2,   第二种情况是到达末尾时,   只能往左走,   第三种情况是在中间时,   需要收集往左和往右的尝试;   </p><p>(2)代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, start, aim, rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">way1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cur, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cur == aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, <span class="number">2</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, n - <span class="number">1</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> way1(n, cur - <span class="number">1</span>, aim, rest - <span class="number">1</span>) + way1(n, cur + <span class="number">1</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2:   基本动态规划</p><p>(1)分析</p><p>上述解法会产生重复的状态,   如下图的7  5  2状态,   由于重复的状态都是一样的,   所以可以用一个数组来存储已经被计算过的状态,   当下一次再碰到已经被计算过的状态时,   可以从中直接获取,   而不需要重新计算;   </p><p><img src="https://s2.loli.net/2022/02/21/9tn2uY17a6Dhkdw.png" width="500"></img></p><p>(3)具体实现</p><p>维持一个数组dp,   如果碰上了被处理过的状态,   则直接返回,   如果遇到没有被处理过的状态,   则进行以下判断:   如果当前剩余步数为0,   则设置结果为1;   然后再处理两种极端情况,   一种是cur走到1时,   只能往右走,   去搜集往右走的情况,   另一种是走到末尾时,   只能往左走;   最后处理一般情况,   也就是去搜集往左走和往右走的结果,   把他们加起来;   最后设置该状态下的dp表,   把结果返回即可;   </p><p>(2)代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k + <span class="number">1</span>; j++) &#123;</span><br><span class="line">dp[i][j] = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> way2(n, start, aim, k, dp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">way2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cur, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest, <span class="keyword">int</span>[][] dp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当碰到处理过的</span></span><br><span class="line"><span class="keyword">if</span> (dp[cur][rest] != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> dp[cur][rest];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">res = cur == aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">res = way2(n, <span class="number">2</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line">res = way2(n, n - <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = way2(n, cur - <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp) + way2(n, cur + <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125;</span><br><span class="line">dp[cur][rest] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法3:   进阶动态规划</p><p>对于上述解法而言,   数组dp有他的进阶含义,   (n,   k)表示(第n个位置,   还剩k步),   依据上述代码:   0位置在本题里并未使用,   所以第一行不赋值;   当步数为0时,   只有aim位置为1,   其他都为0,   也就是第一列除了(aim,   0)外的位置都为0;   当cur为1时,   res为状态(2,   rest - 1)的返回值,   也就是说,   数组的第二排第二个元素(包括在内)往右的所有元素都依赖于他的左下角的元素;   而数组的最后一排同理,   依赖于他们的左上角的元素;   对于普通的元素,   则同时依赖于他们的左上角和左下角元素,   所以整个数组的依赖关系如下图;   </p><p><img src="https://s2.loli.net/2022/02/28/useRkMKOCZy8pNF.png" width="600"></img></p><p>总体来说,   给定目标aim,   总长n以及要走的步数k,   即可规划出整个dp数组,   而如果再给定初始坐标cur,   即可确定出最终的位置,   取到这个位置的值,   返回即可;   剩下的工作就只有装填该数组了,   因为每一行依赖于别的行,   所以只能按列装填,   代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">dp[aim][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">dp[<span class="number">1</span>][j] = dp[<span class="number">2</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">        dp[n][j] = dp[n - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[start][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-CardInLine"><a href="#2-CardInLine" class="headerlink" title="2. CardInLine"></a>2. CardInLine</h1><ol><li><p>题目</p><p>有一副写着正数的牌,   有两个人你一张我一张地拿牌,   但是只能拿去最左边或者最右边的牌,   这两个人的拿牌策略都是最优解,   求获胜者的分数;   </p></li><li><p>解法1:   暴力递归</p><p>对于每个[L,   R]而言,   都存在先手和后手,   如果一个人A在这个[L,   R]里先手拿了牌,   那另外一个人B就会在这个范围内后手拿牌,   而B相当于在[L,   R - 1]或者[L - 1,   R]上先手拿牌,   那么A就会在这个范围内后手拿牌,   所以这是一个交替先后手的过程;   而对于具体的实现,   先手函数:   只剩一张牌了,   返回这张牌的值,   否则,   获取左边牌+在[L+1,   R]上的后手函数的值,   以及右边牌+在[L,   R+1]上的后手函数的值,   取他们两的最大值;   后手函数:   只剩一张牌了,   因为是后手,   所以返回0,   否则,   获取左边牌+在[L+1,   R]上的先手函数的值,   以及右边牌+在[L,   R+1]上的先手函数的值,   取他们的最小值;   这里涉及到这题的隐含条件,   即,   这题里的两人没有任何的勾心斗角,   在牌发下来的一瞬间,   胜负就已经定了,   而在最后,   两个人都会获得这副牌先手或后手的最大值;   一个人先手拿了一张牌,   在拿第二张牌时变成了后手,   别人也想的是拿最大啊,   所以他在拿第二张牌时会被迫选择小的,   所以,   为最小值,   代码如下;   </p><p>补充:   两个人都知道一个道理,   先手是主动的,   后手是被动的;   但是不管结果如何,   他们都会尽全力去争取;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">win1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.max(f1(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>), g1(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123;</span><br><span class="line"><span class="keyword">return</span> arr[L];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.max(arr[L] + g1(arr, L + <span class="number">1</span>, R), arr[R] + g1(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">g1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.min(f1(arr, L + <span class="number">1</span>, R), f1(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2:   动态规划之傻缓存法</p><p>思路和上面一致,   只是提供了两个缓存数组;   二维数组dp的(i,   j)分别代表数组arr的左边界和右边界,   如果这个状态出现过了,   则直接返回这个状态对应的值,   如果没有出现过,   则有两种情况,   一是当L==R时,   二是不等于R时;   代码如下:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   ```</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> 解法<span class="number">3</span>:   高级动态递归</span><br><span class="line"></span><br><span class="line">   通过解法<span class="number">1</span>对解法<span class="number">2</span>提供的那两个二维缓存数组进行优化;   首先当L==R时,   dpF的值为arr[L],   dpG的值为<span class="number">0</span>,   所以dpF需要把值改为arr对应的值,   而dpG不需要改,   因为初始化时就为<span class="number">0</span>;   然后,   当L!=R时,   dpF(L,  R)依赖dpG(L+<span class="number">1</span>,  R)和dpG(L,  R-<span class="number">1</span>),   dpG也以类似的方式依赖dpF,   所以,   填数组的时候应该以一条一条的对角线的顺序去填,   而且是填完一个数组的一条对角线就去填另外一个数组的相同位置的对角线,   这需要这么做:   外层循环维持一个元素,   负责标记执行到了哪一列,   内层循环从那一列的第一个元素开始,   一起往右下递增,   递增的同时要做该做的事;   </span><br><span class="line"></span><br><span class="line">   ```java</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">int</span>[][] dpF3, dpG3;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">win3</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> N = arr.length;</span><br><span class="line">   dpF3 = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">   dpG3 = <span class="keyword">new</span> <span class="keyword">int</span>[N][N];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">   dpF3[i][i] = arr[i];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> L;</span><br><span class="line">   <span class="keyword">int</span> R;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> startCol = <span class="number">1</span>; startCol &lt; N; startCol++) &#123;</span><br><span class="line">   L = <span class="number">0</span>;</span><br><span class="line">   R = startCol;</span><br><span class="line">   <span class="keyword">while</span> (R &lt; N) &#123;</span><br><span class="line">   dpF3[L][R] = Math.max(arr[L] + dpG3[L + <span class="number">1</span>][R], arr[R] + dpG3[L][R - <span class="number">1</span>]);</span><br><span class="line">   dpG3[L][R] = Math.min(dpF3[L + <span class="number">1</span>][R], dpF3[L][R - <span class="number">1</span>]);</span><br><span class="line">   L++;</span><br><span class="line">   R++;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> Math.max(dpG3[<span class="number">0</span>][N - <span class="number">1</span>], dpF3[<span class="number">0</span>][N - <span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-RobotWalk&quot;&gt;&lt;a href=&quot;#1-RobotWalk&quot; class=&quot;headerlink&quot; title=&quot;1. RobotWalk&quot;&gt;&lt;/a&gt;1. RobotWalk&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;一个机器人在一个一维数组上</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>通信原理第一章_绪论</title>
    <link href="http://example.com/2022/02/11/tong-xin-yuan-li/tong-xin-yuan-li-di-yi-zhang-xu-lun/"/>
    <id>http://example.com/2022/02/11/tong-xin-yuan-li/tong-xin-yuan-li-di-yi-zhang-xu-lun/</id>
    <published>2022-02-11T15:40:50.000Z</published>
    <updated>2022-02-11T15:52:40.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-4-信息的度量"><a href="#1-4-信息的度量" class="headerlink" title="1.4 信息的度量"></a>1.4 信息的度量</h1><ol><li><p>信息量</p><p>信息量的大小与该事件发生的可能性有关,   公式为</p><p><img src="https://s2.loli.net/2022/02/11/7Mn3ed6LqHlAvIE.png" width="400"></img></p><p>信息量的单位与底数a有关,   a为2时单位为bit,   a为e时单位为nat;   </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-4-信息的度量&quot;&gt;&lt;a href=&quot;#1-4-信息的度量&quot; class=&quot;headerlink&quot; title=&quot;1.4 信息的度量&quot;&gt;&lt;/a&gt;1.4 信息的度量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;信息量&lt;/p&gt;
&lt;p&gt;信息量的大小与该事件发生的可能性有关,   </summary>
      
    
    
    
    <category term="通信原理" scheme="http://example.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter2</title>
    <link href="http://example.com/2022/02/07/csapp/csapp-chapter2/"/>
    <id>http://example.com/2022/02/07/csapp/csapp-chapter2/</id>
    <published>2022-02-07T13:43:14.000Z</published>
    <updated>2022-03-08T12:09:25.012Z</updated>
    
    <content type="html"><![CDATA[<p>这是”程序结构和执行”的第一章</p><h1 id="1-本章目的"><a href="#1-本章目的" class="headerlink" title="1. 本章目的"></a>1. 本章目的</h1><p>让程序员在写程序时避免因为数据溢出等问题产生的霸哥;   </p><h1 id="2-信息存储"><a href="#2-信息存储" class="headerlink" title="2. 信息存储"></a>2. 信息存储</h1><h2 id="2-1-信息的表示方法"><a href="#2-1-信息的表示方法" class="headerlink" title="2.1 信息的表示方法"></a>2.1 信息的表示方法</h2><p>通常在计算机中用十六进制来表示数据;   </p><h2 id="2-2-小端法与大端法"><a href="#2-2-小端法与大端法" class="headerlink" title="2.2 小端法与大端法"></a>2.2 小端法与大端法</h2><ol><li><p>概念</p><p>将一个十六进制数分段,   两个数字为一组;   大端法为数据的自然顺序和内存地址增大的方向一致,   小端法则相反;   </p></li><li><p>产生的问题</p><p>(1)大端机和小端机存储数据的顺序不同,   所以他们之间如果需要通过网络进行通信的话,   是需要一定的信息转化规则的,   也就是大端机里爱咋搞咋搞,   但是把信息传到网络上时,   需要转化为网络传输规定的格式,   信息传到小端机后,   小端机把信息转化为小端法的形式,   然后爱怎么搞怎么搞;   </p><p>(2)在阅读机器级代码时,   如果不了解小端法,   是很难读懂小端机的机器代码的,   比如下图,   左边从01到00的十六进制字符序列为右边那一堆东西的机器级表示,   意思是要把寄存器eax里的东西加到地址为[0x200b43 + rip]所对应的存储单元当中;   而去掉字符序列最后的00,   再把那后面几个数字倒过来写,   恰好是200b43,   也就是地址的偏移量;   所以这是一台小端机;   </p><p><img src="https://s2.loli.net/2022/02/10/pWHh8Iqv3NLFQwS.png" width="800"></img></p></li></ol><h2 id="2-3-各种运算"><a href="#2-3-各种运算" class="headerlink" title="2.3 各种运算"></a>2.3 各种运算</h2><ol><li><p>布尔运算</p><p>在C语言里称为位级运算,   也就是与,   或,   非,   异或(具体略),   这是一种对二进制位进行操作的运算,   最好的运算方法是把十六进制数拆成二进制数一位一位的运算;   </p></li><li><p>C语言逻辑运算</p><p>&amp;&amp;,   ||,   !,   这种运算把操作数当成非零即一来看待,   换句话说,   在运算之前,   先把操作数转换成零或者一;   </p></li><li><p>位移运算</p><p>左移只有一种,   就是不断让高位往左溢出,   同时低位补零;   而右移有两种,   算术右移和逻辑右移;   逻辑右移就是不断让低位往右溢出,   同时高位无脑补零,   而算术右移要考虑最高位,   如果最高位是1,   则不断补1,   反之则不断补零;   </p><p>注意:   </p><p>(1) C语言没有明确规定有符号数使用哪种移位方式,   但大多数机器都对有符号数使用算术移位,   但是无符号数一定是逻辑移位;   而Java具有算术移位符&gt;&gt;&gt;和逻辑移位符&gt;&gt;;   </p><p>(2) 如果移位的位数k很大,   超过了被移位数本身的位数w,   则只会移动log<sub>2</sub>w位,   实际上相当于移动(k mod w)位,   但这并不稳定,   而Java明确地按照取模运算来计算;   </p><p>(3) 在不清楚一个表达式所用到的运算符的优先级的情况下,   最好加上括号!</p></li></ol><h1 id="3-整数表示"><a href="#3-整数表示" class="headerlink" title="3. 整数表示"></a>3. 整数表示</h1><h2 id="3-1-无符号数和有符号数"><a href="#3-1-无符号数和有符号数" class="headerlink" title="3.1 无符号数和有符号数"></a>3.1 无符号数和有符号数</h2><ol><li><p>有符号数</p><p>可采用一串01字符串来对每个数进行表示,   无符号数的表示只是单纯的二进制表示法,   而有符号数的表示则是最高位为符号位,   具体来说,   最高位的数字需要乘以-2<sup>w</sup>,   然后参加二进制运算,   所以|TMin| = |TMax| + 1;   </p></li></ol><h2 id="3-2-有无符号数之间的转换"><a href="#3-2-有无符号数之间的转换" class="headerlink" title="3.2 有无符号数之间的转换"></a>3.2 有无符号数之间的转换</h2><p>强制类型转换不会改变一个数的位模式,   只会改变对这个数的解释方式,   换句话说,   强制类型转换改变的是位模式到数字的映射关系;  这和前面的指针的强制类型转换是一样的,   指针的强转并不会改变对应内存单元里的值,   而是会把该指针放入另一种映射关系进行运算;   </p><p>由于有符号数的最高位为符号位,   所以有符号数的最大值要比无符号数的小一倍,   当一个无符号数大于零并且没有超过有符号数的最大值时,   转成有符号数相当于没转,   当超过了就需要减去一个2<sup>w</sup>;   具体的数学推导并没有太大意义;   另外在C语言中,   当需要运算的两个数一个为有符号一个为无符号时,   C语言会隐式地把有符号转换为无符号,   然后再进行运算;   </p><h2 id="3-2-扩展数字的位"><a href="#3-2-扩展数字的位" class="headerlink" title="3.2 扩展数字的位"></a>3.2 扩展数字的位</h2><p>无符号数字的扩展方式为在数字的位模式前一直加零,   直到扩展完成,   而有符号数字的扩展方式为在数字的位模式前一直添加与标志位相同的数字,   直到扩展完成,   <strong>这样做可以保证扩展前后不同的位模式表示的数字是相同的</strong>;   如下代码通过短整型到整型,   无符号短整型到无符号整型的位扩展来举例,   本人的机子是小端机,   所以在显示比特位的时候采用了倒序的方式输出;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* byte_pointer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes_with_big_endian</span><span class="params">(byte_pointer start, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">short</span> sx = <span class="number">-12345</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> usx = sx;</span><br><span class="line">    <span class="keyword">int</span> x = sx;</span><br><span class="line">    <span class="keyword">unsigned</span> ux = usx;</span><br><span class="line">    <span class="comment">/*显示短整型的-12345*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sx = %d: &quot;</span>, sx);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;sx, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line">    <span class="comment">/*把相同的位模式用无符号短整型的格式显示出来*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;usx = %u: &quot;</span>, usx);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;usx, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">short</span>));</span><br><span class="line">    <span class="comment">/*对短整型的sx进行位扩展*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d: &quot;</span>, x);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">/*对无符号短整型的usx进行位扩展*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ux = %u: &quot;</span>, ux);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;ux, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果如下图,   usx和sx有着相同的位模式—1100 1111 1100 0111,   而x和ux分别是对sx和usx的位扩展,   由于sx的最高位为1,   x对其扩展后,   添加的是全1;   而无符号的扩展的确是直接加的0;   </p><p><img src="https://s2.loli.net/2022/03/02/jqDGvxLa97oQ1Yz.png" width="400"></img></p><p>而短整型short转为无符号整型unsigned时,   是先将数字进行位扩展,   也就是转成有符号整型,   再转成无符号整型,   就比如下面的代码,   将sx进行正常的扩展,   就如同x那样,   然后以无符号的形式去解释扩展过后的位模式,   得到ux2;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> ux2 = sx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ux2 = %u: &quot;</span>, ux2);</span><br><span class="line">show_bytes_with_big_endian((byte_pointer) &amp;ux2, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/02/3AVYDmTHNMcLJgj.png" width="500"></img></p><h2 id="3-3-截短数字"><a href="#3-3-截短数字" class="headerlink" title="3.3 截短数字"></a>3.3 截短数字</h2><p>截短无符号数很简单,   就是直接截去高位的相应位数,   但是,   可以进行深度思考;   </p><p>假设一个数字x由i位二进制数组成,   将其截短成为拥有j位二进制数的数字y,   从二进制数的角度来看,   无符号数的截短是直接把高出来的那些位变为0,   也就是&amp;0,   而上述截短过程把[i - 1,   j]这个范围内的位全部变成了0,   也就是把高位的i - j那么多位变成了0,   也就是要与上一个高i - j位都是0,其他位都是1的数,   也就是(2<sup>j </sup> - 1),   如下图,   很显然,   这和模上2<sup>j</sup>是一回事,   所以可以得到如下结果:   </p><center>y = x mod 2<sup>j</sup></center><p><img src="https://s2.loli.net/2022/03/05/K4PDfYCaQi1tpgv.png" width="600"></img></p><p>个人认为这种证明方法比书上的更加通俗易懂,   灵感其实是来自取模运算和与运算之间的关系,   详细可以参考Java1.7源码中对哈希表的取模运算的优化;   </p><p>而有符号数的截短,   则是经过上述取模截短后,   按照无符号数转有符号数的规则进行转化;  </p><h2 id="3-4-函数getpeername的安全漏洞"><a href="#3-4-函数getpeername的安全漏洞" class="headerlink" title="3.4 函数getpeername的安全漏洞"></a>3.4 函数getpeername的安全漏洞</h2><p>从操作系统内存空间复制数据到用户空间的函数,   涉及到两个函数,   memcpy()负责将一个区域的数据复制到另外一个区域,   copy_from_kernel()涉及到一个缓冲数组kbuf,   这个数组是可以被用户空间读取的,   他有一个最大值KSIZE,   该函数传入一个空间标识和需要复制的大小maxlen,   最大只能是KSIZE,   把这些东西传入memcpy,   可以在该函数里进行数据拷贝,   拷贝到kbuf里,   如下面代码;   </p><p>而maxlen的数据类型是int,   如果说传入的maxlen是-1,   那么-1以无符号整型被传入memcpy时,   会变成一个非常大的数字,   造成用户空间读取到大量的内核空间的数据;   </p><p>改进措施为将maxlen的数据类型变为size_t;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line"><span class="keyword">void</span> *memcpy(<span class="keyword">void</span> *dest, <span class="keyword">void</span> *src, size_t n);</span><br><span class="line">#define KSIZE <span class="number">1024</span></span><br><span class="line"><span class="keyword">char</span> kbuf[KSIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_from_kernel</span><span class="params">(<span class="keyword">void</span> *user_dest, <span class="keyword">int</span> maxlen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = KSIZE &lt; maxlen ? KSIZE : maxlen;</span><br><span class="line">    memcpy(user_dest, kbuf, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-整数运算"><a href="#4-整数运算" class="headerlink" title="4. 整数运算"></a>4. 整数运算</h1><h2 id="4-1-整数加法"><a href="#4-1-整数加法" class="headerlink" title="4.1 整数加法"></a>4.1 整数加法</h2><ol><li><p>无符号加法</p><p>假设位限制为32,   也就是说,   如果两个无符号整型相加后溢出了,   也就是结果的第33位为1的话,   需要将最高位抛弃,   而如果没有溢出,   则保持结果;   本书中也有非常具象的模型表示这种规则;   另外,   判断两个无符号整型相加后是否溢出也非常简单,   因为溢出之后的结果一定小于两个加数;   </p></li><li><p>无符号数取反</p><p>无符号数取反满足下列式子</p><p><img src="https://s2.loli.net/2022/03/03/nlKudMCJ6VQLqFX.png" width="400"></img></p></li><li><p>有符号数加法</p><p>满足下列式子</p><p><img src="https://s2.loli.net/2022/03/03/W1wBvAf5TFYIZz3.png" width="800"></img></p><p>另外,   有符号数相加后如果是正溢出,   则会变成负数;   如果是负溢出,   则会变成正数;   所以判断一个加法结果是否溢出的具体代码如下;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sum &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !neg_over &amp;&amp; !pos_over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x8699</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0x354</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a: %d, b: %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;not over: %d\n&quot;</span>, tAdd_ok(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一点,   对于(x + y) - x,   不论(x + y)是否溢出,   (x + y) - x始终等于y,   对应于书中的练习题2.31,   该题给出了函数tAdd_ok的一种错误实现,   错误代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Warning: This code is buggy!*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">return</span> (sum - x) == y || (sum - y) == x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有符号数的加法是模数加法,   换句话说,   这种加法是一个圈,   具有封闭性,   不论一个加法结果是否溢出,   他减去一个加数,   一定会得到另外一个加数,   所以上述代码总是会返回1;   </p><p>练习题2.32也提供了一套错误代码;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;limits.h&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sum &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !neg_over &amp;&amp; !pos_over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当x为正数或者0时, 减去一个最小负数, 相当于加上一个(最大正数 + 1)</span></span><br><span class="line"><span class="comment">//则一定会正向溢出, 返回0</span></span><br><span class="line"><span class="comment">//当x为负数时,减去一个最小负数, 相当于加上一个最大正数</span></span><br><span class="line"><span class="comment">//则一定不会溢出, 返回1</span></span><br><span class="line"><span class="comment">//但是如果以-y的形式传入tAdd_ok(), -y = 2^31会溢出, 变成-2^31</span></span><br><span class="line"><span class="comment">//这样的话传入的x为一个负数就会正向溢出, 传入一个正数的话就不会溢出</span></span><br><span class="line"><span class="comment">//与期望的结果相反</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tSub_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tAdd_ok(x, -y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x70004532</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x70004532</span>, INT_MIN));</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x80004532</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x80004532</span>, INT_MIN));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当y = T<sub>min</sub>时,   -y = 2<sup>31</sup>,   溢出了,   所以他会变为-2<sup>31</sup>,   那么他不管加上哪个负数都会溢出,   不管加上哪个正数都不会溢出,   但是这并不是我们所期望的,   我们期望的是在tSub_ok里,   传入-2<sup>31</sup>时,   判断x + 2<sup>31</sup>是否会发生溢出,   那就是只要x为正数,   就会发生溢出,   只要是负数,   就不会发生溢出;   但是对于其他所有的数而言,   是完全没有问题的;   这道题是希望我们注意,   有符号数的最大值和最小值是不对称的,   说的比较专业一点,   有符号数的最大值和最小值并不是互为逆元,   有符号数的最小值的逆元是他自己,   最大值的逆元可以通过取反获得;   而无符号数的最小值0,   的逆元也是他自己;   而减法正确的溢出判断代码,   也就是家庭作业2.74,   则应该不该通过tAdd_ok()来实现,   而是直接重新写一套,   代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;limits.h&quot;</span></span><br><span class="line"><span class="comment">//题意: 两数相减, 如果结果溢出了就返回0, 没溢出就返回1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tSub_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果y是最小负值, 则</span></span><br><span class="line">    <span class="keyword">int</span> sub = x - y;</span><br><span class="line">    <span class="comment">//两个正数相加的结果等于负数时, 代表其正溢出了</span></span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sub &lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//两个负数相加的结果等于正数时, 代表其负溢出了</span></span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; sub &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !(pos_over || neg_over);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果x为负数, 减去最小值相当于加上最大值, 则一定不溢出</span></span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0xf4563456</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0xf4563456</span>, INT_MIN));</span><br><span class="line">    <span class="comment">//如果x为正数或0, 加上最大值后, 则会正向溢出变成负数</span></span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x74563456</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x74563456</span>, INT_MIN));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-补码非的两种实现方法"><a href="#4-2-补码非的两种实现方法" class="headerlink" title="4.2 补码非的两种实现方法"></a>4.2 补码非的两种实现方法</h2><ol><li>对每一位求补,   然后加一;   </li><li>对最右边的1的左边的所有数求补;   </li></ol><h2 id="4-3-整数乘除"><a href="#4-3-整数乘除" class="headerlink" title="4.3 整数乘除"></a>4.3 整数乘除</h2><ol><li>整数相乘</li></ol><p>无符号数的乘法是两数相乘后模上2<sup>w</sup>,   而有符号数则是相乘后模上2<sup>w</sup>,   再转成有符号数;   因为截短,   所以有符号数和无符号数在相同位模式的前提下的乘法结果是相同的;   由下式</p><center>B2U<sub>w</sub>(<B>x</B>)  - B2T<sub>w</sub>(<B>x</B>)= x<sub>w - 1</sub>[2<sup>w - 1</sup> - (-2<sup>w - 1</sup>)] = x<sub>w - 1</sub>2<sup>w</sup></center><p>可得</p><center>T2U<sub>w</sub>(x) = B2U<sub>w</sub>(<B>x</B>) =  x + x<sub>w - 1</sub>2<sup>w</sup></center><p>等式右边没有加粗的x代表有符号数x;   然后歪比巴布一大堆证明出来了个啥我也不知道懒得管了;   </p><ol start="2"><li><p>整数相乘的优化</p><p>一个数乘以一个2的幂次数,   可以优化为该数向左移动相应的幂次数并抛弃溢出位数,   更进一步,   这个2的幂次数也可以换成一个位模式只有一连串1的数,   那么这两个数相乘可以优化为如下结果:   </p><center>(x << n) + (x << n  - 1) + ... + (x  << m)</center><p>进一步优化为如下结果:   </p><center>(x << (n + 1)) - (x << m)</center><p>其中,   n是那个数字从0开始的位模式的最高位不为零的位;   </p><p>而再进一步,   这个只能有一串1的数也可以换成是由几串1组成数字,   但是需要注意,   只能是几串1,   因为如果有很多串1的话,   还是会有过多的移位运算和加减运算;   </p></li><li><p>除以2的幂次数</p><p>实践表明,   一个数除以一个2的幂次数再向下取整的结果,   和对这个数进行相同位数的右移的结果是一样的,   而无符号数是逻辑右移,   有符号数是算术右移;   </p><p>为了保证负数取整也能向0舍入,   也就是要保证结果向上取整,   负数的移位策略应该做出调整,   也就是加上一个偏移量2<sup>k</sup> - 1:   </p><center>(x + (1 << k) - 1) >> k</center><p>总结下来,   有符号数除以2的幂次数可以简化为一句代码:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x &lt; <span class="number">0</span> ? (x + <span class="number">1</span> &lt;&lt; k - <span class="number">1</span>) &gt;&gt; k : x &gt;&gt; k;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h2><p>本小节对C语言无符号和有符号数的四则运算以及特殊的非运算进行了较为严谨的数学推演;   </p><p>从整体来看,   整数的运算其实是一种模运算,   这是因为计算机只能表示有限的位,   而有限的位则会限制计算机表示的数的取值范围;   对于超出范围的数,   加减法采取的策略是+-2<sup>w</sup>,   这导致了无符号数和有符号数的最小值的逆元是他们自己,   而乘除法采取的是mod 2<sup>w</sup>,   也就是对溢出位直接进行截短;   为了提高乘除法的效率,   在一定条件下,   编译器会用移位来代替乘除法;   </p><p>最后,   unsigned数据类型会导致很多意想不到的漏洞,   慎用,   慎用!</p><h1 id="5-浮点数"><a href="#5-浮点数" class="headerlink" title="5. 浮点数"></a>5. 浮点数</h1><h2 id="1-浮点数表示"><a href="#1-浮点数表示" class="headerlink" title="1. 浮点数表示"></a>1. 浮点数表示</h2><p>总体来说,   浮点数由三部分相乘而来</p><center>V = (-1)<sup>s</sup>  *  M  *  2<sup>E</sup></center><p>这三部分中,   M和E并不是直接存在浮点数里的,   那单精度数和双精度数里存是以下数据:   </p><p><img src="https://s2.loli.net/2022/03/07/wa1tVXyYOjflUeh.png" width="600"></img></p><p>位于31位的直接对应于上述式子里的s,   代表符号位; 占着30~23位共8位的exp代表一个无符号数e,   他和另外一个偏移量Bias共同组成E;   占着剩下的共23位的frac与十进制里的小数的含义类似,   通过某些规则映射到为M,   而具体的映射关系如下:   </p><p>(1)规格化数</p><p><img src="https://s2.loli.net/2022/03/07/kY5qLrbO4Kco2fB.png" width="600"></img></p><p>(2)非规格化数</p><p><img src="https://s2.loli.net/2022/03/07/d3Oe7Uj4luo9rWJ.png" width="700"></img></p><p>非规格化数有两个功效,   一是表示0,   二是表示0旁边的数;   </p><p>(3)无穷大</p><p><img src="https://s2.loli.net/2022/03/07/wGlsWgvda3Q8E41.png" width="400"></img></p><p>(4)NaN</p><p><img src="https://s2.loli.net/2022/03/07/nhGH8e9ZI7aDrTt.png" width="600"></img></p><p>需要注意的是,   非规格化数的E设置为1 - Bias是为了让浮点数从非规格化数过渡到规格化数的过程是自然的,   具体来讲,   非规格化数的最大值为</p><center>V = 2<sup>-n-2<sup>k - 1</sup> + 2</sup></sup></center><p>而规格化数的最小值是</p><center>V = (1 - 2<sup>-n</sup>) * 2<sup>-2<sup>k - 1</sup> + 2</sup></sup></center><p>可以看到他们只差了一点点,   这实现了平滑过渡;   </p><h2 id="2-舍入"><a href="#2-舍入" class="headerlink" title="2. 舍入"></a>2. 舍入</h2><p>浮点数二进制的舍入规则是舍入到偶数(Round-to-even),   具体来讲,   先要确定舍入到多少位,   然后观察那一位的右边那些位,   比如舍入到二进制小数点右边两位,   10.11100<sub>2</sub>的舍入结果便是11.00,   因为该数字的舍入有两种情况,   一是舍入到11.00,   二是舍入到10.11,   而该数字正好位于这两种舍入情况中间,   因为他加0.001是11.00,   减0.001是10.11,   这就需要对其使用舍入到偶数规则了,   也就是使结果倾向于最低有效位为0,   所以结果为11.00;   而同理,   10.10100<sub>2</sub>的舍入结果为10.10;   </p><h1 id="6-大总结"><a href="#6-大总结" class="headerlink" title="6. 大总结"></a>6. 大总结</h1><p>总结个der,   我要赶紧去和我的汇编玩儿了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是”程序结构和执行”的第一章&lt;/p&gt;
&lt;h1 id=&quot;1-本章目的&quot;&gt;&lt;a href=&quot;#1-本章目的&quot; class=&quot;headerlink&quot; title=&quot;1. 本章目的&quot;&gt;&lt;/a&gt;1. 本章目的&lt;/h1&gt;&lt;p&gt;让程序员在写程序时避免因为数据溢出等问题产生的霸哥;   </summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构017_图</title>
    <link href="http://example.com/2022/02/06/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-017-tu/"/>
    <id>http://example.com/2022/02/06/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-017-tu/</id>
    <published>2022-02-06T05:09:52.000Z</published>
    <updated>2022-02-19T05:19:06.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-宽度优先遍历BFS"><a href="#1-宽度优先遍历BFS" class="headerlink" title="1. 宽度优先遍历BFS"></a>1. 宽度优先遍历BFS</h1><ol><li><p>思路</p><p>类似于按层遍历,   要操作的节点是从栈里弹出来的,   把该节点能够到达的点都压入栈中,   并且提供一个容器,   只要加入栈中的元素都需要在这个容器里登记;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node startNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(startNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">HashSet&lt;Node&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;()</span><br><span class="line">queue.add(startNode);</span><br><span class="line">hashSet.add(startNode);</span><br><span class="line">Node curNode;</span><br><span class="line"><span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">curNode = queue.poll();</span><br><span class="line">System.out.println(curNode.value);</span><br><span class="line"><span class="keyword">for</span> (Node node : curNode.next) &#123;</span><br><span class="line"><span class="keyword">if</span>(!hashSet.contains(node))</span><br><span class="line">queue.add(node);</span><br><span class="line">hashSet.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-深度优先遍历DFS"><a href="#2-深度优先遍历DFS" class="headerlink" title="2. 深度优先遍历DFS"></a>2. 深度优先遍历DFS</h1><ol><li><p>算法思路</p><p>一条路径走到尽头,   再走其他路径;   </p></li><li><p>实现思路</p><p>用迭代方式来实现,   对从栈里弹出的某个点进行操作时,   由于该curNode节点指向的点可能很多,   所以需要一个for循环,   在循环里,   遍历每一个nextNode节点,   如果这个nextNode节点不在set里,   则进行下面的操作:   将该nextNode节点加入到栈和set里,   并且把curNode重新加入到栈里,   打印nextNode节点的信息,   最后记得break掉这个for循环;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node startNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">set.add(startNode);</span><br><span class="line">stack.push(startNode);</span><br><span class="line">Node curNode;</span><br><span class="line"><span class="keyword">while</span> (!set.isEmpty()) &#123;</span><br><span class="line">curNode = stack.pop();</span><br><span class="line"><span class="keyword">for</span> (Node next : curNode.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">stack.push(next);</span><br><span class="line">stack.push(curNode);</span><br><span class="line">set.add(next);</span><br><span class="line">System.out.println(next.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-拓扑排序"><a href="#3-拓扑排序" class="headerlink" title="3. 拓扑排序"></a>3. 拓扑排序</h1><ol><li><p>概念</p><p>生成一个无环图的最小生成树;   注意无环图并不是多叉树,   只是不成环,   下图也是一个无环图;   </p><p><img src="https://s2.loli.net/2022/02/07/5TRl1fQEPL6rV29.png" width="300"></img></p></li><li><p>实现思路</p><p>通过入度来实现,   按照入度的大小来排序即可;   </p></li><li><p>代码实现</p><p>代码思路:   用一张表inMap来记录各个点的入度,   用一个队列zeroInQueue来存放入度为0的点,   这个队列首先要把一开始入度为0的点存进去;   每从队列里弹出一个点,   就把他加到结果中,   然后遍历这个点所有所及的点,   把这些点的入度减一,   并更新inMap,   如果这其中的某个点入度为0了(用inMap来判断),   就把他加入到zeroInQueue中去;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code03_TopologySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title">sortedTopology</span><span class="params">(Graph gragh)</span></span>&#123;</span><br><span class="line">HashMap&lt;Node, Integer&gt; inMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Queue&lt;Node&gt; zeroInQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Node node : gragh.nodes.values()) &#123;</span><br><span class="line">inMap.put(node, node.in);</span><br><span class="line"><span class="keyword">if</span>(node.in == <span class="number">0</span>) &#123;</span><br><span class="line">zeroInQueue.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Node&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!zeroInQueue.isEmpty()) &#123;</span><br><span class="line">Node cur = zeroInQueue.poll();</span><br><span class="line">result.add(cur);</span><br><span class="line"><span class="keyword">for</span> (Node next : cur.next) &#123;</span><br><span class="line">inMap.put(next, inMap.get(next) - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(inMap.get(next) == <span class="number">0</span>) &#123;</span><br><span class="line">zeroInQueue.add(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-Kruskal算法"><a href="#4-Kruskal算法" class="headerlink" title="4. Kruskal算法"></a>4. Kruskal算法</h1><ol><li><p>概念</p><p>该算法用于生成无向图的最小生成树,   使用并查集,   按照边的大小进行遍历,   只要那条边对应的两点不在同一个集合里,   那就把他们并在一起,   这样操作一定不会构成环;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">public</span> PriorityQueue&lt;Edge&gt; heap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(Collection&lt;Node&gt; collection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = collection.size();</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> MyComparator());</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">int</span> nodeVal;</span><br><span class="line"><span class="keyword">for</span> (Node node : collection) &#123;</span><br><span class="line">nodeVal = node.value;</span><br><span class="line">id[nodeVal] = nodeVal;</span><br><span class="line">size[nodeVal] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != id[p]) &#123;</span><br><span class="line">id[p] = find(id[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size[pRoot] &gt;= size[qRoot]) &#123;</span><br><span class="line">id[qRoot] = pRoot;</span><br><span class="line">size[pRoot] += size[qRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">size[qRoot] += size[pRoot];</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Edge&gt; <span class="title">method</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Edge edge : graph.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Edge curEdge;</span><br><span class="line"><span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">curEdge = heap.poll();</span><br><span class="line"><span class="keyword">if</span> (!isSameSet(curEdge.from.value, curEdge.to.value)) &#123;</span><br><span class="line">result.add(curEdge);</span><br><span class="line">union(curEdge.from.value, curEdge.to.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">kruskalMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">UnionFind u = <span class="keyword">new</span> UnionFind(graph.nodes.values());</span><br><span class="line"><span class="keyword">return</span> u.method(graph);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-Prim算法"><a href="#5-Prim算法" class="headerlink" title="5. Prim算法"></a>5. Prim算法</h1><ol><li><p>概念</p><p>该算法用于寻找无向图的最小生成树;   该算法本质为贪心,   贪心策略为:   无向图的最小生成树的边一定由图中权重最小的边组成;   这种贪心只适用于无向图 !</p></li><li><p>实现思路</p><p>随便找一个点,   用一个堆来存储这个点的直接边,   弹出权重最小的边,   用一个set来记录这个边可及的点,   如果这个点不在set里,   把他存进去,   并且把这个条边存入结果集合里,   把这个点可及的边存入堆里;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">primMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Edge&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Node node : graph.nodes.values()) &#123;</span><br><span class="line"><span class="keyword">if</span>(!set.contains(node)) &#123;</span><br><span class="line">set.add(node);</span><br><span class="line"><span class="keyword">for</span> (Edge edge : node.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Edge curEdge;</span><br><span class="line">Node nextNode;</span><br><span class="line"><span class="keyword">while</span>(!heap.isEmpty()) &#123;</span><br><span class="line">curEdge = heap.poll();</span><br><span class="line">nextNode = curEdge.to;</span><br><span class="line"><span class="keyword">if</span>(!set.contains(nextNode)) &#123;</span><br><span class="line">set.add(nextNode);</span><br><span class="line">result.add(curEdge);</span><br><span class="line"><span class="keyword">for</span> (Edge edge : nextNode.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-Dijkstra算法"><a href="#6-Dijkstra算法" class="headerlink" title="6. Dijkstra算法"></a>6. Dijkstra算法</h1><ol><li><p>概念</p><p>该算法用于寻找有向图的最小生成树,   有向图的最小生成树不是唯一的,   注意谈论有向图的最小生成树时都需要为其提供一个起始点;    </p></li><li><p>代码思路</p><p>只用到两个集合,   一个是负责存储节点和对应距离的距离表distanceMap,   一个负责标记已被操作完成的点的selectedSet;   </p><p>有一个方法getMinDisNode( ),   负责获取距离表里的最小距离的点;   </p><p>在循环里,   获取该最小距离,   遍历这个点所有可及的边,   边可以分为两类,   一类是该边所到的点已经被放入距离表里,   另一类反之,   对于所到的点已经被放到距离表里的边,   判断最小距离加上该边的权重是否大于距离表里的那个点对应的距离,   如下图,   如果确实大于,   则更新该距离,   如果没有包含,   则把最小距离加上该边的权重,   然后扔进距离表里;   </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-宽度优先遍历BFS&quot;&gt;&lt;a href=&quot;#1-宽度优先遍历BFS&quot; class=&quot;headerlink&quot; title=&quot;1. 宽度优先遍历BFS&quot;&gt;&lt;/a&gt;1. 宽度优先遍历BFS&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;思路&lt;/p&gt;
&lt;p&gt;类似于按层遍历,   要操</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>算法第四版_1.5_并查集</title>
    <link href="http://example.com/2022/02/03/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-bing-cha-ji/"/>
    <id>http://example.com/2022/02/03/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-bing-cha-ji/</id>
    <published>2022-02-03T07:46:40.000Z</published>
    <updated>2022-02-08T01:49:11.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>本书详细阐述了并查集的提出与优化;   从提出到找到最优解,   并查集共经历了四个版本:   quick-find,   quick-union,   加权quick-union和使用路径压缩的加权quick-union;</p><h2 id="1-并查集概念等等"><a href="#1-并查集概念等等" class="headerlink" title="1. 并查集概念等等"></a>1. 并查集概念等等</h2><ol><li><p>并查集的目的:   就像他的名字一样,   并(union)和查(find),   是要实现将两个集合快速并在一起,   以及快速从集合中查找到某两个元素是否相连的一种数据结构,   算法第四版中给出了一幅很具象的图,   即下图,   我们可以较为清楚地看到左下角有一个孤立起来的连通分量,   在图中也可以找到一个孤立的点,   这也许很轻松,   但是如果要判断某两个点是否连通,   则非常地困难,   并查集就是来解决这些问题的;<br><img src="https://s2.loli.net/2022/02/03/DivXnS7I8YOACk9.png" alt="image-20220203160545689"></p></li><li><p>并查集的组成:   首先有两个基本的东西:   表示身份的数组id[],   表示当前有多少个集合的count(研究的对象的基本元素是上图的点,   在并查集的研究中,   用id[]来表示那些点);  其次就是几个方法:   union(int p,   int q),   负责将p和q背后的两个集合连通起来,   find(int p),   负责找到p对应的代表节点,   connected(int p,   int q),   负责判断这两个点是否连通;   </p><p>所以最终的代码如下:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//并查集的初始化</span></span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];   </span><br><span class="line">        count = N;   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            id[i] = i;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而可以优化的就是那三个方法;   </p></li><li><p>并查集版本的简述:   每一个并查集的版本的优点都展现在了他们的名字里,   quick-find版本的find( )方法只需访问一次数组,   quick-union版本的union( )方法也只需要访问一次数组,   加权quick-union版本对union( )方法进行了优化,   使其在合并集合时更加智能,   路径压缩使得find( )和connected( )接近常数项级别;   </p></li></ol><h2 id="2-quick-find"><a href="#2-quick-find" class="headerlink" title="2. quick-find"></a>2. quick-find</h2><ol><li><p>算法实现:   find(int p)方法只寻找到p节点的父亲节点,   union(int p, int q)方法需要将那两个节点的父亲节点进行比较,   如果不同,   则把他们合并,   谁合并到谁无所谓,   比如要将p对应的集合合并到q对应的集合,   合并的方式就为遍历数组,   如果碰到节点的父亲节点为p的父亲节点,   即数组的值为id[p],   则把这个点的数组值改为id[q],   也就是改为q的父亲节点;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-find</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pID = find(p);</span><br><span class="line"><span class="keyword">int</span> qID = find(q);</span><br><span class="line"><span class="keyword">if</span> (pID == qID) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pID) &#123;</span><br><span class="line">id[i] = qID;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析:   find( )方法是很快的,   因为他只访问数组一次,   而union方法则每次都要遍历一次数组,   所以该版本无法处理大型问题;   具体而言,   union方法要调用两次find方法,   并且在最差情况下,   要遍历并改变N - 1个数组元素,   在最好情况下,   要遍历并改变1个数组元素,   所以union方法访问数组的次数为(N + 3)~(2N + 1),   假如调用union方法直到最后只剩下一个连通分量,   至少调用N - 1次union方法,   则quick-find版本的时间复杂度为N<sup>2</sup>;   </p><p>这种算法面临的最坏情况就是挨个儿合并,   也就是0和1合并,   1和2合并,   到最后,   8和9合并时出现下面这种情况,   意味着要改变N - 1个值;   </p><p><img src="https://s2.loli.net/2022/02/03/o8cQYZbDRXaEyi6.png" alt="image-20220203180044684"></p></li></ol><h2 id="3-quick-union"><a href="#3-quick-union" class="headerlink" title="3. quick-union"></a>3. quick-union</h2><ol><li><p>算法实现</p><p>该版本改变了find方法寻找的对象,   在上一个版本中,   find(int p)方法找寻的对象为p节点的父亲节点,   或者称为pID更加达意,   而在这个版本中,   该方法找寻的对象为代表节点,   也就是说,   这个方法会不断往上寻找,   直到找到一个根节点,   而connected方法也正是对比的根节点,   而union(int p,    int q)方法如果是把p对应的集合挂在q上,   则只将id[p]=q即可;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-union</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析</p><p>在最好的情况下,   find方法仅需访问数组一次,   而最坏的情况下,   保守估计需要2N + 1次;   而union()方法,   对于0-i整数对,   而言,   访问数组的次数为2i+1次;   </p><p>证明:   union()需要两次find(),   而对于0-i整数对而言,   find()方法访问数组的次数为i次,   因为根据下列代码,   p在除了最后一个位置的每一个位置上看似都需要访问数组两次才可以跳到下一个位置,   但是由于while循环中经过编译的代码对id[p]的第二次引用通常都不会访问数组,   所以p在每一个位置上访问数组的次数都是1,   find()方法访问数组的次数为i,   而union()方法,   对于不处于同一集合的两个根节点,   在最后是需要把他们合并在一起的,   所以又需要访问一次数组,   union()方法总共访问数组2i+1次,   证毕;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p != id[p]) p = id[p];   </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/04/5rNfDanI92LjKOR.png" width="500"><p>将0,    1,    2…N-1这N个数,   按照0-1,   0-2,   0-3…0-(N-1)的顺序,   也就是最坏的情况连接起来,   由于每次都是调用union()方法,   所以总共的访问数组次数为3 + 5 + 7 + … + 2N-1 ~ N<sup>2</sup>;   而union方法和find方法本身的时间复杂度都为O(M),   M为树的高度;   </p><p>该版本的最坏情况为挨个合并,   如下图;</p><img src="https://s2.loli.net/2022/02/04/DiUd59zhrflLCc1.png" width="200"/></li></ol><h2 id="4-加权quick-union"><a href="#4-加权quick-union" class="headerlink" title="4. 加权quick-union"></a>4. 加权quick-union</h2><ol><li><p>算法实现</p><p>quick-union版本的缺点在于,   集合合并时是随意的,   而加权的意思就是让合并这个过程是有选择的,   换句话说,   就是实现小集合合并到大集合;   而具体的实现是通过一个size[]数组来表示每个集合的大小;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size[pRoot] &gt;= size[qRoot]) &#123;</span><br><span class="line">id[qRoot] = pRoot;</span><br><span class="line">size[pRoot] += size[qRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">size[qRoot] += size[pRoot];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析</p><p>由于在合并集合时会进行集合大小的判定,   所以该版本的最坏情况一定是合并的任意两个集合大小都相等,   如下图;   树的高度最大为log<sub>2</sub>N(根节点的高度为0;   </p><img src="https://s2.loli.net/2022/02/04/e9wSR342bps85f6.png" width="400"></li></ol><h2 id="5-使用路径压缩的quick-union"><a href="#5-使用路径压缩的quick-union" class="headerlink" title="5. 使用路径压缩的quick-union"></a>5. 使用路径压缩的quick-union</h2><p>只需要在find里使用一个容器装住向上查找根节点的那条路径上的点,   并把这些点的父亲节点设置为根节点即可;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">iHelp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">help[iHelp++] = p;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (iHelp &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">id[help[iHelp--]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;本书详细阐述了并查集的提出与优化;   从提出到找到最优解,   并查集共经历了四个版本:   quick-find,   quic</summary>
      
    
    
    
    <category term="算法第四版" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
  </entry>
  
  <entry>
    <title>算法第四版_1.5_练习</title>
    <link href="http://example.com/2022/02/02/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-lian-xi/"/>
    <id>http://example.com/2022/02/02/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-lian-xi/</id>
    <published>2022-02-02T04:59:50.000Z</published>
    <updated>2022-02-05T13:50:38.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-题目1-5-1"><a href="#1-题目1-5-1" class="headerlink" title="1. 题目1.5.1"></a>1. 题目1.5.1</h1><p>使用quick-find,   依次对(9, 0), (3, 4), (5, 8), (7, 2), (2, 1), (5, 7), (0, 3), (4, 2)调用union方法,   打印出每一步的id[]和访问数组的次数;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">section5_2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> access;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">access = <span class="number">0</span>;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-find</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pID = find(p);</span><br><span class="line"><span class="keyword">int</span> qID = find(q);</span><br><span class="line">System.out.println(<span class="string">&quot;\r\n(&quot;</span> + p + <span class="string">&quot;, &quot;</span> + q + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pID == qID) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pID) &#123;</span><br><span class="line">id[i] = qID;</span><br><span class="line">access++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Times to access array id[]: &quot;</span> + (access + <span class="number">2</span> + <span class="number">10</span>)</span><br><span class="line">+ <span class="string">&quot; (2 at 2* find(), 10 at going through array id[], &quot;</span> + access + <span class="string">&quot; for updating parents)&quot;</span>);</span><br><span class="line">access = <span class="number">0</span>;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">UF uf = <span class="keyword">new</span> UF(N);</span><br><span class="line">uf.union(<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">uf.union(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(9, 0)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 3 4 5 6 7 8 0 </span><br><span class="line">(3, 4)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 5 6 7 8 0 </span><br><span class="line"></span><br><span class="line">(5, 8)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 8 6 7 8 0 </span><br><span class="line"></span><br><span class="line">(7, 2)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 8 6 2 8 0 </span><br><span class="line"></span><br><span class="line">(2, 1)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 1 4 4 8 6 1 8 0 </span><br><span class="line"></span><br><span class="line">(5, 7)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 1 4 4 1 6 1 1 0 </span><br><span class="line"></span><br><span class="line">(0, 3)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 4 1 1 4 4 1 6 1 1 4 </span><br><span class="line"></span><br><span class="line">(4, 2)</span><br><span class="line">Times to access array id[]: 16 (2 at 2* find(), 10 at going through array id[], 4 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 1 1 1 1 1 1 6 1 1 1 </span><br></pre></td></tr></table></figure><h1 id="2-题目1-5-2"><a href="#2-题目1-5-2" class="headerlink" title="2. 题目1.5.2"></a>2. 题目1.5.2</h1><ol><li><p>题目</p><p>使用quick-union,   依次对(9, 0), (3, 4), (5, 8), (7, 2), (2, 1), (5, 7), (0, 3), (4, 2)调用union方法,   打印出最终结果和森林;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_1_5_2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">public</span> Node left;</span><br><span class="line"><span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">private</span> Node[] nodes;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;Node&gt; list;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">nodes = <span class="keyword">new</span> Node[N];</span><br><span class="line">count = N;</span><br><span class="line">list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">Node curNode = <span class="keyword">new</span> Node(i);</span><br><span class="line">nodes[i] = curNode;</span><br><span class="line">list.add(curNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method of quick-union</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line"><span class="keyword">if</span> (nodes[qRoot].left == <span class="keyword">null</span>) &#123;</span><br><span class="line">nodes[qRoot].left = nodes[pRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodes[qRoot].right == <span class="keyword">null</span>) &#123;</span><br><span class="line">nodes[qRoot].right = nodes[pRoot];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Node cur : list) &#123;</span><br><span class="line">printTree(cur);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">printInOrder(head, <span class="number">0</span>, <span class="string">&quot;H&quot;</span>, <span class="number">17</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInOrder</span><span class="params">(Node head, <span class="keyword">int</span> height, String to, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">printInOrder(head.right, height + <span class="number">1</span>, <span class="string">&quot;v&quot;</span>, len);</span><br><span class="line">String val = to + head.value + to;</span><br><span class="line"><span class="keyword">int</span> lenM = val.length();</span><br><span class="line"><span class="keyword">int</span> lenL = (len - lenM) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> lenR = len - lenM - lenL;</span><br><span class="line">val = getSpace(lenL) + val + getSpace(lenR);</span><br><span class="line">System.out.println(getSpace(height * len) + val);</span><br><span class="line">printInOrder(head.left, height + <span class="number">1</span>, <span class="string">&quot;^&quot;</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSpace</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">String space = <span class="string">&quot; &quot;</span>;</span><br><span class="line">StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">buf.append(space);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">UF uf = <span class="keyword">new</span> UF(N);</span><br><span class="line">System.out.println(<span class="string">&quot;0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">uf.union(<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><p>打印函数printTree( )是用来打印二叉树的,   而并查集生成的森林里的树很有可能是多叉树,   所以最后的结果需要分析后重画;   </p><img src="https://s2.loli.net/2022/02/05/TYoreUtVXCF1PAc.png" width="400"><p>由于最后时刻,   id[4] = 1,   所以1是一颗三叉树,   因而要重新画,   结果如下;   </p><img src="https://s2.loli.net/2022/02/05/3TwJ9gGedvmfuBQ.png" width="400"></li></ol><h1 id="3-题目1-5-3-题目1-5-4"><a href="#3-题目1-5-3-题目1-5-4" class="headerlink" title="3. 题目1.5.3,   题目1.5.4"></a>3. 题目1.5.3,   题目1.5.4</h1><p>略;   </p><h1 id="5-题目1-5-5"><a href="#5-题目1-5-5" class="headerlink" title="5. 题目1.5.5"></a>5. 题目1.5.5</h1><ol><li><p>题目</p><p>一台计算机一秒能够处理10<sup>9</sup>条指令,   估计quick-find算法解决含有10<sup>9</sup>个触点和10<sup>6</sup>条连接的动态连通性问题所需要的时间;   假设for循环每一次迭代需要执行10条机器指令;   </p></li><li><p>答案</p><p>初始化过程大约需要10.9<sup>10</sup>条指令,   其中10<sup>9</sup>条指令用于给数组id[]赋初值,   10<sup>9 </sup>* 10 = 10<sup>10</sup>条指令用于for循环的迭代;   每个union方法的for循环都需要迭代N次,   每次迭代都需要访问一次数组,   而且还需要for循环的10条机器命令,   又因为调用了10<sup>6</sup>次union,   所以总共</p><center>10<sup>6</sup> * 10<sup>9</sup> * (10 + 1) ≈ 11 * 10<sup>15</sup></center><p>条指令;   所以总共大约需要执行11 * 10<sup>15</sup>条指令,   计算机一秒10<sup>9</sup>条指令,   共需要11 * 10<sup>6</sup>秒,   也就是127天;   </p></li></ol><h1 id="6-题目1-5-6"><a href="#6-题目1-5-6" class="headerlink" title="6. 题目1.5.6"></a>6. 题目1.5.6</h1><ol><li><p>题目</p><p>使用加权quick-union方法完成题目1.5.5</p></li><li><p>答案</p><p>分析加权quick-union,   初始化过程需要访问数组2N次,   共需1.2 * 10<sup>10</sup>条指令,   find方法有一个for循环,   一次迭代需要的命令数四舍五入为1    0,   假设树高都为log<sub>2</sub>N ≈ 30,   则find方法需要的命令数为300;   union方法仍然包含两个find方法,   加上该方法剩下杂七杂八的访问,   一共大致需要600次,   所以总共为</p><center>10<sup>6</sup> * 600  + 1.2 * 10<sup>10</sup> = 1.28 * 10<sup>10</sup></center><p>条指令;   所以只需要13秒即可完成,   与quick-find版本形成鲜明对比;   </p></li></ol><h1 id="7-题目1-5-7"><a href="#7-题目1-5-7" class="headerlink" title="7.题目1.5.7"></a>7.题目1.5.7</h1><ol><li><p>题目</p><p>完善quick-find和quick-union;   </p></li><li><p>答案</p><p>在前面的1.5.1和1.5.2已经完善过了;   </p></li></ol><h1 id="8-题目1-5-8"><a href="#8-题目1-5-8" class="headerlink" title="8. 题目1.5.8"></a>8. 题目1.5.8</h1><ol><li><p>题目</p><p>用一个反例说明下面的quick-find算法的union方法是错的;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connected(p, q)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">        <span class="comment">//将p的分量重定向到q的分量</span></span><br><span class="line">        <span class="keyword">if</span>(id[i] == id[p]) id[i] = id[q];</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>答案</p><p>这种写法和标准写法的区别在于,   标准写法用了两个变量提前记录id[p]和id[q],   问题在于,   当进行到某一步,   把某两个元素p和q传入union方法,   将p的分量重定向到q的分量时,   如果p不为他那个集合里的最后一个元素,   那么遍历到p时,   id[p]将会变成id[q],   而p之后的包含在p一开始呆着的集合里的元素就不会改变成id[q],   因为那时id[p]已经改变,   他们的id[i]不会再等于id[p],   如下面的例子,   1和2都属于0,   3和5还有6都属于4,   现在把1和3传入union中,   如果是上面的写法,   0和1的id[i]都会顺利地变成4,   但id[1]已经等于4了,   下一个原本应该变成4的id[2]不等于4,   所以他还会继续保持为0;  </p><img src="https://s2.loli.net/2022/02/05/QrFV3SxI8PmdBMN.png" width="400"> <p>这个霸哥的治标级解决办法是想办法每次传入的需要重定向的元素都是这个集合里的最后一个元素,   治本级解决办法是用一个变量来提前记录一下需要重定向的集合的值,   以免存放这个值的内存在某个时刻刷新成了其他值;   不过只需要一个额外变量来标记需要重定向的集合的值即可,   不需要另外一个来标记需要重定向到的值,   所以union可以像下面这样写;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connected(p, q)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> pID = id[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">        <span class="comment">//将p的分量重定向到q的分量</span></span><br><span class="line">        <span class="keyword">if</span>(id[i] == pID) id[i] = id[q];</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="9-题目1-5-9"><a href="#9-题目1-5-9" class="headerlink" title="9. 题目1.5.9"></a>9. 题目1.5.9</h1><ol><li><p>题目</p><p>判断下面的数组是否会是加权quick-union得到的树;   </p><p><img src="https://s2.loli.net/2022/02/05/fs5q7gU96obYIwe.png" width="700"></img></p></li><li><p>答案</p><p>不可能,   得到的树如下图,   加权quick-union得到的树高度最大为3,   </p><center>log<sub>2</sub>N(向下取整) = 3</center><p>但这棵树有4米高,   显然不对啦;   原因其实出在1-3-5-4-8那条树枝,   最差情况是已经合并的两个点和已经合并的三个点合并,   但那样也会是小并大,   也就是那两个点直接连在三个点的根节点上,   </p><p><img src="https://s2.loli.net/2022/02/05/dZvMxI1HBalQ5eN.png" width="200"></img></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-题目1-5-1&quot;&gt;&lt;a href=&quot;#1-题目1-5-1&quot; class=&quot;headerlink&quot; title=&quot;1. 题目1.5.1&quot;&gt;&lt;/a&gt;1. 题目1.5.1&lt;/h1&gt;&lt;p&gt;使用quick-find,   依次对(9, 0), (3, 4), (5, 8</summary>
      
    
    
    
    <category term="算法第四版题目" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88%E9%A2%98%E7%9B%AE/"/>
    
    
  </entry>
  
</feed>
