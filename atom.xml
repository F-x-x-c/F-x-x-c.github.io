<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aegis</title>
  
  <subtitle>Aegis Curiser</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-12T14:09:18.921Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Deng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringIoC容器的xml配置使用</title>
    <link href="http://example.com/2022/03/12/spring/springioc-rong-qi-de-xml-pei-zhi-shi-yong/"/>
    <id>http://example.com/2022/03/12/spring/springioc-rong-qi-de-xml-pei-zhi-shi-yong/</id>
    <published>2022-03-12T11:30:50.000Z</published>
    <updated>2022-03-12T14:09:18.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-工厂方法的使用"><a href="#1-工厂方法的使用" class="headerlink" title="1. 工厂方法的使用"></a>1. 工厂方法的使用</h1><p>创建一个类PersonFactory,   在这个类里写一个方法,   该方法创建一个Person的子类Son并返回;   在配置文件里将PersonFactory注入,   然后创建person的Bean,   在Bean里需要指定额外的两个参数,   factory-bean指的是工厂方法的Bean,   factory-method指的是工厂方法Bean对应的创建对象的那个方法;   </p><p>要注意的是,   由于创建的是Person的Bean,   所以createPersonMethod的返回值只能是Person;   </p><h1 id="2-自动注入"><a href="#2-自动注入" class="headerlink" title="2. 自动注入"></a>2. 自动注入</h1><ol><li><p>byType</p><p>根据类型去自动匹配,   有多个相同的类型就会报错;   </p></li><li><p>byName          @test07</p><p>根据类的名称去匹配,   这里的名称是类中的setter方法的成员变量名;   </p></li><li><p>constructor    @test08</p><p>根据构造器去匹配,   首先会根据构造函数的形参名称去匹配,   如果匹配不上,   则会根据类型去匹配,   如果存在多个相同类型,   不会像byType那样报错,   而是不会注入成功;   需要注意,   形参列表中的参数在配置文件中必须都有对应的Bean,   才可以完成注入;   </p></li><li><p>当存在多个相同类型的Bean,   可以通过设置主要的Bean的primary为true的方式,   或者其他次要的Bean的autowire-candidate为false的放弃自动注入的权限,   来配置主要的那个Bean; </p></li></ol><h1 id="3-Bean生命周期回调"><a href="#3-Bean生命周期回调" class="headerlink" title="3. Bean生命周期回调"></a>3. Bean生命周期回调</h1><p>@test09</p><ol><li><p>通过实现接口的方式进行回调</p><p>实现InitializingBean和DisposableBean两个接口,   重写他们的方法即可;   需要注意的是,   要将ioc关闭之后才可以看见afterPropertiesSet()的调用;   </p></li><li><p>通过Bean标签中的关键字来回调</p><p>在配置文件中的Bean里面通过init-method和destory-method来指定类里的两个方法,   实现回调;   </p></li></ol><h1 id="4-配置第三方Bean"><a href="#4-配置第三方Bean" class="headerlink" title="4. 配置第三方Bean"></a>4. 配置第三方Bean</h1><p>@test10</p><p>导入阿里的德鲁伊包,   在Bean里配置他的四个属性,   属性的值可以通过.properties文件来设置,   而该文件需要使用placeholder引用进配置文件;   </p><p>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-工厂方法的使用&quot;&gt;&lt;a href=&quot;#1-工厂方法的使用&quot; class=&quot;headerlink&quot; title=&quot;1. 工厂方法的使用&quot;&gt;&lt;/a&gt;1. 工厂方法的使用&lt;/h1&gt;&lt;p&gt;创建一个类PersonFactory,   在这个类里写一个方法,   该方法创</summary>
      
    
    
    
    <category term="Spring" scheme="http://example.com/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Chapter1</title>
    <link href="http://example.com/2022/03/12/queueingtheory/chapter1/"/>
    <id>http://example.com/2022/03/12/queueingtheory/chapter1/</id>
    <published>2022-03-12T06:58:33.000Z</published>
    <updated>2022-03-12T07:00:12.542Z</updated>
    
    
    
    
    <category term="Queueing" scheme="http://example.com/categories/Queueing/"/>
    
    
  </entry>
  
  <entry>
    <title>Chapter1</title>
    <link href="http://example.com/2022/03/12/queueingtheory/preface/"/>
    <id>http://example.com/2022/03/12/queueingtheory/preface/</id>
    <published>2022-03-12T06:58:33.000Z</published>
    <updated>2022-03-12T11:07:38.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h1><p>第一部分介绍排队论的基本术语,   模型和性能指标;   第二部分为概率复习,   包括…很多东西;   第三部分介绍一些适用于优秀排队系统的简单法则;   第四部分介绍马尔科夫链在计算机系统分析中的应用;   第五部分扩展了马尔可夫理论,   允许分析更复杂的网络;   第六部分介绍了使用高变异性分布取代指数分布的技术;   第七部分介绍调度;   </p><h1 id="不认识的单词"><a href="#不认识的单词" class="headerlink" title="不认识的单词"></a>不认识的单词</h1><p>computer- ‘oriented    面向计算机的</p><p>还有很多…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本书结构&quot;&gt;&lt;a href=&quot;#本书结构&quot; class=&quot;headerlink&quot; title=&quot;本书结构&quot;&gt;&lt;/a&gt;本书结构&lt;/h1&gt;&lt;p&gt;第一部分介绍排队论的基本术语,   模型和性能指标;   第二部分为概率复习,   包括…很多东西;   第三部分介绍一些适</summary>
      
    
    
    
    <category term="Queueing" scheme="http://example.com/categories/Queueing/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/12/readyou/"/>
    <id>http://example.com/2022/03/12/readyou/</id>
    <published>2022-03-12T06:55:52.493Z</published>
    <updated>2022-03-12T06:55:52.493Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter3</title>
    <link href="http://example.com/2022/03/08/csapp/csapp-chapter3/"/>
    <id>http://example.com/2022/03/08/csapp/csapp-chapter3/</id>
    <published>2022-03-08T12:09:50.000Z</published>
    <updated>2022-03-12T06:54:28.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-程序编码"><a href="#1-程序编码" class="headerlink" title="1. 程序编码"></a>1. 程序编码</h1><p>本小结基于C语言到可执行文件的变化过程,   稍微深入地讲解了各个过程;   </p><ol><li><p>首先涉及Linux的一个指令</p><center>linux> gcc -Og -o p p1.c p2.c</center><p>p1.c和p2.c是要编译的文件,   -Og是一种优化策略,   .i文件被编译器编译为汇编代码时,   可以选择不同的汇编代码实现,   -O1和-O2这两种优化策略的目的是为了提高汇编代码的效率,   但这降低了汇编代码的可读性,   而-Og遵循了C源程序的整体结构,   易于阅读;   -O p是指生成的可执行文件的名字为p;   然后讲了一些基本的汇编知识,   或者说是基本常识;   </p></li><li><p>再涉及另外一个命令</p><center>linux> gcc -Og -S mstore.c</center><p>意思是在把mstore.c编译并生成mstore.s后就停下;   </p></li><li><p>最后反编译了一个C源文件和一个可执行二进制文件,   分析了一下他们有什么不同;   第一个不同在第四行,   源反汇编结果显示的是还运行到这一行代码,   所以显示的是函数名multstore加上一个偏移量,   而二反汇编的第四行是直接显示mult2的地址,   意思就是该地址已经被计算出来了;   第二个不同就是地址的不同,   二反汇编的代码表示链接器将这个程序加载到了内存里;   第三个不同在二反汇编的第8~9行,   比源反汇编多出了两个nop,   起主要作用是进行内存填充,   可能和缓存行有关,   因为CPU读取主存中的数据时的单位是缓存行,   进行16字节对齐,   可以避免CPU在读取下一个缓存行,   也就是另外的程序时,   不需要再次读取本缓存行;   </p><p><img src="https://s2.loli.net/2022/03/10/tmAaRYZjld7qFhr.png" width="800"></img></p><p><img src="https://s2.loli.net/2022/03/10/xJAonHZ9PEuSKTW.png" width="800"></img></p></li></ol><h1 id="2-数据格式"><a href="#2-数据格式" class="headerlink" title="2. 数据格式"></a>2. 数据格式</h1><p>Intel使用1”字”表示16比特,   汇编的操作符后面会有一个表示操作数大小的符号后缀,   注意整型和双精度使用的是同一个字母—L,   不会产生歧义的原因是,   浮点数拥有一套不同的指令,   使用的寄存器也和整型不同;   </p><h1 id="3-访问数据"><a href="#3-访问数据" class="headerlink" title="3. 访问数据"></a>3. 访问数据</h1><p>本小节介绍了寄存器的简单使用,   其中%rsp用于指定运行时栈的结束位置;   而其他的寄存器的使用规则则相对比较灵活;   </p><p>操作数,   也就是操作提示符后面的那个东西,   他有3种格式,   分别是立即数,   寄存器和内存;   立即数用$x的形式来表示,   他的值是x;   寄存器用r<sub>a</sub>来表示,   他的值是r<sub>a</sub>里面存储的值,   内存的表示方式有很多种,   其中最复杂的由4个部分组成—Imm(r<sub>b </sub> ,  r<sub>i</sub> ,  s),   分别是立即偏移量,   基址寄存器,   索引寄存器和比例因子,   计算出的地址为</p><center>Imm + R[r<sub>b </sub>] + R[r<sub>i</sub>] * s</center><p>而其他的内存表示方式只是这种表示方式的变种;   M{ Imm + R[r<sub>b </sub>] + R[r<sub>i</sub>] * s }表示取得那个地址的值;   </p><h1 id="N-不认识的单词"><a href="#N-不认识的单词" class="headerlink" title="N. 不认识的单词"></a>N. 不认识的单词</h1><p>convention    [kənˈvenʃn]    <strong>规则</strong></p><p>annotation     [ænəˈteɪʃ(ə)n]    注释</p><p>denote 表示</p><p>ambiguity    歧义</p><p>scale    [skeɪl] 比例</p><p>notation    标记法,   表示法</p><p>arbitrary 任意的</p><p>reference    引用</p><p>syntax    [ˈsɪntæks]    语法</p><p>‘ indicated 指定的</p><p>perform    执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-程序编码&quot;&gt;&lt;a href=&quot;#1-程序编码&quot; class=&quot;headerlink&quot; title=&quot;1. 程序编码&quot;&gt;&lt;/a&gt;1. 程序编码&lt;/h1&gt;&lt;p&gt;本小结基于C语言到可执行文件的变化过程,   稍微深入地讲解了各个过程;   &lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
  <entry>
    <title>通信原理复习</title>
    <link href="http://example.com/2022/03/01/tong-xin-yuan-li/tong-xin-yuan-li-fu-xi/"/>
    <id>http://example.com/2022/03/01/tong-xin-yuan-li/tong-xin-yuan-li-fu-xi/</id>
    <published>2022-03-01T06:10:41.000Z</published>
    <updated>2022-03-02T06:52:22.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字基带"><a href="#数字基带" class="headerlink" title="数字基带"></a>数字基带</h2><ol><li>遵循一个公式</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数字基带&quot;&gt;&lt;a href=&quot;#数字基带&quot; class=&quot;headerlink&quot; title=&quot;数字基带&quot;&gt;&lt;/a&gt;数字基带&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;遵循一个公式&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="通信原理" scheme="http://example.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构018_动态规划1</title>
    <link href="http://example.com/2022/02/19/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-018-dong-tai-gui-hua-1/"/>
    <id>http://example.com/2022/02/19/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-018-dong-tai-gui-hua-1/</id>
    <published>2022-02-19T08:56:10.000Z</published>
    <updated>2022-02-28T14:17:43.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-RobotWalk"><a href="#1-RobotWalk" class="headerlink" title="1. RobotWalk"></a>1. RobotWalk</h1><ol><li><p>题目</p><p>一个机器人在一个一维数组上走,   他从某个点出发,   想要去到某个点上,   给定他的初始位置,   要走的步数,   目标位置,   还有能走的总范围(1 ~ n);   </p></li><li><p>解法1:   暴力解</p><p>(1)分析</p><p>该解的整体思路为,   不断地去做尝试,   当走完最后一步时,   判断cur是否等于目标aim,   当等于时,   返回1,   不等时,   返回0;   当没有到达最后一步时,   有三种情况,   一种情况是到达位置1时,   只能走到2,   第二种情况是到达末尾时,   只能往左走,   第三种情况是在中间时,   需要收集往左和往右的尝试;   </p><p>(2)代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, start, aim, rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">way1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cur, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cur == aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, <span class="number">2</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line"><span class="keyword">return</span> way1(n, n - <span class="number">1</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> way1(n, cur - <span class="number">1</span>, aim, rest - <span class="number">1</span>) + way1(n, cur + <span class="number">1</span>, aim, rest - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2:   基本动态规划</p><p>(1)分析</p><p>上述解法会产生重复的状态,   如下图的7  5  2状态,   由于重复的状态都是一样的,   所以可以用一个数组来存储已经被计算过的状态,   当下一次再碰到已经被计算过的状态时,   可以从中直接获取,   而不需要重新计算;   </p><p><img src="https://s2.loli.net/2022/02/21/9tn2uY17a6Dhkdw.png" width="500"></img></p><p>(3)具体实现</p><p>维持一个数组dp,   如果碰上了被处理过的状态,   则直接返回,   如果遇到没有被处理过的状态,   则进行以下判断:   如果当前剩余步数为0,   则设置结果为1;   然后再处理两种极端情况,   一种是cur走到1时,   只能往右走,   去搜集往右走的情况,   另一种是走到末尾时,   只能往左走;   最后处理一般情况,   也就是去搜集往左走和往右走的结果,   把他们加起来;   最后设置该状态下的dp表,   把结果返回即可;   </p><p>(2)代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k + <span class="number">1</span>; j++) &#123;</span><br><span class="line">dp[i][j] = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> way2(n, start, aim, k, dp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">way2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> cur, <span class="keyword">int</span> aim, <span class="keyword">int</span> rest, <span class="keyword">int</span>[][] dp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当碰到处理过的</span></span><br><span class="line"><span class="keyword">if</span> (dp[cur][rest] != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> dp[cur][rest];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">res = cur == aim ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">res = way2(n, <span class="number">2</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line">res = way2(n, n - <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = way2(n, cur - <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp) + way2(n, cur + <span class="number">1</span>, aim, rest - <span class="number">1</span>, dp);</span><br><span class="line">&#125;</span><br><span class="line">dp[cur][rest] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法3:   进阶动态规划</p><p>对于上述解法而言,   数组dp有他的进阶含义,   (n,   k)表示(第n个位置,   还剩k步),   依据上述代码:   0位置在本题里并未使用,   所以第一行不赋值;   当步数为0时,   只有aim位置为1,   其他都为0,   也就是第一列除了(aim,   0)外的位置都为0;   当cur为1时,   res为状态(2,   rest - 1)的返回值,   也就是说,   数组的第二排第二个元素(包括在内)往右的所有元素都依赖于他的左下角的元素;   而数组的最后一排同理,   依赖于他们的左上角的元素;   对于普通的元素,   则同时依赖于他们的左上角和左下角元素,   所以整个数组的依赖关系如下图;   </p><p><img src="https://s2.loli.net/2022/02/28/useRkMKOCZy8pNF.png" width="600"></img></p><p>总体来说,   给定目标aim,   总长n以及要走的步数k,   即可规划出整个dp数组,   而如果再给定初始坐标cur,   即可确定出最终的位置,   取到这个位置的值,   返回即可;   剩下的工作就只有装填该数组了,   因为每一行依赖于别的行,   所以只能按列装填,   代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">walk3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start, <span class="keyword">int</span> aim, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">dp[aim][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">dp[<span class="number">1</span>][j] = dp[<span class="number">2</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">        dp[n][j] = dp[n - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[start][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-CardInLine"><a href="#2-CardInLine" class="headerlink" title="2. CardInLine"></a>2. CardInLine</h1><ol><li><p>题目</p><p>有一副写着正数的牌,   有两个人你一张我一张地拿牌,   但是只能拿去最左边或者最右边的牌,   这两个人的拿牌策略都是最优解,   求获胜者的分数;   </p></li><li><p>解法1:   暴力递归</p><p>对于每个[L,   R]而言,   都存在先手和后手,   如果一个人A在这个[L,   R]里先手拿了牌,   那另外一个人B就会在这个范围内后手拿牌,   而B相当于在[L,   R - 1]或者[L - 1,   R]上先手拿牌,   那么A就会在这个范围内后手拿牌,   所以这是一个交替先后手的过程;   而对于具体的实现,   先手函数:   只剩一张牌了,   返回这张牌的值,   否则,   获取左边牌+在[L+1,   R]上的后手函数的值,   以及右边牌+在[L,   R+1]上的后手函数的值,   取他们两的最大值;   后手函数:   只剩一张牌了,   因为是后手,   所以返回0,   否则,   获取左边牌+在[L+1,   R]上的先手函数的值,   以及右边牌+在[L,   R+1]上的先手函数的值,   取他们的最小值;   这里涉及到这题的隐含条件,   即,   这题里的两人没有任何的勾心斗角,   在牌发下来的一瞬间,   胜负就已经定了,   而在最后,   两个人都会获得这副牌先手或后手的最大值;   一个人先手拿了一张牌,   在拿第二张牌时变成了后手,   别人也想的是拿最大啊,   所以他在拿第二张牌时会被迫选择小的,   所以为最小值,   代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">win1</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Math.max(f1(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>), g1(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123;</span><br><span class="line"><span class="keyword">return</span> arr[L];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.max(arr[L] + g1(arr, L + <span class="number">1</span>, R), arr[R] + g1(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">g1</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (L == R) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.min(f1(arr, L + <span class="number">1</span>, R), f1(arr, L, R - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2:   动态规划</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-RobotWalk&quot;&gt;&lt;a href=&quot;#1-RobotWalk&quot; class=&quot;headerlink&quot; title=&quot;1. RobotWalk&quot;&gt;&lt;/a&gt;1. RobotWalk&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;一个机器人在一个一维数组上</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>通信原理第一章_绪论</title>
    <link href="http://example.com/2022/02/11/tong-xin-yuan-li/tong-xin-yuan-li-di-yi-zhang-xu-lun/"/>
    <id>http://example.com/2022/02/11/tong-xin-yuan-li/tong-xin-yuan-li-di-yi-zhang-xu-lun/</id>
    <published>2022-02-11T15:40:50.000Z</published>
    <updated>2022-02-11T15:52:40.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-4-信息的度量"><a href="#1-4-信息的度量" class="headerlink" title="1.4 信息的度量"></a>1.4 信息的度量</h1><ol><li><p>信息量</p><p>信息量的大小与该事件发生的可能性有关,   公式为</p><p><img src="https://s2.loli.net/2022/02/11/7Mn3ed6LqHlAvIE.png" width="400"></img></p><p>信息量的单位与底数a有关,   a为2时单位为bit,   a为e时单位为nat;   </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-4-信息的度量&quot;&gt;&lt;a href=&quot;#1-4-信息的度量&quot; class=&quot;headerlink&quot; title=&quot;1.4 信息的度量&quot;&gt;&lt;/a&gt;1.4 信息的度量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;信息量&lt;/p&gt;
&lt;p&gt;信息量的大小与该事件发生的可能性有关,   </summary>
      
    
    
    
    <category term="通信原理" scheme="http://example.com/categories/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter2</title>
    <link href="http://example.com/2022/02/07/csapp/csapp-chapter2/"/>
    <id>http://example.com/2022/02/07/csapp/csapp-chapter2/</id>
    <published>2022-02-07T13:43:14.000Z</published>
    <updated>2022-03-08T12:09:25.012Z</updated>
    
    <content type="html"><![CDATA[<p>这是”程序结构和执行”的第一章</p><h1 id="1-本章目的"><a href="#1-本章目的" class="headerlink" title="1. 本章目的"></a>1. 本章目的</h1><p>让程序员在写程序时避免因为数据溢出等问题产生的霸哥;   </p><h1 id="2-信息存储"><a href="#2-信息存储" class="headerlink" title="2. 信息存储"></a>2. 信息存储</h1><h2 id="2-1-信息的表示方法"><a href="#2-1-信息的表示方法" class="headerlink" title="2.1 信息的表示方法"></a>2.1 信息的表示方法</h2><p>通常在计算机中用十六进制来表示数据;   </p><h2 id="2-2-小端法与大端法"><a href="#2-2-小端法与大端法" class="headerlink" title="2.2 小端法与大端法"></a>2.2 小端法与大端法</h2><ol><li><p>概念</p><p>将一个十六进制数分段,   两个数字为一组;   大端法为数据的自然顺序和内存地址增大的方向一致,   小端法则相反;   </p></li><li><p>产生的问题</p><p>(1)大端机和小端机存储数据的顺序不同,   所以他们之间如果需要通过网络进行通信的话,   是需要一定的信息转化规则的,   也就是大端机里爱咋搞咋搞,   但是把信息传到网络上时,   需要转化为网络传输规定的格式,   信息传到小端机后,   小端机把信息转化为小端法的形式,   然后爱怎么搞怎么搞;   </p><p>(2)在阅读机器级代码时,   如果不了解小端法,   是很难读懂小端机的机器代码的,   比如下图,   左边从01到00的十六进制字符序列为右边那一堆东西的机器级表示,   意思是要把寄存器eax里的东西加到地址为[0x200b43 + rip]所对应的存储单元当中;   而去掉字符序列最后的00,   再把那后面几个数字倒过来写,   恰好是200b43,   也就是地址的偏移量;   所以这是一台小端机;   </p><p><img src="https://s2.loli.net/2022/02/10/pWHh8Iqv3NLFQwS.png" width="800"></img></p></li></ol><h2 id="2-3-各种运算"><a href="#2-3-各种运算" class="headerlink" title="2.3 各种运算"></a>2.3 各种运算</h2><ol><li><p>布尔运算</p><p>在C语言里称为位级运算,   也就是与,   或,   非,   异或(具体略),   这是一种对二进制位进行操作的运算,   最好的运算方法是把十六进制数拆成二进制数一位一位的运算;   </p></li><li><p>C语言逻辑运算</p><p>&amp;&amp;,   ||,   !,   这种运算把操作数当成非零即一来看待,   换句话说,   在运算之前,   先把操作数转换成零或者一;   </p></li><li><p>位移运算</p><p>左移只有一种,   就是不断让高位往左溢出,   同时低位补零;   而右移有两种,   算术右移和逻辑右移;   逻辑右移就是不断让低位往右溢出,   同时高位无脑补零,   而算术右移要考虑最高位,   如果最高位是1,   则不断补1,   反之则不断补零;   </p><p>注意:   </p><p>(1) C语言没有明确规定有符号数使用哪种移位方式,   但大多数机器都对有符号数使用算术移位,   但是无符号数一定是逻辑移位;   而Java具有算术移位符&gt;&gt;&gt;和逻辑移位符&gt;&gt;;   </p><p>(2) 如果移位的位数k很大,   超过了被移位数本身的位数w,   则只会移动log<sub>2</sub>w位,   实际上相当于移动(k mod w)位,   但这并不稳定,   而Java明确地按照取模运算来计算;   </p><p>(3) 在不清楚一个表达式所用到的运算符的优先级的情况下,   最好加上括号!</p></li></ol><h1 id="3-整数表示"><a href="#3-整数表示" class="headerlink" title="3. 整数表示"></a>3. 整数表示</h1><h2 id="3-1-无符号数和有符号数"><a href="#3-1-无符号数和有符号数" class="headerlink" title="3.1 无符号数和有符号数"></a>3.1 无符号数和有符号数</h2><ol><li><p>有符号数</p><p>可采用一串01字符串来对每个数进行表示,   无符号数的表示只是单纯的二进制表示法,   而有符号数的表示则是最高位为符号位,   具体来说,   最高位的数字需要乘以-2<sup>w</sup>,   然后参加二进制运算,   所以|TMin| = |TMax| + 1;   </p></li></ol><h2 id="3-2-有无符号数之间的转换"><a href="#3-2-有无符号数之间的转换" class="headerlink" title="3.2 有无符号数之间的转换"></a>3.2 有无符号数之间的转换</h2><p>强制类型转换不会改变一个数的位模式,   只会改变对这个数的解释方式,   换句话说,   强制类型转换改变的是位模式到数字的映射关系;  这和前面的指针的强制类型转换是一样的,   指针的强转并不会改变对应内存单元里的值,   而是会把该指针放入另一种映射关系进行运算;   </p><p>由于有符号数的最高位为符号位,   所以有符号数的最大值要比无符号数的小一倍,   当一个无符号数大于零并且没有超过有符号数的最大值时,   转成有符号数相当于没转,   当超过了就需要减去一个2<sup>w</sup>;   具体的数学推导并没有太大意义;   另外在C语言中,   当需要运算的两个数一个为有符号一个为无符号时,   C语言会隐式地把有符号转换为无符号,   然后再进行运算;   </p><h2 id="3-2-扩展数字的位"><a href="#3-2-扩展数字的位" class="headerlink" title="3.2 扩展数字的位"></a>3.2 扩展数字的位</h2><p>无符号数字的扩展方式为在数字的位模式前一直加零,   直到扩展完成,   而有符号数字的扩展方式为在数字的位模式前一直添加与标志位相同的数字,   直到扩展完成,   <strong>这样做可以保证扩展前后不同的位模式表示的数字是相同的</strong>;   如下代码通过短整型到整型,   无符号短整型到无符号整型的位扩展来举例,   本人的机子是小端机,   所以在显示比特位的时候采用了倒序的方式输出;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* byte_pointer;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes_with_big_endian</span><span class="params">(byte_pointer start, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">short</span> sx = <span class="number">-12345</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> usx = sx;</span><br><span class="line">    <span class="keyword">int</span> x = sx;</span><br><span class="line">    <span class="keyword">unsigned</span> ux = usx;</span><br><span class="line">    <span class="comment">/*显示短整型的-12345*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sx = %d: &quot;</span>, sx);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;sx, <span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line">    <span class="comment">/*把相同的位模式用无符号短整型的格式显示出来*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;usx = %u: &quot;</span>, usx);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;usx, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">short</span>));</span><br><span class="line">    <span class="comment">/*对短整型的sx进行位扩展*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x = %d: &quot;</span>, x);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">/*对无符号短整型的usx进行位扩展*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ux = %u: &quot;</span>, ux);</span><br><span class="line">    show_bytes_with_big_endian((byte_pointer) &amp;ux, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的结果如下图,   usx和sx有着相同的位模式—1100 1111 1100 0111,   而x和ux分别是对sx和usx的位扩展,   由于sx的最高位为1,   x对其扩展后,   添加的是全1;   而无符号的扩展的确是直接加的0;   </p><p><img src="https://s2.loli.net/2022/03/02/jqDGvxLa97oQ1Yz.png" width="400"></img></p><p>而短整型short转为无符号整型unsigned时,   是先将数字进行位扩展,   也就是转成有符号整型,   再转成无符号整型,   就比如下面的代码,   将sx进行正常的扩展,   就如同x那样,   然后以无符号的形式去解释扩展过后的位模式,   得到ux2;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> ux2 = sx;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ux2 = %u: &quot;</span>, ux2);</span><br><span class="line">show_bytes_with_big_endian((byte_pointer) &amp;ux2, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/02/3AVYDmTHNMcLJgj.png" width="500"></img></p><h2 id="3-3-截短数字"><a href="#3-3-截短数字" class="headerlink" title="3.3 截短数字"></a>3.3 截短数字</h2><p>截短无符号数很简单,   就是直接截去高位的相应位数,   但是,   可以进行深度思考;   </p><p>假设一个数字x由i位二进制数组成,   将其截短成为拥有j位二进制数的数字y,   从二进制数的角度来看,   无符号数的截短是直接把高出来的那些位变为0,   也就是&amp;0,   而上述截短过程把[i - 1,   j]这个范围内的位全部变成了0,   也就是把高位的i - j那么多位变成了0,   也就是要与上一个高i - j位都是0,其他位都是1的数,   也就是(2<sup>j </sup> - 1),   如下图,   很显然,   这和模上2<sup>j</sup>是一回事,   所以可以得到如下结果:   </p><center>y = x mod 2<sup>j</sup></center><p><img src="https://s2.loli.net/2022/03/05/K4PDfYCaQi1tpgv.png" width="600"></img></p><p>个人认为这种证明方法比书上的更加通俗易懂,   灵感其实是来自取模运算和与运算之间的关系,   详细可以参考Java1.7源码中对哈希表的取模运算的优化;   </p><p>而有符号数的截短,   则是经过上述取模截短后,   按照无符号数转有符号数的规则进行转化;  </p><h2 id="3-4-函数getpeername的安全漏洞"><a href="#3-4-函数getpeername的安全漏洞" class="headerlink" title="3.4 函数getpeername的安全漏洞"></a>3.4 函数getpeername的安全漏洞</h2><p>从操作系统内存空间复制数据到用户空间的函数,   涉及到两个函数,   memcpy()负责将一个区域的数据复制到另外一个区域,   copy_from_kernel()涉及到一个缓冲数组kbuf,   这个数组是可以被用户空间读取的,   他有一个最大值KSIZE,   该函数传入一个空间标识和需要复制的大小maxlen,   最大只能是KSIZE,   把这些东西传入memcpy,   可以在该函数里进行数据拷贝,   拷贝到kbuf里,   如下面代码;   </p><p>而maxlen的数据类型是int,   如果说传入的maxlen是-1,   那么-1以无符号整型被传入memcpy时,   会变成一个非常大的数字,   造成用户空间读取到大量的内核空间的数据;   </p><p>改进措施为将maxlen的数据类型变为size_t;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line"><span class="keyword">void</span> *memcpy(<span class="keyword">void</span> *dest, <span class="keyword">void</span> *src, size_t n);</span><br><span class="line">#define KSIZE <span class="number">1024</span></span><br><span class="line"><span class="keyword">char</span> kbuf[KSIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy_from_kernel</span><span class="params">(<span class="keyword">void</span> *user_dest, <span class="keyword">int</span> maxlen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = KSIZE &lt; maxlen ? KSIZE : maxlen;</span><br><span class="line">    memcpy(user_dest, kbuf, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-整数运算"><a href="#4-整数运算" class="headerlink" title="4. 整数运算"></a>4. 整数运算</h1><h2 id="4-1-整数加法"><a href="#4-1-整数加法" class="headerlink" title="4.1 整数加法"></a>4.1 整数加法</h2><ol><li><p>无符号加法</p><p>假设位限制为32,   也就是说,   如果两个无符号整型相加后溢出了,   也就是结果的第33位为1的话,   需要将最高位抛弃,   而如果没有溢出,   则保持结果;   本书中也有非常具象的模型表示这种规则;   另外,   判断两个无符号整型相加后是否溢出也非常简单,   因为溢出之后的结果一定小于两个加数;   </p></li><li><p>无符号数取反</p><p>无符号数取反满足下列式子</p><p><img src="https://s2.loli.net/2022/03/03/nlKudMCJ6VQLqFX.png" width="400"></img></p></li><li><p>有符号数加法</p><p>满足下列式子</p><p><img src="https://s2.loli.net/2022/03/03/W1wBvAf5TFYIZz3.png" width="800"></img></p><p>另外,   有符号数相加后如果是正溢出,   则会变成负数;   如果是负溢出,   则会变成正数;   所以判断一个加法结果是否溢出的具体代码如下;   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sum &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !neg_over &amp;&amp; !pos_over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0x8699</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0x354</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a: %d, b: %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;not over: %d\n&quot;</span>, tAdd_ok(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一点,   对于(x + y) - x,   不论(x + y)是否溢出,   (x + y) - x始终等于y,   对应于书中的练习题2.31,   该题给出了函数tAdd_ok的一种错误实现,   错误代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Warning: This code is buggy!*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">return</span> (sum - x) == y || (sum - y) == x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有符号数的加法是模数加法,   换句话说,   这种加法是一个圈,   具有封闭性,   不论一个加法结果是否溢出,   他减去一个加数,   一定会得到另外一个加数,   所以上述代码总是会返回1;   </p><p>练习题2.32也提供了一套错误代码;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;limits.h&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tAdd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = x + y;</span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sum &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !neg_over &amp;&amp; !pos_over;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当x为正数或者0时, 减去一个最小负数, 相当于加上一个(最大正数 + 1)</span></span><br><span class="line"><span class="comment">//则一定会正向溢出, 返回0</span></span><br><span class="line"><span class="comment">//当x为负数时,减去一个最小负数, 相当于加上一个最大正数</span></span><br><span class="line"><span class="comment">//则一定不会溢出, 返回1</span></span><br><span class="line"><span class="comment">//但是如果以-y的形式传入tAdd_ok(), -y = 2^31会溢出, 变成-2^31</span></span><br><span class="line"><span class="comment">//这样的话传入的x为一个负数就会正向溢出, 传入一个正数的话就不会溢出</span></span><br><span class="line"><span class="comment">//与期望的结果相反</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tSub_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tAdd_ok(x, -y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x70004532</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x70004532</span>, INT_MIN));</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x80004532</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x80004532</span>, INT_MIN));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当y = T<sub>min</sub>时,   -y = 2<sup>31</sup>,   溢出了,   所以他会变为-2<sup>31</sup>,   那么他不管加上哪个负数都会溢出,   不管加上哪个正数都不会溢出,   但是这并不是我们所期望的,   我们期望的是在tSub_ok里,   传入-2<sup>31</sup>时,   判断x + 2<sup>31</sup>是否会发生溢出,   那就是只要x为正数,   就会发生溢出,   只要是负数,   就不会发生溢出;   但是对于其他所有的数而言,   是完全没有问题的;   这道题是希望我们注意,   有符号数的最大值和最小值是不对称的,   说的比较专业一点,   有符号数的最大值和最小值并不是互为逆元,   有符号数的最小值的逆元是他自己,   最大值的逆元可以通过取反获得;   而无符号数的最小值0,   的逆元也是他自己;   而减法正确的溢出判断代码,   也就是家庭作业2.74,   则应该不该通过tAdd_ok()来实现,   而是直接重新写一套,   代码如下;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include <span class="string">&quot;stdio.h&quot;</span></span><br><span class="line">#include <span class="string">&quot;limits.h&quot;</span></span><br><span class="line"><span class="comment">//题意: 两数相减, 如果结果溢出了就返回0, 没溢出就返回1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tSub_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果y是最小负值, 则</span></span><br><span class="line">    <span class="keyword">int</span> sub = x - y;</span><br><span class="line">    <span class="comment">//两个正数相加的结果等于负数时, 代表其正溢出了</span></span><br><span class="line">    <span class="keyword">int</span> pos_over = x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; sub &lt; <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//两个负数相加的结果等于正数时, 代表其负溢出了</span></span><br><span class="line">    <span class="keyword">int</span> neg_over = x &lt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; sub &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> !(pos_over || neg_over);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果x为负数, 减去最小值相当于加上最大值, 则一定不溢出</span></span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0xf4563456</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0xf4563456</span>, INT_MIN));</span><br><span class="line">    <span class="comment">//如果x为正数或0, 加上最大值后, 则会正向溢出变成负数</span></span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, <span class="number">0x74563456</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, tSub_ok(<span class="number">0x74563456</span>, INT_MIN));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-补码非的两种实现方法"><a href="#4-2-补码非的两种实现方法" class="headerlink" title="4.2 补码非的两种实现方法"></a>4.2 补码非的两种实现方法</h2><ol><li>对每一位求补,   然后加一;   </li><li>对最右边的1的左边的所有数求补;   </li></ol><h2 id="4-3-整数乘除"><a href="#4-3-整数乘除" class="headerlink" title="4.3 整数乘除"></a>4.3 整数乘除</h2><ol><li>整数相乘</li></ol><p>无符号数的乘法是两数相乘后模上2<sup>w</sup>,   而有符号数则是相乘后模上2<sup>w</sup>,   再转成有符号数;   因为截短,   所以有符号数和无符号数在相同位模式的前提下的乘法结果是相同的;   由下式</p><center>B2U<sub>w</sub>(<B>x</B>)  - B2T<sub>w</sub>(<B>x</B>)= x<sub>w - 1</sub>[2<sup>w - 1</sup> - (-2<sup>w - 1</sup>)] = x<sub>w - 1</sub>2<sup>w</sup></center><p>可得</p><center>T2U<sub>w</sub>(x) = B2U<sub>w</sub>(<B>x</B>) =  x + x<sub>w - 1</sub>2<sup>w</sup></center><p>等式右边没有加粗的x代表有符号数x;   然后歪比巴布一大堆证明出来了个啥我也不知道懒得管了;   </p><ol start="2"><li><p>整数相乘的优化</p><p>一个数乘以一个2的幂次数,   可以优化为该数向左移动相应的幂次数并抛弃溢出位数,   更进一步,   这个2的幂次数也可以换成一个位模式只有一连串1的数,   那么这两个数相乘可以优化为如下结果:   </p><center>(x << n) + (x << n  - 1) + ... + (x  << m)</center><p>进一步优化为如下结果:   </p><center>(x << (n + 1)) - (x << m)</center><p>其中,   n是那个数字从0开始的位模式的最高位不为零的位;   </p><p>而再进一步,   这个只能有一串1的数也可以换成是由几串1组成数字,   但是需要注意,   只能是几串1,   因为如果有很多串1的话,   还是会有过多的移位运算和加减运算;   </p></li><li><p>除以2的幂次数</p><p>实践表明,   一个数除以一个2的幂次数再向下取整的结果,   和对这个数进行相同位数的右移的结果是一样的,   而无符号数是逻辑右移,   有符号数是算术右移;   </p><p>为了保证负数取整也能向0舍入,   也就是要保证结果向上取整,   负数的移位策略应该做出调整,   也就是加上一个偏移量2<sup>k</sup> - 1:   </p><center>(x + (1 << k) - 1) >> k</center><p>总结下来,   有符号数除以2的幂次数可以简化为一句代码:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = x &lt; <span class="number">0</span> ? (x + <span class="number">1</span> &lt;&lt; k - <span class="number">1</span>) &gt;&gt; k : x &gt;&gt; k;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h2><p>本小节对C语言无符号和有符号数的四则运算以及特殊的非运算进行了较为严谨的数学推演;   </p><p>从整体来看,   整数的运算其实是一种模运算,   这是因为计算机只能表示有限的位,   而有限的位则会限制计算机表示的数的取值范围;   对于超出范围的数,   加减法采取的策略是+-2<sup>w</sup>,   这导致了无符号数和有符号数的最小值的逆元是他们自己,   而乘除法采取的是mod 2<sup>w</sup>,   也就是对溢出位直接进行截短;   为了提高乘除法的效率,   在一定条件下,   编译器会用移位来代替乘除法;   </p><p>最后,   unsigned数据类型会导致很多意想不到的漏洞,   慎用,   慎用!</p><h1 id="5-浮点数"><a href="#5-浮点数" class="headerlink" title="5. 浮点数"></a>5. 浮点数</h1><h2 id="1-浮点数表示"><a href="#1-浮点数表示" class="headerlink" title="1. 浮点数表示"></a>1. 浮点数表示</h2><p>总体来说,   浮点数由三部分相乘而来</p><center>V = (-1)<sup>s</sup>  *  M  *  2<sup>E</sup></center><p>这三部分中,   M和E并不是直接存在浮点数里的,   那单精度数和双精度数里存是以下数据:   </p><p><img src="https://s2.loli.net/2022/03/07/wa1tVXyYOjflUeh.png" width="600"></img></p><p>位于31位的直接对应于上述式子里的s,   代表符号位; 占着30~23位共8位的exp代表一个无符号数e,   他和另外一个偏移量Bias共同组成E;   占着剩下的共23位的frac与十进制里的小数的含义类似,   通过某些规则映射到为M,   而具体的映射关系如下:   </p><p>(1)规格化数</p><p><img src="https://s2.loli.net/2022/03/07/kY5qLrbO4Kco2fB.png" width="600"></img></p><p>(2)非规格化数</p><p><img src="https://s2.loli.net/2022/03/07/d3Oe7Uj4luo9rWJ.png" width="700"></img></p><p>非规格化数有两个功效,   一是表示0,   二是表示0旁边的数;   </p><p>(3)无穷大</p><p><img src="https://s2.loli.net/2022/03/07/wGlsWgvda3Q8E41.png" width="400"></img></p><p>(4)NaN</p><p><img src="https://s2.loli.net/2022/03/07/nhGH8e9ZI7aDrTt.png" width="600"></img></p><p>需要注意的是,   非规格化数的E设置为1 - Bias是为了让浮点数从非规格化数过渡到规格化数的过程是自然的,   具体来讲,   非规格化数的最大值为</p><center>V = 2<sup>-n-2<sup>k - 1</sup> + 2</sup></sup></center><p>而规格化数的最小值是</p><center>V = (1 - 2<sup>-n</sup>) * 2<sup>-2<sup>k - 1</sup> + 2</sup></sup></center><p>可以看到他们只差了一点点,   这实现了平滑过渡;   </p><h2 id="2-舍入"><a href="#2-舍入" class="headerlink" title="2. 舍入"></a>2. 舍入</h2><p>浮点数二进制的舍入规则是舍入到偶数(Round-to-even),   具体来讲,   先要确定舍入到多少位,   然后观察那一位的右边那些位,   比如舍入到二进制小数点右边两位,   10.11100<sub>2</sub>的舍入结果便是11.00,   因为该数字的舍入有两种情况,   一是舍入到11.00,   二是舍入到10.11,   而该数字正好位于这两种舍入情况中间,   因为他加0.001是11.00,   减0.001是10.11,   这就需要对其使用舍入到偶数规则了,   也就是使结果倾向于最低有效位为0,   所以结果为11.00;   而同理,   10.10100<sub>2</sub>的舍入结果为10.10;   </p><h1 id="6-大总结"><a href="#6-大总结" class="headerlink" title="6. 大总结"></a>6. 大总结</h1><p>总结个der,   我要赶紧去和我的汇编玩儿了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是”程序结构和执行”的第一章&lt;/p&gt;
&lt;h1 id=&quot;1-本章目的&quot;&gt;&lt;a href=&quot;#1-本章目的&quot; class=&quot;headerlink&quot; title=&quot;1. 本章目的&quot;&gt;&lt;/a&gt;1. 本章目的&lt;/h1&gt;&lt;p&gt;让程序员在写程序时避免因为数据溢出等问题产生的霸哥;   </summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构017_图</title>
    <link href="http://example.com/2022/02/06/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-017-tu/"/>
    <id>http://example.com/2022/02/06/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-017-tu/</id>
    <published>2022-02-06T05:09:52.000Z</published>
    <updated>2022-02-19T05:19:06.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-宽度优先遍历BFS"><a href="#1-宽度优先遍历BFS" class="headerlink" title="1. 宽度优先遍历BFS"></a>1. 宽度优先遍历BFS</h1><ol><li><p>思路</p><p>类似于按层遍历,   要操作的节点是从栈里弹出来的,   把该节点能够到达的点都压入栈中,   并且提供一个容器,   只要加入栈中的元素都需要在这个容器里登记;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node startNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(startNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">HashSet&lt;Node&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;()</span><br><span class="line">queue.add(startNode);</span><br><span class="line">hashSet.add(startNode);</span><br><span class="line">Node curNode;</span><br><span class="line"><span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">curNode = queue.poll();</span><br><span class="line">System.out.println(curNode.value);</span><br><span class="line"><span class="keyword">for</span> (Node node : curNode.next) &#123;</span><br><span class="line"><span class="keyword">if</span>(!hashSet.contains(node))</span><br><span class="line">queue.add(node);</span><br><span class="line">hashSet.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-深度优先遍历DFS"><a href="#2-深度优先遍历DFS" class="headerlink" title="2. 深度优先遍历DFS"></a>2. 深度优先遍历DFS</h1><ol><li><p>算法思路</p><p>一条路径走到尽头,   再走其他路径;   </p></li><li><p>实现思路</p><p>用迭代方式来实现,   对从栈里弹出的某个点进行操作时,   由于该curNode节点指向的点可能很多,   所以需要一个for循环,   在循环里,   遍历每一个nextNode节点,   如果这个nextNode节点不在set里,   则进行下面的操作:   将该nextNode节点加入到栈和set里,   并且把curNode重新加入到栈里,   打印nextNode节点的信息,   最后记得break掉这个for循环;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node startNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (startNode == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">set.add(startNode);</span><br><span class="line">stack.push(startNode);</span><br><span class="line">Node curNode;</span><br><span class="line"><span class="keyword">while</span> (!set.isEmpty()) &#123;</span><br><span class="line">curNode = stack.pop();</span><br><span class="line"><span class="keyword">for</span> (Node next : curNode.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (!set.contains(next)) &#123;</span><br><span class="line">stack.push(next);</span><br><span class="line">stack.push(curNode);</span><br><span class="line">set.add(next);</span><br><span class="line">System.out.println(next.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-拓扑排序"><a href="#3-拓扑排序" class="headerlink" title="3. 拓扑排序"></a>3. 拓扑排序</h1><ol><li><p>概念</p><p>生成一个无环图的最小生成树;   注意无环图并不是多叉树,   只是不成环,   下图也是一个无环图;   </p><p><img src="https://s2.loli.net/2022/02/07/5TRl1fQEPL6rV29.png" width="300"></img></p></li><li><p>实现思路</p><p>通过入度来实现,   按照入度的大小来排序即可;   </p></li><li><p>代码实现</p><p>代码思路:   用一张表inMap来记录各个点的入度,   用一个队列zeroInQueue来存放入度为0的点,   这个队列首先要把一开始入度为0的点存进去;   每从队列里弹出一个点,   就把他加到结果中,   然后遍历这个点所有所及的点,   把这些点的入度减一,   并更新inMap,   如果这其中的某个点入度为0了(用inMap来判断),   就把他加入到zeroInQueue中去;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code03_TopologySort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title">sortedTopology</span><span class="params">(Graph gragh)</span></span>&#123;</span><br><span class="line">HashMap&lt;Node, Integer&gt; inMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Queue&lt;Node&gt; zeroInQueue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Node node : gragh.nodes.values()) &#123;</span><br><span class="line">inMap.put(node, node.in);</span><br><span class="line"><span class="keyword">if</span>(node.in == <span class="number">0</span>) &#123;</span><br><span class="line">zeroInQueue.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Node&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!zeroInQueue.isEmpty()) &#123;</span><br><span class="line">Node cur = zeroInQueue.poll();</span><br><span class="line">result.add(cur);</span><br><span class="line"><span class="keyword">for</span> (Node next : cur.next) &#123;</span><br><span class="line">inMap.put(next, inMap.get(next) - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(inMap.get(next) == <span class="number">0</span>) &#123;</span><br><span class="line">zeroInQueue.add(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-Kruskal算法"><a href="#4-Kruskal算法" class="headerlink" title="4. Kruskal算法"></a>4. Kruskal算法</h1><ol><li><p>概念</p><p>该算法用于生成无向图的最小生成树,   使用并查集,   按照边的大小进行遍历,   只要那条边对应的两点不在同一个集合里,   那就把他们并在一起,   这样操作一定不会构成环;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">public</span> PriorityQueue&lt;Edge&gt; heap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(Collection&lt;Node&gt; collection)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = collection.size();</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> MyComparator());</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">int</span> nodeVal;</span><br><span class="line"><span class="keyword">for</span> (Node node : collection) &#123;</span><br><span class="line">nodeVal = node.value;</span><br><span class="line">id[nodeVal] = nodeVal;</span><br><span class="line">size[nodeVal] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != id[p]) &#123;</span><br><span class="line">id[p] = find(id[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size[pRoot] &gt;= size[qRoot]) &#123;</span><br><span class="line">id[qRoot] = pRoot;</span><br><span class="line">size[pRoot] += size[qRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">size[qRoot] += size[pRoot];</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Edge&gt; <span class="title">method</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Edge edge : graph.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Edge curEdge;</span><br><span class="line"><span class="keyword">while</span> (!heap.isEmpty()) &#123;</span><br><span class="line">curEdge = heap.poll();</span><br><span class="line"><span class="keyword">if</span> (!isSameSet(curEdge.from.value, curEdge.to.value)) &#123;</span><br><span class="line">result.add(curEdge);</span><br><span class="line">union(curEdge.from.value, curEdge.to.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Edge o1, Edge o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">kruskalMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">UnionFind u = <span class="keyword">new</span> UnionFind(graph.nodes.values());</span><br><span class="line"><span class="keyword">return</span> u.method(graph);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-Prim算法"><a href="#5-Prim算法" class="headerlink" title="5. Prim算法"></a>5. Prim算法</h1><ol><li><p>概念</p><p>该算法用于寻找无向图的最小生成树;   该算法本质为贪心,   贪心策略为:   无向图的最小生成树的边一定由图中权重最小的边组成;   这种贪心只适用于无向图 !</p></li><li><p>实现思路</p><p>随便找一个点,   用一个堆来存储这个点的直接边,   弹出权重最小的边,   用一个set来记录这个边可及的点,   如果这个点不在set里,   把他存进去,   并且把这个条边存入结果集合里,   把这个点可及的边存入堆里;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Edge&gt; <span class="title">primMST</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Edge&gt; heap = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">HashSet&lt;Node&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">Set&lt;Edge&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Node node : graph.nodes.values()) &#123;</span><br><span class="line"><span class="keyword">if</span>(!set.contains(node)) &#123;</span><br><span class="line">set.add(node);</span><br><span class="line"><span class="keyword">for</span> (Edge edge : node.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Edge curEdge;</span><br><span class="line">Node nextNode;</span><br><span class="line"><span class="keyword">while</span>(!heap.isEmpty()) &#123;</span><br><span class="line">curEdge = heap.poll();</span><br><span class="line">nextNode = curEdge.to;</span><br><span class="line"><span class="keyword">if</span>(!set.contains(nextNode)) &#123;</span><br><span class="line">set.add(nextNode);</span><br><span class="line">result.add(curEdge);</span><br><span class="line"><span class="keyword">for</span> (Edge edge : nextNode.edges) &#123;</span><br><span class="line">heap.add(edge);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-Dijkstra算法"><a href="#6-Dijkstra算法" class="headerlink" title="6. Dijkstra算法"></a>6. Dijkstra算法</h1><ol><li><p>概念</p><p>该算法用于寻找有向图的最小生成树,   有向图的最小生成树不是唯一的,   注意谈论有向图的最小生成树时都需要为其提供一个起始点;    </p></li><li><p>代码思路</p><p>只用到两个集合,   一个是负责存储节点和对应距离的距离表distanceMap,   一个负责标记已被操作完成的点的selectedSet;   </p><p>有一个方法getMinDisNode( ),   负责获取距离表里的最小距离的点;   </p><p>在循环里,   获取该最小距离,   遍历这个点所有可及的边,   边可以分为两类,   一类是该边所到的点已经被放入距离表里,   另一类反之,   对于所到的点已经被放到距离表里的边,   判断最小距离加上该边的权重是否大于距离表里的那个点对应的距离,   如下图,   如果确实大于,   则更新该距离,   如果没有包含,   则把最小距离加上该边的权重,   然后扔进距离表里;   </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-宽度优先遍历BFS&quot;&gt;&lt;a href=&quot;#1-宽度优先遍历BFS&quot; class=&quot;headerlink&quot; title=&quot;1. 宽度优先遍历BFS&quot;&gt;&lt;/a&gt;1. 宽度优先遍历BFS&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;思路&lt;/p&gt;
&lt;p&gt;类似于按层遍历,   要操</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>算法第四版_1.5_并查集</title>
    <link href="http://example.com/2022/02/03/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-bing-cha-ji/"/>
    <id>http://example.com/2022/02/03/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-bing-cha-ji/</id>
    <published>2022-02-03T07:46:40.000Z</published>
    <updated>2022-02-08T01:49:11.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>本书详细阐述了并查集的提出与优化;   从提出到找到最优解,   并查集共经历了四个版本:   quick-find,   quick-union,   加权quick-union和使用路径压缩的加权quick-union;</p><h2 id="1-并查集概念等等"><a href="#1-并查集概念等等" class="headerlink" title="1. 并查集概念等等"></a>1. 并查集概念等等</h2><ol><li><p>并查集的目的:   就像他的名字一样,   并(union)和查(find),   是要实现将两个集合快速并在一起,   以及快速从集合中查找到某两个元素是否相连的一种数据结构,   算法第四版中给出了一幅很具象的图,   即下图,   我们可以较为清楚地看到左下角有一个孤立起来的连通分量,   在图中也可以找到一个孤立的点,   这也许很轻松,   但是如果要判断某两个点是否连通,   则非常地困难,   并查集就是来解决这些问题的;<br><img src="https://s2.loli.net/2022/02/03/DivXnS7I8YOACk9.png" alt="image-20220203160545689"></p></li><li><p>并查集的组成:   首先有两个基本的东西:   表示身份的数组id[],   表示当前有多少个集合的count(研究的对象的基本元素是上图的点,   在并查集的研究中,   用id[]来表示那些点);  其次就是几个方法:   union(int p,   int q),   负责将p和q背后的两个集合连通起来,   find(int p),   负责找到p对应的代表节点,   connected(int p,   int q),   负责判断这两个点是否连通;   </p><p>所以最终的代码如下:   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] id;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//并查集的初始化</span></span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];   </span><br><span class="line">        count = N;   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            id[i] = i;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而可以优化的就是那三个方法;   </p></li><li><p>并查集版本的简述:   每一个并查集的版本的优点都展现在了他们的名字里,   quick-find版本的find( )方法只需访问一次数组,   quick-union版本的union( )方法也只需要访问一次数组,   加权quick-union版本对union( )方法进行了优化,   使其在合并集合时更加智能,   路径压缩使得find( )和connected( )接近常数项级别;   </p></li></ol><h2 id="2-quick-find"><a href="#2-quick-find" class="headerlink" title="2. quick-find"></a>2. quick-find</h2><ol><li><p>算法实现:   find(int p)方法只寻找到p节点的父亲节点,   union(int p, int q)方法需要将那两个节点的父亲节点进行比较,   如果不同,   则把他们合并,   谁合并到谁无所谓,   比如要将p对应的集合合并到q对应的集合,   合并的方式就为遍历数组,   如果碰到节点的父亲节点为p的父亲节点,   即数组的值为id[p],   则把这个点的数组值改为id[q],   也就是改为q的父亲节点;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-find</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pID = find(p);</span><br><span class="line"><span class="keyword">int</span> qID = find(q);</span><br><span class="line"><span class="keyword">if</span> (pID == qID) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pID) &#123;</span><br><span class="line">id[i] = qID;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析:   find( )方法是很快的,   因为他只访问数组一次,   而union方法则每次都要遍历一次数组,   所以该版本无法处理大型问题;   具体而言,   union方法要调用两次find方法,   并且在最差情况下,   要遍历并改变N - 1个数组元素,   在最好情况下,   要遍历并改变1个数组元素,   所以union方法访问数组的次数为(N + 3)~(2N + 1),   假如调用union方法直到最后只剩下一个连通分量,   至少调用N - 1次union方法,   则quick-find版本的时间复杂度为N<sup>2</sup>;   </p><p>这种算法面临的最坏情况就是挨个儿合并,   也就是0和1合并,   1和2合并,   到最后,   8和9合并时出现下面这种情况,   意味着要改变N - 1个值;   </p><p><img src="https://s2.loli.net/2022/02/03/o8cQYZbDRXaEyi6.png" alt="image-20220203180044684"></p></li></ol><h2 id="3-quick-union"><a href="#3-quick-union" class="headerlink" title="3. quick-union"></a>3. quick-union</h2><ol><li><p>算法实现</p><p>该版本改变了find方法寻找的对象,   在上一个版本中,   find(int p)方法找寻的对象为p节点的父亲节点,   或者称为pID更加达意,   而在这个版本中,   该方法找寻的对象为代表节点,   也就是说,   这个方法会不断往上寻找,   直到找到一个根节点,   而connected方法也正是对比的根节点,   而union(int p,    int q)方法如果是把p对应的集合挂在q上,   则只将id[p]=q即可;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-union</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析</p><p>在最好的情况下,   find方法仅需访问数组一次,   而最坏的情况下,   保守估计需要2N + 1次;   而union()方法,   对于0-i整数对,   而言,   访问数组的次数为2i+1次;   </p><p>证明:   union()需要两次find(),   而对于0-i整数对而言,   find()方法访问数组的次数为i次,   因为根据下列代码,   p在除了最后一个位置的每一个位置上看似都需要访问数组两次才可以跳到下一个位置,   但是由于while循环中经过编译的代码对id[p]的第二次引用通常都不会访问数组,   所以p在每一个位置上访问数组的次数都是1,   find()方法访问数组的次数为i,   而union()方法,   对于不处于同一集合的两个根节点,   在最后是需要把他们合并在一起的,   所以又需要访问一次数组,   union()方法总共访问数组2i+1次,   证毕;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p != id[p]) p = id[p];   </span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/04/5rNfDanI92LjKOR.png" width="500"><p>将0,    1,    2…N-1这N个数,   按照0-1,   0-2,   0-3…0-(N-1)的顺序,   也就是最坏的情况连接起来,   由于每次都是调用union()方法,   所以总共的访问数组次数为3 + 5 + 7 + … + 2N-1 ~ N<sup>2</sup>;   而union方法和find方法本身的时间复杂度都为O(M),   M为树的高度;   </p><p>该版本的最坏情况为挨个合并,   如下图;</p><img src="https://s2.loli.net/2022/02/04/DiUd59zhrflLCc1.png" width="200"/></li></ol><h2 id="4-加权quick-union"><a href="#4-加权quick-union" class="headerlink" title="4. 加权quick-union"></a>4. 加权quick-union</h2><ol><li><p>算法实现</p><p>quick-union版本的缺点在于,   集合合并时是随意的,   而加权的意思就是让合并这个过程是有选择的,   换句话说,   就是实现小集合合并到大集合;   而具体的实现是通过一个size[]数组来表示每个集合的大小;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (size[pRoot] &gt;= size[qRoot]) &#123;</span><br><span class="line">id[qRoot] = pRoot;</span><br><span class="line">size[pRoot] += size[qRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line">size[qRoot] += size[pRoot];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>算法分析</p><p>由于在合并集合时会进行集合大小的判定,   所以该版本的最坏情况一定是合并的任意两个集合大小都相等,   如下图;   树的高度最大为log<sub>2</sub>N(根节点的高度为0;   </p><img src="https://s2.loli.net/2022/02/04/e9wSR342bps85f6.png" width="400"></li></ol><h2 id="5-使用路径压缩的quick-union"><a href="#5-使用路径压缩的quick-union" class="headerlink" title="5. 使用路径压缩的quick-union"></a>5. 使用路径压缩的quick-union</h2><p>只需要在find里使用一个容器装住向上查找根节点的那条路径上的点,   并把这些点的父亲节点设置为根节点即可;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">iHelp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">help[iHelp++] = p;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (iHelp &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">id[help[iHelp--]] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;本书详细阐述了并查集的提出与优化;   从提出到找到最优解,   并查集共经历了四个版本:   quick-find,   quic</summary>
      
    
    
    
    <category term="算法第四版" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    
  </entry>
  
  <entry>
    <title>算法第四版_1.5_练习</title>
    <link href="http://example.com/2022/02/02/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-lian-xi/"/>
    <id>http://example.com/2022/02/02/suan-fa-di-si-ban/suan-fa-di-si-ban-1.5-lian-xi/</id>
    <published>2022-02-02T04:59:50.000Z</published>
    <updated>2022-02-05T13:50:38.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-题目1-5-1"><a href="#1-题目1-5-1" class="headerlink" title="1. 题目1.5.1"></a>1. 题目1.5.1</h1><p>使用quick-find,   依次对(9, 0), (3, 4), (5, 8), (7, 2), (2, 1), (5, 7), (0, 3), (4, 2)调用union方法,   打印出每一步的id[]和访问数组的次数;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">section5_2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> access;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">access = <span class="number">0</span>;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">count = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// method of quick-find</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pID = find(p);</span><br><span class="line"><span class="keyword">int</span> qID = find(q);</span><br><span class="line">System.out.println(<span class="string">&quot;\r\n(&quot;</span> + p + <span class="string">&quot;, &quot;</span> + q + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pID == qID) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (id[i] == pID) &#123;</span><br><span class="line">id[i] = qID;</span><br><span class="line">access++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Times to access array id[]: &quot;</span> + (access + <span class="number">2</span> + <span class="number">10</span>)</span><br><span class="line">+ <span class="string">&quot; (2 at 2* find(), 10 at going through array id[], &quot;</span> + access + <span class="string">&quot; for updating parents)&quot;</span>);</span><br><span class="line">access = <span class="number">0</span>;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">UF uf = <span class="keyword">new</span> UF(N);</span><br><span class="line">uf.union(<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">uf.union(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(9, 0)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 3 4 5 6 7 8 0 </span><br><span class="line">(3, 4)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 5 6 7 8 0 </span><br><span class="line"></span><br><span class="line">(5, 8)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 8 6 7 8 0 </span><br><span class="line"></span><br><span class="line">(7, 2)</span><br><span class="line">Times to access array id[]: 13 (2 at 2* find(), 10 at going through array id[], 1 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 2 4 4 8 6 2 8 0 </span><br><span class="line"></span><br><span class="line">(2, 1)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 1 4 4 8 6 1 8 0 </span><br><span class="line"></span><br><span class="line">(5, 7)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 0 1 1 4 4 1 6 1 1 0 </span><br><span class="line"></span><br><span class="line">(0, 3)</span><br><span class="line">Times to access array id[]: 14 (2 at 2* find(), 10 at going through array id[], 2 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 4 1 1 4 4 1 6 1 1 4 </span><br><span class="line"></span><br><span class="line">(4, 2)</span><br><span class="line">Times to access array id[]: 16 (2 at 2* find(), 10 at going through array id[], 4 for updating parents)</span><br><span class="line">Array index: 0 1 2 3 4 5 6 7 8 9</span><br><span class="line">Array value: 1 1 1 1 1 1 6 1 1 1 </span><br></pre></td></tr></table></figure><h1 id="2-题目1-5-2"><a href="#2-题目1-5-2" class="headerlink" title="2. 题目1.5.2"></a>2. 题目1.5.2</h1><ol><li><p>题目</p><p>使用quick-union,   依次对(9, 0), (3, 4), (5, 8), (7, 2), (2, 1), (5, 7), (0, 3), (4, 2)调用union方法,   打印出最终结果和森林;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">practice_1_5_2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="keyword">public</span> Node left;</span><br><span class="line"><span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UF</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">private</span> Node[] nodes;</span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;Node&gt; list;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">nodes = <span class="keyword">new</span> Node[N];</span><br><span class="line">count = N;</span><br><span class="line">list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">Node curNode = <span class="keyword">new</span> Node(i);</span><br><span class="line">nodes[i] = curNode;</span><br><span class="line">list.add(curNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method of quick-union</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (p != id[p]) &#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pRoot = find(p);</span><br><span class="line"><span class="keyword">int</span> qRoot = find(q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pRoot == qRoot)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">id[pRoot] = qRoot;</span><br><span class="line"><span class="keyword">if</span> (nodes[qRoot].left == <span class="keyword">null</span>) &#123;</span><br><span class="line">nodes[qRoot].left = nodes[pRoot];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodes[qRoot].right == <span class="keyword">null</span>) &#123;</span><br><span class="line">nodes[qRoot].right = nodes[pRoot];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Node cur : list) &#123;</span><br><span class="line">printTree(cur);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTree</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">printInOrder(head, <span class="number">0</span>, <span class="string">&quot;H&quot;</span>, <span class="number">17</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInOrder</span><span class="params">(Node head, <span class="keyword">int</span> height, String to, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">printInOrder(head.right, height + <span class="number">1</span>, <span class="string">&quot;v&quot;</span>, len);</span><br><span class="line">String val = to + head.value + to;</span><br><span class="line"><span class="keyword">int</span> lenM = val.length();</span><br><span class="line"><span class="keyword">int</span> lenL = (len - lenM) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> lenR = len - lenM - lenL;</span><br><span class="line">val = getSpace(lenL) + val + getSpace(lenR);</span><br><span class="line">System.out.println(getSpace(height * len) + val);</span><br><span class="line">printInOrder(head.left, height + <span class="number">1</span>, <span class="string">&quot;^&quot;</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSpace</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">String space = <span class="string">&quot; &quot;</span>;</span><br><span class="line">StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">buf.append(space);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line">UF uf = <span class="keyword">new</span> UF(N);</span><br><span class="line">System.out.println(<span class="string">&quot;0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">uf.union(<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">uf.union(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Array index: 0 1 2 3 4 5 6 7 8 9&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;Array value: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">System.out.print(uf.id[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果</p><p>打印函数printTree( )是用来打印二叉树的,   而并查集生成的森林里的树很有可能是多叉树,   所以最后的结果需要分析后重画;   </p><img src="https://s2.loli.net/2022/02/05/TYoreUtVXCF1PAc.png" width="400"><p>由于最后时刻,   id[4] = 1,   所以1是一颗三叉树,   因而要重新画,   结果如下;   </p><img src="https://s2.loli.net/2022/02/05/3TwJ9gGedvmfuBQ.png" width="400"></li></ol><h1 id="3-题目1-5-3-题目1-5-4"><a href="#3-题目1-5-3-题目1-5-4" class="headerlink" title="3. 题目1.5.3,   题目1.5.4"></a>3. 题目1.5.3,   题目1.5.4</h1><p>略;   </p><h1 id="5-题目1-5-5"><a href="#5-题目1-5-5" class="headerlink" title="5. 题目1.5.5"></a>5. 题目1.5.5</h1><ol><li><p>题目</p><p>一台计算机一秒能够处理10<sup>9</sup>条指令,   估计quick-find算法解决含有10<sup>9</sup>个触点和10<sup>6</sup>条连接的动态连通性问题所需要的时间;   假设for循环每一次迭代需要执行10条机器指令;   </p></li><li><p>答案</p><p>初始化过程大约需要10.9<sup>10</sup>条指令,   其中10<sup>9</sup>条指令用于给数组id[]赋初值,   10<sup>9 </sup>* 10 = 10<sup>10</sup>条指令用于for循环的迭代;   每个union方法的for循环都需要迭代N次,   每次迭代都需要访问一次数组,   而且还需要for循环的10条机器命令,   又因为调用了10<sup>6</sup>次union,   所以总共</p><center>10<sup>6</sup> * 10<sup>9</sup> * (10 + 1) ≈ 11 * 10<sup>15</sup></center><p>条指令;   所以总共大约需要执行11 * 10<sup>15</sup>条指令,   计算机一秒10<sup>9</sup>条指令,   共需要11 * 10<sup>6</sup>秒,   也就是127天;   </p></li></ol><h1 id="6-题目1-5-6"><a href="#6-题目1-5-6" class="headerlink" title="6. 题目1.5.6"></a>6. 题目1.5.6</h1><ol><li><p>题目</p><p>使用加权quick-union方法完成题目1.5.5</p></li><li><p>答案</p><p>分析加权quick-union,   初始化过程需要访问数组2N次,   共需1.2 * 10<sup>10</sup>条指令,   find方法有一个for循环,   一次迭代需要的命令数四舍五入为1    0,   假设树高都为log<sub>2</sub>N ≈ 30,   则find方法需要的命令数为300;   union方法仍然包含两个find方法,   加上该方法剩下杂七杂八的访问,   一共大致需要600次,   所以总共为</p><center>10<sup>6</sup> * 600  + 1.2 * 10<sup>10</sup> = 1.28 * 10<sup>10</sup></center><p>条指令;   所以只需要13秒即可完成,   与quick-find版本形成鲜明对比;   </p></li></ol><h1 id="7-题目1-5-7"><a href="#7-题目1-5-7" class="headerlink" title="7.题目1.5.7"></a>7.题目1.5.7</h1><ol><li><p>题目</p><p>完善quick-find和quick-union;   </p></li><li><p>答案</p><p>在前面的1.5.1和1.5.2已经完善过了;   </p></li></ol><h1 id="8-题目1-5-8"><a href="#8-题目1-5-8" class="headerlink" title="8. 题目1.5.8"></a>8. 题目1.5.8</h1><ol><li><p>题目</p><p>用一个反例说明下面的quick-find算法的union方法是错的;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connected(p, q)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">        <span class="comment">//将p的分量重定向到q的分量</span></span><br><span class="line">        <span class="keyword">if</span>(id[i] == id[p]) id[i] = id[q];</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>答案</p><p>这种写法和标准写法的区别在于,   标准写法用了两个变量提前记录id[p]和id[q],   问题在于,   当进行到某一步,   把某两个元素p和q传入union方法,   将p的分量重定向到q的分量时,   如果p不为他那个集合里的最后一个元素,   那么遍历到p时,   id[p]将会变成id[q],   而p之后的包含在p一开始呆着的集合里的元素就不会改变成id[q],   因为那时id[p]已经改变,   他们的id[i]不会再等于id[p],   如下面的例子,   1和2都属于0,   3和5还有6都属于4,   现在把1和3传入union中,   如果是上面的写法,   0和1的id[i]都会顺利地变成4,   但id[1]已经等于4了,   下一个原本应该变成4的id[2]不等于4,   所以他还会继续保持为0;  </p><img src="https://s2.loli.net/2022/02/05/QrFV3SxI8PmdBMN.png" width="400"> <p>这个霸哥的治标级解决办法是想办法每次传入的需要重定向的元素都是这个集合里的最后一个元素,   治本级解决办法是用一个变量来提前记录一下需要重定向的集合的值,   以免存放这个值的内存在某个时刻刷新成了其他值;   不过只需要一个额外变量来标记需要重定向的集合的值即可,   不需要另外一个来标记需要重定向到的值,   所以union可以像下面这样写;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(connected(p, q)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> pID = id[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">        <span class="comment">//将p的分量重定向到q的分量</span></span><br><span class="line">        <span class="keyword">if</span>(id[i] == pID) id[i] = id[q];</span><br><span class="line">    count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="9-题目1-5-9"><a href="#9-题目1-5-9" class="headerlink" title="9. 题目1.5.9"></a>9. 题目1.5.9</h1><ol><li><p>题目</p><p>判断下面的数组是否会是加权quick-union得到的树;   </p><p><img src="https://s2.loli.net/2022/02/05/fs5q7gU96obYIwe.png" width="700"></img></p></li><li><p>答案</p><p>不可能,   得到的树如下图,   加权quick-union得到的树高度最大为3,   </p><center>log<sub>2</sub>N(向下取整) = 3</center><p>但这棵树有4米高,   显然不对啦;   原因其实出在1-3-5-4-8那条树枝,   最差情况是已经合并的两个点和已经合并的三个点合并,   但那样也会是小并大,   也就是那两个点直接连在三个点的根节点上,   </p><p><img src="https://s2.loli.net/2022/02/05/dZvMxI1HBalQ5eN.png" width="200"></img></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-题目1-5-1&quot;&gt;&lt;a href=&quot;#1-题目1-5-1&quot; class=&quot;headerlink&quot; title=&quot;1. 题目1.5.1&quot;&gt;&lt;/a&gt;1. 题目1.5.1&lt;/h1&gt;&lt;p&gt;使用quick-find,   依次对(9, 0), (3, 4), (5, 8</summary>
      
    
    
    
    <category term="算法第四版题目" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E7%89%88%E9%A2%98%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>算法体系结构014_并查集</title>
    <link href="http://example.com/2022/01/27/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-016-bing-cha-ji/"/>
    <id>http://example.com/2022/01/27/suan-fa-ti-xi-jie-gou/suan-fa-ti-xi-jie-gou-016-bing-cha-ji/</id>
    <published>2022-01-27T07:10:44.000Z</published>
    <updated>2022-02-06T05:08:48.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>有许多元素，在最初时每个元素都被放在了不同的集合里，另外还有两个方法，</p><p>boolean isSameSet(a, e)判断两个元素所在的集合是否相同；</p><p>void union(a, e)将a和e背后的集合合并为一个集合；</p><p>并且要求这两种方法的时间复杂度均摊为O(1)；</p><table><thead><tr><th align="left">为什么会存在并查集：这种数据结构的用途是在保证O(1)的前提下，将两个集合合并为一个集合；因为不管是链表还是哈希表，如果在双方内部包含元素都很多的前提下，都要考虑是将哪个集合融到另外一个集合里；退一步讲，在计算机领域，将一个元素放入集合里，经常是把这个元素的指针指到某个位置，或者给他一个标志位，而不管是链表还是哈希表，在进行集合合并时，都需要修改这个标志位，那时间复杂度必定不会是O(1)，并查集就是解决这个问题的</th></tr></thead></table><h2 id="2-结构设计"><a href="#2-结构设计" class="headerlink" title="2. 结构设计"></a>2. 结构设计</h2><p>每个集合都存在一个代表结点，每个元素都有一个指针，一开始指向自己，如图1，这时自己便是代表结点，如果把a和e作为参数调用union方法，则e的指针指向a，e的代表结点变为了a，如图2，如果再判断两个元素所处的集合是否为同一个时，只需要拿到那两个元素的代表结点判断一下是否为同一个即可；而当元素已经变成图3的状况，而且要将e和d作为参数把这两个集合合并时，e往上会找到a，d往上会找到b，代表结点不是同一个，这时将拥有元素少的集合的代表结点b的指针指向a即可；</p><p><img src="https://s2.loli.net/2022/01/28/SBnroAECZ6cDKwj.png" alt="image-20220128205150220.png"><img src="https://s2.loli.net/2022/01/28/ESBQTHOzGqR61vk.png" alt="image-20220128205158005.png"><img src="https://s2.loli.net/2022/01/28/yGU4bi9PYxLJmkV.png" alt="image-20220128205248857.png"></p><p>另外，为了使性能得到提升，一般都会采取扁平化处理；</p><h2 id="3-代码落地"><a href="#3-代码落地" class="headerlink" title="3. 代码落地"></a>3. 代码落地</h2><h3 id="3-1-数据包层"><a href="#3-1-数据包层" class="headerlink" title="3.1 数据包层"></a>3.1 数据包层</h3><p>把提供的数据用一个类包起来，类似于Integer等包装类型的思路；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">V value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-并查集设计"><a href="#3-2-并查集设计" class="headerlink" title="3.2 并查集设计"></a>3.2 并查集设计</h3><ol><li><p>提供三张表，nodes用于将提供数据和包装数据进行对应，parentMap用于记录各个结点的代表结点，sizeMap用于记录代表结点的集合大小；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HashMap&lt;V, Node&lt;V&gt;&gt; nodes;          </span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Node&lt;V&gt;&gt; parentMap;</span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Integer&gt; sizeMap;  </span><br></pre></td></tr></table></figure></li><li><p>对表进行初始化；先创建出三张哈希表，再把值包为Node类型，设置其对应表，代表结点为自己，大小为1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionSet</span><span class="params">(List&lt;V&gt; values)</span> </span>&#123;      </span><br><span class="line">nodes = <span class="keyword">new</span> HashMap&lt;&gt;();           </span><br><span class="line">parentMap = <span class="keyword">new</span> HashMap&lt;&gt;();       </span><br><span class="line">sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();         </span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">for</span> (V cur : values) &#123;             </span><br><span class="line">Node&lt;V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(cur);</span><br><span class="line">nodes.put(cur, node);          </span><br><span class="line">parentMap.put(node, node);     </span><br><span class="line">sizeMap.put(node, <span class="number">1</span>);          </span><br><span class="line">&#125;                                  </span><br><span class="line">&#125;                                      </span><br></pre></td></tr></table></figure></li><li><p>findFather( )方法设计；负责寻找代表结点；传入一个结点，让他通过parentMap不断往上直到找出代表结点；为了实现并查集扁平化，这里需要用栈来收集那一条的路径上的点，然后一一弹出并设置他们的代表结点为最上方的那一个，也就是修改他们的父亲节点为代表节点；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;V&gt; <span class="title">findFather</span><span class="params">(Node&lt;V&gt; cur)</span></span>&#123; </span><br><span class="line">Stack&lt;Node&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (cur != parentMap.get(cur)) &#123; </span><br><span class="line">path.push(cur);                 </span><br><span class="line">cur = parentMap.get(cur);       </span><br><span class="line">&#125;                                   </span><br><span class="line">                                    </span><br><span class="line"><span class="keyword">while</span>(!path.isEmpty()) &#123;            </span><br><span class="line">parentMap.put(path.pop(), cur); </span><br><span class="line">&#125;                                   </span><br><span class="line">                                    </span><br><span class="line"><span class="keyword">return</span> cur;                         </span><br><span class="line">&#125;                                       </span><br></pre></td></tr></table></figure></li><li><p>isSameSet( )方法设计；判断两个结点是否在同一个集合里；传入两个基本数据类型，通过nodes表寻找到对应的包装类型，再调用findFather( )来寻找代表结点，需要注意的是，代表结点为一个类，可以直接拿两个这种类型的节点用 == 进行比较，这就是包装节点的优势，但劣势是需要原始数据不能有重复的值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;                            </span><br><span class="line"><span class="keyword">return</span> findFather(nodes.get(a)) == findFather(nodes.get(b));</span><br><span class="line">&#125;                                                               </span><br></pre></td></tr></table></figure></li><li><p>union( )方法设计；将两个不属于同一个集合的点对应的集合合并为同一个；首先要找到他们的代表节点，如果代表结点不同，再执行下面的操作，把他们各自背后的集合的大小进行比较，设两个指针指向大集合和小集合，最后设置小代表节点为大代表节点，修改大代表节点的集合大小为两集合大小相加，并删除小代表节点在sizeMap里的记录；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;                        </span><br><span class="line">Node&lt;V&gt; nodeA = <span class="keyword">new</span> Node&lt;&gt;(a);                   </span><br><span class="line">Node&lt;V&gt; nodeB = <span class="keyword">new</span> Node&lt;&gt;(b);                   </span><br><span class="line"><span class="keyword">if</span> (nodeA != nodeB) &#123;                            </span><br><span class="line"><span class="keyword">int</span> sizeA = sizeMap.get(nodeA);              </span><br><span class="line"><span class="keyword">int</span> sizeB = sizeMap.get(nodeB);              </span><br><span class="line">Node&lt;V&gt; big = sizeA &gt;= sizeB ? nodeA : nodeB;</span><br><span class="line">Node&lt;V&gt; small = big == nodeA ? nodeB : nodeA;</span><br><span class="line">parentMap.put(small, big);                   </span><br><span class="line">sizeMap.put(big, sizeA + sizeB);             </span><br><span class="line">sizeMap.remove(small);                       </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br></pre></td></tr></table></figure></li><li><p>set( )方法设计；获取现在还有多少集合；因为sizeMap是只存代表节点的记录，所以sizeMap的大小和现存集合数量一致；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sets</span><span class="params">()</span> </span>&#123;       </span><br><span class="line"><span class="keyword">return</span> sizeMap.size();</span><br><span class="line">&#125;                         </span><br></pre></td></tr></table></figure></li></ol><h2 id="4-题目"><a href="#4-题目" class="headerlink" title="4. 题目"></a>4. 题目</h2><h4 id="4-1-朋友圈"><a href="#4-1-朋友圈" class="headerlink" title="4.1 朋友圈"></a>4.1 朋友圈</h4><ol><li><p>题目描述</p><p>给定一个N*N的二维数组,  每个下标都代表了一个人,  任意两个人在数组中交叉形成的数字代表这两个人认不认识,  1代表认识,  而且必定是相互认识,  不会出现我认识你但你不认识我的情况,  所以这个二维数组一定是一个对称矩阵,  并且主对角线全是1,  认识的人不管是通过什么途径认识的,  共同组成一个朋友圈;  现在给定这样一个二维数组,  要求返回共有多少个朋友圈,  也就是有多少个连通区域;</p></li><li><p>实现思路</p><p>本题采用数组来实现并查集,  数组parent的含义为数组下标的直系长辈是对应的值,  不过因为在查询代表节点时要对那一条链进行扁平化 ,  所以,   sets表示当前的集合数,   数组help用于替代栈来对向上查询路径上的点进行存储;   而其他的操作和上述实现一致,   最后返回sets即可;</p></li><li><p>代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://leetcode.com/problems/friend-circles/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code01_FriendCircles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">int</span>[] help;</span><br><span class="line"><span class="keyword">int</span> sets;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span>[][] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = arr.length;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">help = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">sets = N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAncestor</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> hi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != parent[i]) &#123;</span><br><span class="line">help[hi++] = i;</span><br><span class="line">i = parent[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; hi; j++) &#123;</span><br><span class="line">parent[help[j]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ancI = findAncestor(i);</span><br><span class="line"><span class="keyword">int</span> ancJ = findAncestor(j);</span><br><span class="line"><span class="keyword">if</span> (ancI != ancJ) &#123;</span><br><span class="line"><span class="keyword">if</span> (size[ancI] &gt;= size[ancJ]) &#123;</span><br><span class="line">size[ancI] += size[ancJ];</span><br><span class="line">parent[ancI] = ancJ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">size[ancJ] += size[ancI];</span><br><span class="line">parent[ancJ] = ancI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sets--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] isConnected)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = isConnected.length;</span><br><span class="line">init(isConnected);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">union(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-发现岛屿"><a href="#4-2-发现岛屿" class="headerlink" title="4.2 发现岛屿"></a>4.2 发现岛屿</h4><ol><li><p>题目描述</p><p>给定一个二维char型数组,   数组中只存在’1’和’0’,   规定一个岛屿由一片上下左右相邻的’1’组成,   求有多少个这样的岛屿;   </p></li><li><p>实现思路1</p><p>用递归实现,   遍历数组的每一个元素,   如果是’1’,   则发现一个岛屿,   岛屿数加一,   并且递归式地去发现这个’1’的上下左右,   如果是’1’,   则改为其他字符,   考虑了越界等问题后,   递归函数的终止条件变得很大一串;   </p></li><li><p>代码1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://leetcode.com/problems/number-of-islands/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code02_NumberOfIsLands</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> isLands = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">isLands++;</span><br><span class="line">infect(grid, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> isLands;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infect</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i == grid.length || j &lt; <span class="number">0</span> || j == grid[<span class="number">0</span>].length || grid[i][j] != <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">infect(grid, i - <span class="number">1</span>, j);</span><br><span class="line">infect(grid, i + <span class="number">1</span>, j);</span><br><span class="line">infect(grid, i, j - <span class="number">1</span>);</span><br><span class="line">infect(grid, i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>时间复杂度1</p><p>在主流程里每个点被调用一次,   总共M * N个点,   由于感染函数的时间复杂度不稳定,   所以要从另外一个角度切入,   每个点会被他的上下左右各调用一次,   总共就是五次,   所以时间复杂度O(M * N);   </p></li><li><p>说明1</p><p>(1)为什么不能只感染右下,   如图5,   只感染右下的话,   遍历到第一行的1时会将右边红框看成一个岛屿,   而遍历到第二行的1时则把左边红框看成另一个岛屿;   </p><p><img src="https://s2.loli.net/2022/01/31/coBN5Wxz6Fe2HrI.png" alt="image.png"></p><p>(2)为什么不能只感染左右下,   答案与(1)类似,   如图6</p><p><img src="https://s2.loli.net/2022/01/31/3YWEB5FbQh6PmKI.png" alt="image.png"></p><p>总结:   这种问题的解决途径是构建一幅感染的图景,   类似于鳄鱼小顽皮里脏水污染干净水,   而数组是从左上往右下遍历的,   如果只感染右下,   那么就不会感染到左边的’1’,   如果只感染左右下的话,   自然不会感染到上方的’1’;   </p></li><li><p>实现思路2</p><p>用带表的并查集来实现;   每个元素一开始都对应有一个独一无二的地址,   遍历数组,   对每个元素的右方和上方的元素进行判定,   如果有’1’,   则把那些’1’都合并起来,   其实说白了,   就是将那些’1’包一层以此区分开来(区分开来是为了让不同的’1’指向代表节点’1’),   然后不断地判定右方和上方的元素,   将其纳入到自己的集合里来,   就是这么个过程;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并查集代码和带表并查集一模一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;                                </span><br><span class="line">                                                         </span><br><span class="line">&#125;                                                        </span><br><span class="line">                                                         </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numIslands2</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;           </span><br><span class="line"><span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;                                  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line">Dot[][] dots = <span class="keyword">new</span> Dot[grid.length][grid[<span class="number">0</span>].length]; </span><br><span class="line">                                                         </span><br><span class="line">List&lt;Dot&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();                  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;       </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                     </span><br><span class="line">dots[i][j] = <span class="keyword">new</span> Dot();                  </span><br><span class="line">list.add(dots[i][j]);                    </span><br><span class="line">&#125;                                            </span><br><span class="line">&#125;                                                </span><br><span class="line">                                                         </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line">UnionFind&lt;Dot&gt; u = <span class="keyword">new</span> UnionFind&lt;&gt;(list);            </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid[<span class="number">0</span>].length; i++) &#123;           </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[<span class="number">0</span>][i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">u.union(dots[<span class="number">0</span>][i], dots[<span class="number">0</span>][i - <span class="number">1</span>]);         </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[i - <span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">u.union(dots[i - <span class="number">1</span>][<span class="number">0</span>], dots[i][<span class="number">0</span>]);         </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;       </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                     </span><br><span class="line"><span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>) &#123;             </span><br><span class="line">u.union(dots[i - <span class="number">1</span>][j], dots[i][j]); </span><br><span class="line">&#125;                                        </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">if</span> (grid[i][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;             </span><br><span class="line">u.union(dots[i][j], dots[i][j - <span class="number">1</span>]); </span><br><span class="line">&#125;                                        </span><br><span class="line">&#125;                                            </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">return</span> u.sizeMap.size();                             </span><br><span class="line">&#125;                                                        </span><br></pre></td></tr></table></figure></li><li><p>实现思路3</p><p>用数组实现的并查集来实现;   简要分析,   数组实现提供了parentMap,   sizeMap和help三个一维数组,   而本题提供的是一个非N*N的二维数组,   所以前面他们三个的长度都要为二维数组的长 * 宽,   并且要建立好二维数组坐标到一维数组坐标的映射,</p><table><thead><tr><th>左神采用的是[i * 宽 + j]的形式,   这种映射关系,   要么设置那三个数组的长度远超[i * 宽 + j]可及范围,   如果数组长度为长 * 宽时,   映射的索引值就要设置为[行坐标 * 宽 + 列坐标]或者[列坐标 * 长 + 行坐标],   假如设置为[行坐标 * 长 + 列坐标]的话,   可能会出现越界的问题,   比如维度为两行一列的数组,   映射到一维数组后数组长度为2,   最大下标为1,   遍历到第二行时就会出现[1 * 2 + 0] = [2]的情况,   而[行坐标 * 宽 + 列坐标]或者[列坐标 * 长 + 行坐标]就不会出现越界;</th></tr></thead></table></li><li><p>代码实现</p><p>建立好映射关系后,   只需要注意一些细节即可,   比如使用help数组时,   那里面的变量要自加,   i要不断等于parent[i]之类的;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] parent;                                      </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] size;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] help;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sets;                                          </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> weight;                                        </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numIslands3</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;            </span><br><span class="line">height = grid.length;                                 </span><br><span class="line">weight = grid[<span class="number">0</span>].length;                              </span><br><span class="line"><span class="keyword">int</span> len = height * weight;                            </span><br><span class="line">                                                          </span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                </span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                  </span><br><span class="line">help = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                  </span><br><span class="line">sets = <span class="number">0</span>;                                             </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;                    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; weight; j++) &#123;                </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                      </span><br><span class="line">parent[i * weight + j] = i * weight + j;  </span><br><span class="line">size[i * weight + j] = <span class="number">1</span>;                 </span><br><span class="line">sets++;                                   </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; weight; i++) &#123;                    </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="string">&#x27;1&#x27;</span>) &#123;                          </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;                  </span><br><span class="line">union(<span class="number">0</span>, i, <span class="number">0</span>, i - <span class="number">1</span>);                    </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; height; j++) &#123;                    </span><br><span class="line"><span class="keyword">if</span> (grid[j][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[j - <span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span>) &#123; </span><br><span class="line">union(j, <span class="number">0</span>, j - <span class="number">1</span>, <span class="number">0</span>);                        </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height; i++) &#123;                    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; weight; j++) &#123;                </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                      </span><br><span class="line"><span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>) &#123;              </span><br><span class="line">union(i, j, i - <span class="number">1</span>, j);                </span><br><span class="line">&#125;                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">if</span> (grid[i][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;              </span><br><span class="line">union(i, j, i, j - <span class="number">1</span>);                </span><br><span class="line">&#125;                                         </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">    &#125;                                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;                           </span><br><span class="line"><span class="keyword">int</span> h1 = <span class="number">0</span>;                                           </span><br><span class="line"><span class="keyword">while</span> (i != parent[i]) &#123;                              </span><br><span class="line">help[h1++] = i;                                   </span><br><span class="line">i= parent[i];                                     </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h1; j++) &#123;                        </span><br><span class="line">parent[help[j]] = i;                              </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">return</span> i;                                             </span><br><span class="line">&#125;                                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> j1, <span class="keyword">int</span> i2, <span class="keyword">int</span> j2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> anc1 = find(i1 * weight + j1);                    </span><br><span class="line"><span class="keyword">int</span> anc2 = find(i2 * weight + j2);                    </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">if</span> (anc1 != anc2) &#123;                                   </span><br><span class="line"><span class="keyword">if</span> (size[anc1] &gt;= size[anc2]) &#123;                   </span><br><span class="line">parent[anc2] = anc1;                          </span><br><span class="line">size[anc1] += size[anc2];                     </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                                          </span><br><span class="line">parent[anc1] = anc2;                          </span><br><span class="line">size[anc2] += size[anc1];                     </span><br><span class="line">&#125;                                                 </span><br><span class="line">                                                          </span><br><span class="line">sets--;                                           </span><br><span class="line">&#125;                                                     </span><br><span class="line">&#125;                                                         </span><br></pre></td></tr></table></figure></li></ol><h4 id="4-3-发现岛屿II"><a href="#4-3-发现岛屿II" class="headerlink" title="4.3 发现岛屿II"></a>4.3 发现岛屿II</h4><ol><li><p>题目描述</p><p>给定一个全零二维的矩阵,   依次给入一些点对,   把这些点对对应的二维矩阵上的0变成1,   岛屿判断机制与上一题一样,   问每一步有多少个岛屿;   </p></li><li><p>实现思路</p><p>对size数组动手脚,   一开始全0,   所以size的任意位置都为0,   当某一个点被设置为1后,   对应的size位置也会被设为1,   而当两个集合准备合并时,   只需要记录一下这时的岛屿数即可;   </p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] help;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sets;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> row;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> h1;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">numIslands1</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] positions)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pair = positions.length;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">row = n;</span><br><span class="line"><span class="keyword">int</span> len = m * n;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">help = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">sets = <span class="number">0</span>;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">index = index(i, j);</span><br><span class="line">parent[i * row + j] = i * row + j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pair; i++) &#123;</span><br><span class="line">x = positions[i][<span class="number">0</span>];</span><br><span class="line">y = positions[i][<span class="number">1</span>];</span><br><span class="line">index = index(x, y);</span><br><span class="line"><span class="keyword">if</span>(size[index] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">sets++;</span><br><span class="line">size[index] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((index - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; size[index - <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">union(index, index - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((index + <span class="number">1</span>) &lt; len &amp;&amp; size[index + <span class="number">1</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">union(index, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((index - row) &gt;= <span class="number">0</span> &amp;&amp; size[index - row] != <span class="number">0</span>) &#123;</span><br><span class="line">union(index, index - row);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((index + row) &lt; len &amp;&amp; size[index + row] != <span class="number">0</span>) &#123;</span><br><span class="line">union(index, index + row);</span><br><span class="line">&#125;</span><br><span class="line">list.add(sets);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i * row + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">h1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != parent[i]) &#123;</span><br><span class="line">help[h1++] = i;</span><br><span class="line">i = parent[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h1; j++) &#123;</span><br><span class="line">parent[help[j]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ancI;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ancJ;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sizeI;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sizeJ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">ancI = find(i);</span><br><span class="line">ancJ = find(j);</span><br><span class="line"><span class="keyword">if</span> (ancI != ancJ) &#123;</span><br><span class="line">sizeI = size[ancI];</span><br><span class="line">sizeJ = size[ancJ];</span><br><span class="line"><span class="keyword">if</span> (sizeI &gt;= sizeJ) &#123;</span><br><span class="line">parent[ancI] = ancJ;</span><br><span class="line">size[ancI] += size[ancJ];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">parent[ancJ] = ancI;</span><br><span class="line">size[ancJ] += size[ancI];</span><br><span class="line">&#125;</span><br><span class="line">sets--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>quick-union算法中的union()方法,   对于0-i整数对而言,   访问数组的次数为2i+1次;   </p><p>证明:   union()需要两次find(),   而对于0-i整数对而言,   find()方法访问数组的次数为i次,   因为根据下列代码,   p在除了最后一个位置的每一个位置上看似都需要访问数组两次才可以跳到下一个位置,   但是由于while循环中经过编译的代码对id[p]的第二次引用通常都不会访问数组,   所以p在每一个位置上访问数组的次数都是1,   find()方法访问数组的次数为i,   而union()方法,   对于不处于同一集合的两个根节点,   在最后是需要把他们合并在一起的,   所以又需要访问一次数组,   union()方法总共访问数组2i+1次,   证毕;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p != id[p]) p = id[p];   </span><br><span class="line">    <span class="keyword">return</span> p;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将0,    1,    2…N-1这N个数,   按照0-1,   0-2,   0-3…0-(N-1)的顺序,   也就是最坏的情况连接起来,   由于每次都是调用union()方法,   所以总共的访问数组次数为3 + 5 + 7 + … + 2N-1 ~ N<sup>2</sup> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter1</title>
    <link href="http://example.com/2022/01/26/csapp/csapp-chapter1/"/>
    <id>http://example.com/2022/01/26/csapp/csapp-chapter1/</id>
    <published>2022-01-26T11:45:15.000Z</published>
    <updated>2022-02-07T14:24:39.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP第一章"><a href="#CSAPP第一章" class="headerlink" title="CSAPP第一章"></a>CSAPP第一章</h1><h2 id="本章的目的"><a href="#本章的目的" class="headerlink" title="本章的目的"></a>本章的目的</h2><p>本书的目的是让我们程序员能够写出更好的程序，而为了能够写出更好的程序，我们程序员需要做到以下几点：</p><h3 id="了解C语言的存储方式以及C语言的生命周期"><a href="#了解C语言的存储方式以及C语言的生命周期" class="headerlink" title="了解C语言的存储方式以及C语言的生命周期"></a>了解C语言的存储方式以及C语言的生命周期</h3><p>编写好的C程序是以文本格式放在硬盘里的，而了解C语言生命周期，就是去了解为C程序准备的编译系统，原因有三点：</p><ol><li>为了优化程序性能；去了解C语言从被创建，到被编译为可执行文件的过程，这需要深入C语言的汇编层面实现等等，这些可以帮助我们选择更好的方式进行功能的实现，以及了解C语言的各种抽象表示是如何实现的，比如指针、数组；</li><li>处理链接方面的错误；gcc把 .c文件编译成为可执行文件的最后一个步骤就是链接，是将print.o和被编译为可重定向的二进制目标文件依靠某种方式相结合的过程，最后编译完成的文件拥有了能够把结果输出在命令行中的能力；链接方面的错误包括在同一工程下定义两个同名的全局变量等等；</li><li>避免安全漏洞；比如缓冲区溢出等问题；</li></ol><h3 id="了解计算机的底层"><a href="#了解计算机的底层" class="headerlink" title="了解计算机的底层"></a>了解计算机的底层</h3><p>其实就是去了解C程序在被编译完成到显示在命令行里的过程，这其间免不了接触计算机的硬件和他们的抽象，因为这要涉及把文件从哪读到哪，和在哪加载的过程；</p><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="1-C程序的编译过程"><a href="#1-C程序的编译过程" class="headerlink" title="1. C程序的编译过程"></a>1. C程序的编译过程</h3><p><img src="https://s2.loli.net/2022/01/26/IUtad2vEWqBkDKe.png" width="800"></img></p><h3 id="2-系统硬件部分"><a href="#2-系统硬件部分" class="headerlink" title="2. 系统硬件部分"></a>2. 系统硬件部分</h3><h4 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h4><ol><li><p>总线</p><p>总线负责在硬件之间传递各种比特流，一次可以传送的字节为系统的字长，比如32位系统的字长是32bit，也就是4字节；</p><table><thead><tr><th>在并发编程时，为了保证线程之间对共享资源的有序访问，通常需要给线程加锁，比如Java中的关键字synchronized；如果发生多个线程对共享资源的重度竞争，synchronized会膨胀为重量级锁，而重量级锁需要向操作系统申请内核空间的锁资源，该锁资源追溯到HotSpot里，其中一种实现方式便是锁总线;</th></tr></thead></table></li><li><p>I/O设备</p><p>输入输出设备，比如键盘、鼠标、显示器和磁盘，他们和总线之间靠控制器和适配器连接起来；</p></li><li><p>主存</p><p>类似一个巨大的一维数组，每个存储单元都由他的地址和存储的数据这两部分组成，将C语言反编译为汇编即可发现汇编的许多东西都是在不同的地址和存储数据之间反复横跳；</p></li><li><p>处理器</p><p>由程序计数器PC、逻辑运算单元ALU和寄存器文件组成，他们的工作很简单，PC指向下一条指令地址，读取该地址的值，ALU进行逻辑运算，寄存器负责存储信息；</p></li></ol><h4 id="运行Hello程序"><a href="#运行Hello程序" class="headerlink" title="运行Hello程序"></a>运行Hello程序</h4><ol><li> Hello程序编译完成之后，在shell程序中输入./a.out，这个过程中，shell程序会把按下的值存到寄存器里，再读到主存当中，按下回车后系统会将命令通过IO总线送入CPU内部，进行解析；</li><li> 这时，Shell发送命令，要从磁盘中找出Hello程序并加载到主存里，其实Hello程序会从磁盘加载到CPU，再从CPU加载到主存里，但DMA技术可以直接省略到CPU兜一圈的那一步；</li><li> 加载到主存之后，CPU便开始执行Hello程序的main程序中的机器语言指令,   也就是把那些个01字符串再一条一条读入CPU中,   然后执行,   最后通过IO总线将哈喽沃德传到显示器并显示在屏幕上，整个流程结束;   </li></ol><h3 id="3-高速缓存"><a href="#3-高速缓存" class="headerlink" title="3. 高速缓存"></a>3. 高速缓存</h3><p>根据机械原理,   较大的存储设备的运行速度低于较小的存储设备,   为了让系统从硬盘和主存中读取数据的速度变快,   引入了高速缓存,   高速缓存比主存小,   从高速缓存中读取数据要比从主存中读取数据快很多;   同时还有另外一个好处,   程序如果要访问某个字节,   就很可能会访问那个字节左右的一坨字节,   高速缓存的思想恰好和这个原理相契合,   程序要调用就会调用某一个区域里的数据,   这些数据刚好可以被装进高速缓存中;   </p><h3 id="4-操作系统管理硬件"><a href="#4-操作系统管理硬件" class="headerlink" title="4. 操作系统管理硬件"></a>4. 操作系统管理硬件</h3><p>图1-10展示了计算机系统硬软组件的关系,   应用程序想要访问硬件,   必须通过操作系统;   图1-11是老大爷操作系统给他的子子孙孙—应用程序所做的抽象,   操作系统为应用程序屏蔽掉硬件设备的复杂性,   也就是说,   操作系统干了很多事,   当应用程序通过操作系统访问硬件时,   好像他在单独使用那些硬件设备一样;   </p><p><img src="https://s2.loli.net/2022/02/07/mIbecXOVEtdvaQx.png" width="400"></img></p><ol><li><p>进程</p><p>进程是对一个正在运行的程序进行的抽象,   这种抽象给人一种感觉,   好像这个程序是单独运行在计算机上的;   但其实每个进程都在CPU里运行一段时间;   这种抽象大致的实现为,   操作系统记录下即将不再占用CPU资源的进程1的上下文,   上下文包括PC和寄存器值等,   待其他进程也放弃了CPU资源时,   操作系统加载进程1的上下文,   让他再次运行在CPU中;   下图中,   进程A要进行上下文切换,   需要调用一个专门的系统调用函数,   这个函数里装的是内核代码,   存放在内核虚拟内存当中,   应用程序不可以对这部分内存进行修改;   </p><p><img src="https://s2.loli.net/2022/02/07/Fb3sxSf6eamD9qP.png" width="600"></img></p></li><li><p>虚拟内存</p><p>虚拟内存是对内存的抽象,   进程通过虚拟内存看内存,   好像自己在独占内存一样;   虚拟内存如下图,   从下到上依次是代码和全局变量数据,   堆,   存放标准库和数学库的共享库,   函数调用时会增大的栈,   以及存放内核代码的内核虚拟内存;   </p><p><img src="https://s2.loli.net/2022/02/07/KHoLAjP6nTgr5Ni.png" width="500"></img></p></li><li><p>文件</p><p>所有的I/O设备都可以看成是文件,   这使得进程可以以一种统一的视角去看待各式各样的I/O设备,   也就是说,   他看鼠标也是文件,   看显示器也是文件,   网络也是,   就跟之前做的抽象是一样的;   </p></li></ol><h3 id="5-重要主题"><a href="#5-重要主题" class="headerlink" title="5. 重要主题"></a>5. 重要主题</h3><ol><li><p>Amdahl定律</p><p>思想:   当我们对系统的某一部分进行性能的加速时,   加速效率取决于这一部分占系统的百分之多少,   以及加速了多少;   </p><p>具体公式来描述,   假设系统执行某程序所需时间为T<sub>old</sub>,   系统的某部分执行该程序的某部分所需时间为αT<sub>old</sub>,   系统的该部分加速之后执行原来的那部分程序所需时间为αT<sub>old</sub> / k,   加速之后,   整个系统需要的新总时间为</p><center>T<sub>new</sub> = (1 - α)T<sub>old</sub> + αT<sub>old</sub> / k</center><p>所以加速比为</p><center><img src="https://s2.loli.net/2022/02/07/a9hXsycLjN8rDfH.png" width="300"></img></center></li><li><p>并发</p><p>线程级并发,   指CPU在进程之间快速切换,   形成并发执行的假象;   超线程的处理器其实用到异步的思想;   </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSAPP第一章&quot;&gt;&lt;a href=&quot;#CSAPP第一章&quot; class=&quot;headerlink&quot; title=&quot;CSAPP第一章&quot;&gt;&lt;/a&gt;CSAPP第一章&lt;/h1&gt;&lt;h2 id=&quot;本章的目的&quot;&gt;&lt;a href=&quot;#本章的目的&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
</feed>
