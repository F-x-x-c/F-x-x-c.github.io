<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aegis</title>
  
  <subtitle>Aegis Curiser</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-30T15:12:48.149Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Deng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法体系结构014_并查集</title>
    <link href="http://example.com/2022/01/27/suan-fa-ti-xi-jie-gou-014-bing-cha-ji/"/>
    <id>http://example.com/2022/01/27/suan-fa-ti-xi-jie-gou-014-bing-cha-ji/</id>
    <published>2022-01-27T07:10:44.000Z</published>
    <updated>2022-01-30T15:12:48.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>有许多元素，在最初时每个元素都被放在了不同的集合里，另外还有两个方法，</p><p>boolean isSameSet(a, e)判断两个元素所在的集合是否相同；</p><p>void union(a, e)将a和e背后的集合合并为一个集合；</p><p>并且要求这两种方法的时间复杂度均摊为O(1)；</p><table><thead><tr><th align="left">为什么会存在并查集：这种数据结构的用途是在保证O(1)的前提下，将两个集合合并为一个集合；因为不管是链表还是哈希表，如果在双方内部包含元素都很多的前提下，都要考虑是将哪个集合融到另外一个集合里；退一步讲，在计算机领域，将一个元素放入集合里，经常是把这个元素的指针指到某个位置，或者给他一个标志位，而不管是链表还是哈希表，在进行集合合并时，都需要修改这个标志位，那时间复杂度必定不会是O(1)，并查集就是解决这个问题的</th></tr></thead></table><h2 id="2-结构设计"><a href="#2-结构设计" class="headerlink" title="2. 结构设计"></a>2. 结构设计</h2><p>每个集合都存在一个代表结点，每个元素都有一个指针，一开始指向自己，如图1，这时自己便是代表结点，如果把a和e作为参数调用union方法，则e的指针指向a，e的代表结点变为了a，如图2，如果再判断两个元素所处的集合是否为同一个时，只需要拿到那两个元素的代表结点判断一下是否为同一个即可；而当元素已经变成图3的状况，而且要将e和d作为参数把这两个集合合并时，e往上会找到a，d往上会找到b，代表结点不是同一个，这时将拥有元素少的集合的代表结点b的指针指向a即可；</p><p><img src="https://s2.loli.net/2022/01/28/SBnroAECZ6cDKwj.png" alt="image-20220128205150220.png"><img src="https://s2.loli.net/2022/01/28/ESBQTHOzGqR61vk.png" alt="image-20220128205158005.png"><img src="https://s2.loli.net/2022/01/28/yGU4bi9PYxLJmkV.png" alt="image-20220128205248857.png"></p><p>另外，为了使性能得到提升，一般都会采取扁平化处理；</p><h2 id="3-代码落地"><a href="#3-代码落地" class="headerlink" title="3. 代码落地"></a>3. 代码落地</h2><h3 id="3-1-数据包层"><a href="#3-1-数据包层" class="headerlink" title="3.1 数据包层"></a>3.1 数据包层</h3><p>把提供的数据用一个类包起来，类似于Integer等包装类型的思路；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">V value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-并查集设计"><a href="#3-2-并查集设计" class="headerlink" title="3.2 并查集设计"></a>3.2 并查集设计</h3><ol><li><p>提供三张表，nodes用于将提供数据和包装数据进行对应，parentMap用于记录各个结点的代表结点，sizeMap用于记录代表结点的集合大小；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HashMap&lt;V, Node&lt;V&gt;&gt; nodes;          </span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Node&lt;V&gt;&gt; parentMap;</span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Node&lt;V&gt;, Integer&gt; sizeMap;  </span><br></pre></td></tr></table></figure></li><li><p>对表进行初始化；先创建出三张哈希表，再把值包为Node类型，设置其对应表，代表结点为自己，大小为1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnionSet</span><span class="params">(List&lt;V&gt; values)</span> </span>&#123;      </span><br><span class="line">nodes = <span class="keyword">new</span> HashMap&lt;&gt;();           </span><br><span class="line">parentMap = <span class="keyword">new</span> HashMap&lt;&gt;();       </span><br><span class="line">sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();         </span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">for</span> (V cur : values) &#123;             </span><br><span class="line">Node&lt;V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(cur);</span><br><span class="line">nodes.put(cur, node);          </span><br><span class="line">parentMap.put(node, node);     </span><br><span class="line">sizeMap.put(node, <span class="number">1</span>);          </span><br><span class="line">&#125;                                  </span><br><span class="line">&#125;                                      </span><br></pre></td></tr></table></figure></li><li><p>findFather( )方法设计；负责寻找代表结点；传入一个结点，让他通过parentMap不断往上直到找出代表结点；为了实现并查集扁平化，这里需要用栈来收集那一条的路径上的点，然后一一弹出并设置他们的代表结点为最上方的那一个，也就是修改他们的父亲节点为代表节点；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;V&gt; <span class="title">findFather</span><span class="params">(Node&lt;V&gt; cur)</span></span>&#123; </span><br><span class="line">Stack&lt;Node&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (cur != parentMap.get(cur)) &#123; </span><br><span class="line">path.push(cur);                 </span><br><span class="line">cur = parentMap.get(cur);       </span><br><span class="line">&#125;                                   </span><br><span class="line">                                    </span><br><span class="line"><span class="keyword">while</span>(!path.isEmpty()) &#123;            </span><br><span class="line">parentMap.put(path.pop(), cur); </span><br><span class="line">&#125;                                   </span><br><span class="line">                                    </span><br><span class="line"><span class="keyword">return</span> cur;                         </span><br><span class="line">&#125;                                       </span><br></pre></td></tr></table></figure></li><li><p>isSameSet( )方法设计；判断两个结点是否在同一个集合里；传入两个基本数据类型，通过nodes表寻找到对应的包装类型，再调用findFather( )来寻找代表结点，需要注意的是，代表结点为一个类，可以直接拿两个这种类型的节点用 == 进行比较，这就是包装节点的优势，但劣势是需要原始数据不能有重复的值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;                            </span><br><span class="line"><span class="keyword">return</span> findFather(nodes.get(a)) == findFather(nodes.get(b));</span><br><span class="line">&#125;                                                               </span><br></pre></td></tr></table></figure></li><li><p>union( )方法设计；将两个不属于同一个集合的点对应的集合合并为同一个；首先要找到他们的代表节点，如果代表结点不同，再执行下面的操作，把他们各自背后的集合的大小进行比较，设两个指针指向大集合和小集合，最后设置小代表节点为大代表节点，修改大代表节点的集合大小为两集合大小相加，并删除小代表节点在sizeMap里的记录；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;                        </span><br><span class="line">Node&lt;V&gt; nodeA = <span class="keyword">new</span> Node&lt;&gt;(a);                   </span><br><span class="line">Node&lt;V&gt; nodeB = <span class="keyword">new</span> Node&lt;&gt;(b);                   </span><br><span class="line"><span class="keyword">if</span> (nodeA != nodeB) &#123;                            </span><br><span class="line"><span class="keyword">int</span> sizeA = sizeMap.get(nodeA);              </span><br><span class="line"><span class="keyword">int</span> sizeB = sizeMap.get(nodeB);              </span><br><span class="line">Node&lt;V&gt; big = sizeA &gt;= sizeB ? nodeA : nodeB;</span><br><span class="line">Node&lt;V&gt; small = big == nodeA ? nodeB : nodeA;</span><br><span class="line">parentMap.put(small, big);                   </span><br><span class="line">sizeMap.put(big, sizeA + sizeB);             </span><br><span class="line">sizeMap.remove(small);                       </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br></pre></td></tr></table></figure></li><li><p>set( )方法设计；获取现在还有多少集合；因为sizeMap是只存代表节点的记录，所以sizeMap的大小和现存集合数量一致；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sets</span><span class="params">()</span> </span>&#123;       </span><br><span class="line"><span class="keyword">return</span> sizeMap.size();</span><br><span class="line">&#125;                         </span><br></pre></td></tr></table></figure></li></ol><h2 id="4-题目"><a href="#4-题目" class="headerlink" title="4. 题目"></a>4. 题目</h2><h4 id="4-1-朋友圈"><a href="#4-1-朋友圈" class="headerlink" title="4.1 朋友圈"></a>4.1 朋友圈</h4><ol><li><p>题目描述</p><p>给定一个N*N的二维数组,  每个下标都代表了一个人,  任意两个人在数组中交叉形成的数字代表这两个人认不认识,  1代表认识,  而且必定是相互认识,  不会出现我认识你但你不认识我的情况,  所以这个二维数组一定是一个对称矩阵,  并且主对角线全是1,  认识的人不管是通过什么途径认识的,  共同组成一个朋友圈;  现在给定这样一个二维数组,  要求返回共有多少个朋友圈,  也就是有多少个连通区域;</p></li><li><p>实现思路</p><p>本题采用数组来实现并查集,  数组parent的含义为数组下标的直系长辈是对应的值,  不过因为在查询代表节点时要对那一条链进行扁平化 ,  所以,   sets表示当前的集合数,   数组help用于替代栈来对向上查询路径上的点进行存储;   而其他的操作和上述实现一致,   最后返回sets即可;</p></li><li><p>代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://leetcode.com/problems/friend-circles/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code01_FriendCircles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] parent;</span><br><span class="line"><span class="keyword">int</span>[] size;</span><br><span class="line"><span class="keyword">int</span>[] help;</span><br><span class="line"><span class="keyword">int</span> sets;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span>[][] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = arr.length;</span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">help = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">sets = N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">parent[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAncestor</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> hi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != parent[i]) &#123;</span><br><span class="line">help[hi++] = i;</span><br><span class="line">i = parent[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; hi; j++) &#123;</span><br><span class="line">parent[help[j]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ancI = findAncestor(i);</span><br><span class="line"><span class="keyword">int</span> ancJ = findAncestor(j);</span><br><span class="line"><span class="keyword">if</span> (ancI != ancJ) &#123;</span><br><span class="line"><span class="keyword">if</span> (size[ancI] &gt;= size[ancJ]) &#123;</span><br><span class="line">size[ancI] += size[ancJ];</span><br><span class="line">parent[ancI] = ancJ;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">size[ancJ] += size[ancI];</span><br><span class="line">parent[ancJ] = ancI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sets--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] isConnected)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = isConnected.length;</span><br><span class="line">init(isConnected);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (isConnected[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">union(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-发现岛屿"><a href="#4-2-发现岛屿" class="headerlink" title="4.2 发现岛屿"></a>4.2 发现岛屿</h4><ol><li><p>题目描述</p><p>给定一个二维char型数组,   数组中只存在’1’和’0’,   规定一个岛屿由一片上下左右相邻的’1’组成,   求有多少个这样的岛屿;   </p></li><li><p>实现思路1</p><p>用递归实现,   遍历数组的每一个元素,   如果是’1’,   则发现一个岛屿,   岛屿数加一,   并且递归式地去发现这个’1’的上下左右,   如果是’1’,   则改为其他字符,   考虑了越界等问题后,   递归函数的终止条件变得很大一串;   </p></li><li><p>代码1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://leetcode.com/problems/number-of-islands/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code02_NumberOfIsLands</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> isLands = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">isLands++;</span><br><span class="line">infect(grid, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> isLands;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infect</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span> || i == grid.length || j &lt; <span class="number">0</span> || j == grid[<span class="number">0</span>].length || grid[i][j] != <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">infect(grid, i - <span class="number">1</span>, j);</span><br><span class="line">infect(grid, i + <span class="number">1</span>, j);</span><br><span class="line">infect(grid, i, j - <span class="number">1</span>);</span><br><span class="line">infect(grid, i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>时间复杂度1</p><p>在主流程里每个点被调用一次,   总共M * N个点,   由于感染函数的时间复杂度不稳定,   所以要从另外一个角度切入,   每个点会被他的上下左右各调用一次,   总共就是五次,   所以时间复杂度O(M * N);   </p></li><li><p>说明1</p><p>(1)为什么不能只感染右下,   如图5,   只感染右下的话,   遍历到第一行的1时会将右边红框看成一个岛屿,   而遍历到第二行的1时则把左边红框看成另一个岛屿;   </p><p><img src="C:\Users\14593\AppData\Roaming\Typora\typora-user-images\image-20220129205533986.png" alt="image-20220129205533986"></p><p>(2)为什么不能只感染左右下,   答案与(1)类似,   如图6</p><p>总结:   这种问题的解决途径是构建一幅感染的图景,   类似于鳄鱼小顽皮里脏水污染干净水,   而数组是从左上往右下遍历的,   如果只感染右下,   那么就不会感染到左边的’1’,   如果只感染左右下的话,   自然不会感染到上方的’1’;   </p></li><li><p>实现思路2</p><p>用带表的并查集来实现;   每个元素一开始都对应有一个独一无二的地址,   遍历数组,   对每个元素的右方和上方的元素进行判定,   如果有’1’,   则把那些’1’都合并起来,   其实说白了,   就是将那些’1’包一层以此区分开来(区分开来是为了让不同的’1’指向代表节点’1’),   然后不断地判定右方和上方的元素,   将其纳入到自己的集合里来,   就是这么个过程;   </p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并查集代码和带表并查集一模一样</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;                                </span><br><span class="line">                                                         </span><br><span class="line">&#125;                                                        </span><br><span class="line">                                                         </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numIslands2</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;           </span><br><span class="line"><span class="keyword">if</span> (grid == <span class="keyword">null</span>) &#123;                                  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;                                        </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line">Dot[][] dots = <span class="keyword">new</span> Dot[grid.length][grid[<span class="number">0</span>].length]; </span><br><span class="line">                                                         </span><br><span class="line">List&lt;Dot&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();                  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;       </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                     </span><br><span class="line">dots[i][j] = <span class="keyword">new</span> Dot();                  </span><br><span class="line">list.add(dots[i][j]);                    </span><br><span class="line">&#125;                                            </span><br><span class="line">&#125;                                                </span><br><span class="line">                                                         </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line">UnionFind&lt;Dot&gt; u = <span class="keyword">new</span> UnionFind&lt;&gt;(list);            </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid[<span class="number">0</span>].length; i++) &#123;           </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[<span class="number">0</span>][i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">u.union(dots[<span class="number">0</span>][i], dots[<span class="number">0</span>][i - <span class="number">1</span>]);         </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[i - <span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">u.union(dots[i - <span class="number">1</span>][<span class="number">0</span>], dots[i][<span class="number">0</span>]);         </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;              </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;       </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                     </span><br><span class="line"><span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>) &#123;             </span><br><span class="line">u.union(dots[i - <span class="number">1</span>][j], dots[i][j]); </span><br><span class="line">&#125;                                        </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">if</span> (grid[i][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;             </span><br><span class="line">u.union(dots[i][j], dots[i][j - <span class="number">1</span>]); </span><br><span class="line">&#125;                                        </span><br><span class="line">&#125;                                            </span><br><span class="line">&#125;                                                </span><br><span class="line">&#125;                                                    </span><br><span class="line">                                                         </span><br><span class="line"><span class="keyword">return</span> u.sizeMap.size();                             </span><br><span class="line">&#125;                                                        </span><br></pre></td></tr></table></figure></li><li><p>实现思路3</p><p>用数组实现的并查集来实现;   简要分析,   数组实现提供了parentMap,   sizeMap和help三个一维数组,   而本题提供的是一个非N*N的二维数组,   所以前面他们三个的长度都要为二维数组的长 * 宽,   并且要建立好二维数组坐标到一维数组坐标的映射,</p><table><thead><tr><th>左神采用的是[i * 宽 + j]的形式,   这种映射关系,   要么设置那三个数组的长度远超[i * 宽 + j]可及范围,   如果数组长度为长 * 宽时,   映射的索引值就要设置为[行坐标 * 宽 + 列坐标]或者[列坐标 * 长 + 行坐标],   假如设置为[行坐标 * 长 + 列坐标]的话,   可能会出现越界的问题,   比如维度为两行一列的数组,   映射到一维数组后数组长度为2,   最大下标为1,   遍历到第二行时就会出现[1 * 2 + 0] = [2]的情况,   而[行坐标 * 宽 + 列坐标]或者[列坐标 * 长 + 行坐标]就不会出现越界;</th></tr></thead></table></li><li><p>代码实现</p><p>建立好映射关系后,   只需要注意一些细节即可,   比如使用help数组时,   那里面的变量要自加,   i要不断等于parent[i]之类的;   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] parent;                                      </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] size;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] help;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sets;                                          </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height;                                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> weight;                                        </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numIslands3</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;            </span><br><span class="line">height = grid.length;                                 </span><br><span class="line">weight = grid[<span class="number">0</span>].length;                              </span><br><span class="line"><span class="keyword">int</span> len = height * weight;                            </span><br><span class="line">                                                          </span><br><span class="line">parent = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                </span><br><span class="line">size = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                  </span><br><span class="line">help = <span class="keyword">new</span> <span class="keyword">int</span>[len];                                  </span><br><span class="line">sets = <span class="number">0</span>;                                             </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;                    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; weight; j++) &#123;                </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                      </span><br><span class="line">parent[i * weight + j] = i * weight + j;  </span><br><span class="line">size[i * weight + j] = <span class="number">1</span>;                 </span><br><span class="line">sets++;                                   </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; weight; i++) &#123;                    </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="string">&#x27;1&#x27;</span>) &#123;                          </span><br><span class="line"><span class="keyword">if</span> (grid[<span class="number">0</span>][i - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;                  </span><br><span class="line">union(<span class="number">0</span>, i, <span class="number">0</span>, i - <span class="number">1</span>);                    </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; height; j++) &#123;                    </span><br><span class="line"><span class="keyword">if</span> (grid[j][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; grid[j - <span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span>) &#123; </span><br><span class="line">union(j, <span class="number">0</span>, j - <span class="number">1</span>, <span class="number">0</span>);                        </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; height; i++) &#123;                    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; weight; j++) &#123;                </span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;                      </span><br><span class="line"><span class="keyword">if</span> (grid[i - <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>) &#123;              </span><br><span class="line">union(i, j, i - <span class="number">1</span>, j);                </span><br><span class="line">&#125;                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">if</span> (grid[i][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;              </span><br><span class="line">union(i, j, i, j - <span class="number">1</span>);                </span><br><span class="line">&#125;                                         </span><br><span class="line">&#125;                                             </span><br><span class="line">&#125;                                                 </span><br><span class="line">&#125;                                                     </span><br><span class="line"><span class="keyword">return</span> sets;</span><br><span class="line">    &#125;                                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;                           </span><br><span class="line"><span class="keyword">int</span> h1 = <span class="number">0</span>;                                           </span><br><span class="line"><span class="keyword">while</span> (i != parent[i]) &#123;                              </span><br><span class="line">help[h1++] = i;                                   </span><br><span class="line">i= parent[i];                                     </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h1; j++) &#123;                        </span><br><span class="line">parent[help[j]] = i;                              </span><br><span class="line">&#125;                                                     </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">return</span> i;                                             </span><br><span class="line">&#125;                                                         </span><br><span class="line">                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i1, <span class="keyword">int</span> j1, <span class="keyword">int</span> i2, <span class="keyword">int</span> j2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> anc1 = find(i1 * weight + j1);                    </span><br><span class="line"><span class="keyword">int</span> anc2 = find(i2 * weight + j2);                    </span><br><span class="line">                                                          </span><br><span class="line"><span class="keyword">if</span> (anc1 != anc2) &#123;                                   </span><br><span class="line"><span class="keyword">if</span> (size[anc1] &gt;= size[anc2]) &#123;                   </span><br><span class="line">parent[anc2] = anc1;                          </span><br><span class="line">size[anc1] += size[anc2];                     </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                                          </span><br><span class="line">parent[anc1] = anc2;                          </span><br><span class="line">size[anc2] += size[anc1];                     </span><br><span class="line">&#125;                                                 </span><br><span class="line">                                                          </span><br><span class="line">sets--;                                           </span><br><span class="line">&#125;                                                     </span><br><span class="line">&#125;                                                         </span><br></pre></td></tr></table></figure></li></ol><h4 id="4-3-发现岛屿II"><a href="#4-3-发现岛屿II" class="headerlink" title="4.3 发现岛屿II"></a>4.3 发现岛屿II</h4><ol><li><p>题目描述</p><p>给定一个全零二维的矩阵,   依次给入一些点对,   把这些点对对应的二维矩阵上的0变成1,   岛屿判断机制与上一题一样,   问每一步有多少个岛屿;   </p></li><li><p>实现思路</p><p>对size数组动手脚,   一开始全0,   所以size的任意位置都为0,   当某一个点被设置为1后,   对应的size位置也会被设为1,   而当两个集合准备合并时,   只需要保留小的代表节点的值即可;    </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1.</summary>
      
    
    
    
    <category term="算法体系结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>CSAPP_Chapter1</title>
    <link href="http://example.com/2022/01/26/csapp-chapter2/"/>
    <id>http://example.com/2022/01/26/csapp-chapter2/</id>
    <published>2022-01-26T11:45:15.000Z</published>
    <updated>2022-01-28T16:18:17.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSAPP第一章"><a href="#CSAPP第一章" class="headerlink" title="CSAPP第一章"></a>CSAPP第一章</h1><h2 id="本章的目的"><a href="#本章的目的" class="headerlink" title="本章的目的"></a>本章的目的</h2><p>本书的目的是让我们程序员能够写出更好的程序，而为了能够写出更好的程序，我们程序员需要做到以下几点：</p><h3 id="了解C语言的存储方式以及C语言的生命周期"><a href="#了解C语言的存储方式以及C语言的生命周期" class="headerlink" title="了解C语言的存储方式以及C语言的生命周期"></a>了解C语言的存储方式以及C语言的生命周期</h3><p>编写好的C程序是以文本格式放在硬盘里的，而了解C语言生命周期，就是去了解为C程序准备的编译系统，原因有三点：</p><ol><li>为了优化程序性能；去了解C语言从被创建，到被编译为可执行文件的过程，这需要深入C语言的汇编层面实现等等，这些可以帮助我们选择更好的方式进行功能的实现，以及了解C语言的各种抽象表示是如何实现的，比如指针、数组；</li><li>处理链接方面的错误；gcc把 .c文件编译成为可执行文件的最后一个步骤就是链接，是将print.o和被编译为可重定向的二进制目标文件依靠某种方式相结合的过程，最后编译完成的文件拥有了能够把结果输出在命令行中的能力；链接方面的错误包括在同一工程下定义两个同名的全局变量等等；</li><li>避免安全漏洞；比如缓冲区溢出等问题；</li></ol><h3 id="了解计算机的底层"><a href="#了解计算机的底层" class="headerlink" title="了解计算机的底层"></a>了解计算机的底层</h3><p>其实就是去了解C程序在被编译完成到显示在命令行里的过程，这其间免不了接触计算机的硬件和他们的抽象，因为这要涉及把文件从哪读到哪，和在哪加载的过程；</p><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="C程序的编译过程"><a href="#C程序的编译过程" class="headerlink" title="C程序的编译过程"></a>C程序的编译过程</h3><img src="https://s2.loli.net/2022/01/26/IUtad2vEWqBkDKe.png" alt="image-20220126210026331.png" style="zoom: 70%;" /><h3 id="系统硬件部分"><a href="#系统硬件部分" class="headerlink" title="系统硬件部分"></a>系统硬件部分</h3><h4 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h4><ol><li><p>总线</p><p>总线负责在硬件之间传递各种比特流，一次可以传送的字节为系统的字长，比如32位系统的字长是32bit，也就是4字节；</p><table><thead><tr><th>在并发编程时，为了保证线程之间对共享资源的有序访问，通常需要给线程加锁，比如Java中的关键字synchronized；如果发生多个线程对共享资源的重度竞争，synchronized会膨胀为重量级锁，而重量级锁需要向操作系统申请内核空间的锁资源，该锁资源追溯到HotSpot里，其中一种实现方式便是锁总线</th></tr></thead></table></li><li><p>I/O设备</p><p>输入输出设备，比如键盘、鼠标、显示器和磁盘，他们和总线之间靠控制器和适配器连接起来；</p></li><li><p>主存</p><p>类似一个巨大的一维数组，每个存储单元都由他的地址和存储的数据这两部分组成，将C语言反编译为汇编即可发现汇编的许多东西都是在不同的地址和存储数据之间反复横跳；</p></li><li><p>处理器</p><p>由程序计数器PC、逻辑运算单元ALU和寄存器文件组成，他们的工作很简单，PC指向下一条指令地址，读取该地址的值，ALU进行逻辑运算，寄存器负责存储信息；</p></li></ol><h4 id="运行Hello程序"><a href="#运行Hello程序" class="headerlink" title="运行Hello程序"></a>运行Hello程序</h4><ol><li> Hello程序编译完成之后，在shell程序中输入./a.out，这个过程中，shell程序会把按下的值存到寄存器里，再读到主存当中，按下回车后系统会将命令通过IO总线送入CPU内部，进行解析；</li><li>这时，Shell发送命令，要从磁盘中找出Hello程序并加载到主存里，其实Hello程序会从磁盘加载到CPU，再从CPU加载到主存里，但DMA技术可以直接省略到CPU兜一圈的那一步；</li><li>加载到主存之后，CPU便开始执行Hello程序的main程序中的机器语言指令，也就是01字符串，最后通过IO总线将哈喽沃德传到显示器并显示在屏幕上，整个流程结束；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSAPP第一章&quot;&gt;&lt;a href=&quot;#CSAPP第一章&quot; class=&quot;headerlink&quot; title=&quot;CSAPP第一章&quot;&gt;&lt;/a&gt;CSAPP第一章&lt;/h1&gt;&lt;h2 id=&quot;本章的目的&quot;&gt;&lt;a href=&quot;#本章的目的&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="CSAPP" scheme="http://example.com/categories/CSAPP/"/>
    
    
  </entry>
  
</feed>
